#include "c.ceu"

#define MAGIC_0 'P'
#define MAGIC_1 'S'

#define VERSION_MAJOR 0
#define VERSION_MINOR 0
#define VERSION_PATCH 0
#define VERSION 0.0.0       // TODO stringify

#define UV_TCP_SERVER_HANDLER_CEU server.ceu
#include "uv.ceu"

/*
-- on connection
MAGIC_0     MAGIC_1     VERSION_MAJOR   VERSION_MINOR   VERSION_PATCH
1           1           1               1               1

-- TX_PROPOSE
BC_LEN      BC_DATA     N_ZEROS         BLK-BACK-HASH   DATA-PL-HASH
1           bc_len      1               32              32

*/

native do
    enum {
        SUCCESS = 0,
        ERR_EXTRA_BYTES,
        ERR_VERSION,
    };
    enum {
        MSG_NONE = 0,
        MSG_SEND,
    };
end

input (int, _char&& &&) OS_START;

var int        argc;
var _char&& && argv;
(argc, argv) = await OS_START;
if argc < 2 then
    _fprintf(_stderr, "Usage: %s <config.lua>\n", argv[0]);
    _assert(0);
end

// load cfg=<config.lua>
do
    var char&& cfg = argv[1];
    [[
        dofile(@cfg)
    ]];
end

// spawn one client for each cfg.peers
do
    #include "client.ceu"
    var int n = [[#client.peers]];
    loop i in n do
        spawn Client.build(i+1);
    end
end

// start one server
do
    var char[] ip      = [[ server.host[1] ]];
    var int    port    = [[ server.host[2] ]];
    var int    backlog = [[ server.backlog ]];
    do UV_TCP_Server.build(&ip, port, backlog);
end

_assert(0);
escape 0;
