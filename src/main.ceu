#include "c.ceu"

#define MESSAGE_MAGIC_0 'P'
#define MESSAGE_MAGIC_1 'S'
#define MESSAGE_MAJOR   0
#define MESSAGE_MINOR   0

#define HASH_BYTES      32
#define BC_DATA_BYTES   128

#define CONTENTS_PUT_BYTES  (1+1+1+1+BC_DATA_BYTES+1+HASH_BYTES+HASH_BYTES)

#define AWAIT_UNTIL(r,nxt)          \
    if r.next < nxt then            \
        loop do                     \
            await r.ok;             \
            if r.next >= nxt then   \
                break;              \
            end                     \
        end                         \
    end

#define UV_TCP_SERVER_HANDLER_CEU server.ceu
#include "uv.ceu"
#include "client.ceu"

/*
-- CONTENTS
MESSAGE_MAGIC_0 MESSAGE_MAGIC_1 MESSAGE_MAJOR   MESSAGE_MINOR
1               1               1               1
BC_SIGNED?      BC_LEN          BC_DATA
1b              7b              bc_len
ZEROS_N         BLK_BACK_HASH   CONTENTS_DATA_HASH
1               32              32
--
NOUNCE          CONTENTS_LEN    CONTENTS_DATA
1               4 (1xU32)       contents_len
*/

native do
    enum {
        ERR_NONE         =  0,
        ERR_EXTRA_BYTES  = -1,
        ERR_MESSAGE      = -2,
        ERR_DISCONNECTED = -3,
    };
    enum {
        MSG_NONE = 0,
        MSG_CONTENTS_PUT,
        MSG_CONTENTS_DATA,
    };
end

input (int, _char&& &&) OS_START;

var int        argc;
var _char&& && argv;
(argc, argv) = await OS_START;
if argc < 2 then
    _fprintf(_stderr, "Usage: %s (<src.lua>)+\n", argv[0]);
    _assert(0);
end

// load *.lua files
[[ dofile'src/common.lua' ]];
loop i in argc-1 do
    var char&& cfg = argv[i+1];
    [[
        dofile(@cfg)
    ]];
end

par/or do
    do Client;
    await FOREVER;
with
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _printf("Listening in %s:%d.\n", (_char&&)&&ip, port);
    do UV_TCP_Server.build(&ip, port, backlog);
end

_assert(0);
escape 0;
