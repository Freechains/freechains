#include "c.ceu"

#define MAGIC_0 'P'
#define MAGIC_1 'S'

#define VERSION_MAJOR 0
#define VERSION_MINOR 0
#define VERSION_PATCH 0
#define VERSION 0.0.0       // TODO stringify

#define HASH_BYTES      32
#define BC_DATA_BYTES   128

#define MAGIC_VERSION_BYTES (1+1+1+1+1)
#define CONTENTS_PUT_BYTES  (1+BC_DATA_BYTES+1+HASH_BYTES+HASH_BYTES)


#define UV_TCP_SERVER_HANDLER_CEU server.ceu
#include "uv.ceu"

/*
-- MAGIC_VERSION
MAGIC_0     MAGIC_1     VERSION_MAJOR   VERSION_MINOR   VERSION_PATCH
1           1           1               1               1

-- CONTENTS_PUT
BC_SIGNED?  BC_LEN      BC_DATA     ZEROS_N         BLK_BACK_HASH   CONTENTS_DATA_HASH
1b          7b          bc_len      1               32              32

-- CONTENTS_DATA
NOUNCE      CONTENTS_LEN CONTENTS_DATA
1           4 (1xU32)   contents_len
*/

native do
    enum {
        ERR_NONE        =  0,
        ERR_EXTRA_BYTES = -1,
        ERR_VERSION     = -2,
    };
    enum {
        MSG_NONE = 0,
        MSG_CONTENTS_PUT,
        MSG_CONTENTS_DATA,
    };
end

input (int, _char&& &&) OS_START;

var int        argc;
var _char&& && argv;
(argc, argv) = await OS_START;
if argc < 2 then
    _fprintf(_stderr, "Usage: %s (<src.lua>)+\n", argv[0]);
    _assert(0);
end

// load *.lua files
[[ dofile'src/common.lua' ]];
loop i in argc-1 do
    var char&& cfg = argv[i+1];
    [[
        dofile(@cfg)
    ]];
end

// spawn one client for each cfg.peers
do
    #include "client.ceu"
    var int n = [[#APP.client.peers]];
    loop i in n do
        spawn Client.build(i+1);
    end
end

// start one server
do
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    do UV_TCP_Server.build(&ip, port, backlog);
end

_assert(0);
escape 0;
