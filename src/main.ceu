#define DBG 0

#include "common.ceu"

[[
    dofile 'src/common.lua'
    local config, input, output = table.unpack(arg)
    dofile(config)
    THIS = {
        input   = input,
        output  = output,
        pending = {},
    }
]]

event none write_ok;
var UV_TCP_Server_Data shared = _;
spawn Errors(&shared);

await Init();
[[
    for id, chain in pairs(FC.chains) do
        chain.last_output = chain.head
    end
]]

var[] byte ip      = [] .. [[ CFG.server.address or '0.0.0.0' ]] .. [0];
var   int  port    = [[ CFG.server.port or 8330 ]];
var   int  backlog = [[ CFG.server.backlog or 128 ]];
spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);
_dbg(0, "server | listening in %s:%d", &&ip[0], port);

par do
    spawn do
        var int  msg;
        var bool err;
        var int  ret;
        every (msg,err,ret) in shared.ok do
            if not err then
                _ceu_assert(msg == {MESSAGE10}, "bug found");
                if ret == {MESSAGE10_OK} then
                    //[[ print('>>> PENDING >>>', ARGS.chain.id) ]];
                    [[ THIS.pending[#THIS.pending+1] = ARGS.chain ]];
                    var[256] byte id = []..[[ARGS.chain.id]]..[0];
                    _dbg(0, "server | pending in %s", &&id[0]);
                end
            end
        end
    end

    loop do
        loop do
            var bool has_pending = [[ #THIS.pending>0 ]];
            if has_pending then
                break;
            else
                emit write_ok;
                await shared.ok;
            end
        end

        [[
            THIS.chain = table.remove(THIS.pending,1)
            path = CFG.dir..'/chains/'..THIS.chain.id..'.chain'
            --print('>>> WRITE >>>', THIS.chain.id, path)
        ]]
        var[] byte path = [] .. [[path]] .. [0];

        [[
            local f = assert(io.open(OUTPUT, 'a'))
            local function out (cur)   -- reverse order
                if cur == THIS.chain.last_output then
                    return   -- handled previously
                end
                out(cur.prv)
                local t = {
                    version = '1.0',
                    hash = cur.hash,
                    timestamp = cur.timestamp,
                    chain = {
                        key   = cur.chain.key,
                        zeros = cur.chain.zeros,
                    },
                    publication = {
                        hash      = cur.publication.hash,
                        timestamp = cur.publication.timestamp,
                        payload   = cur.publication.payload,
                    },
                }
                f:write(tostring2(t,true))
            end
            out(THIS.chain.head)
            THIS.chain.last_output = THIS.chain.head
            f:close()
        ]]

        // persist after handling
        [[ ARGS={ chain=THIS.chain } ]];
        await FS_write_10();
    end
with
    // the "par" is required because of the separated "lua[]"
    // because of the "async/thread" because of the blocking "f:read()"
    var[] byte msg;
    event none ok;
    par do
        await ok;
        loop do
            [[
                assert(load('ARGS = { @msg }'))()
            ]]
            _dbg(0, "client...");
            await Client(&shared);
            _dbg(0, "client | ok");
            par/and do
                emit ok;
            with
                await ok;
            end
        end
    with
        lua[] do
            [[
                f = assert(io.open(THIS.input, 'r+'))
            ]]
            do finalize with
                [[ f:close() ]]
            end
            loop do
                await async/thread (msg) do
                    [[
                        n = f:read('l')
                        print('>>> n >>>', f, n)
                    ]]
                end
                var bool eof = [[ n == nil ]];
                if eof then
                    await write_ok;
                    escape 0;
                end
                [[
                    n = assert(tonumber(n))
                    --print(n)
                    msg = f:read(n)
                    --print(msg)
                ]]
                msg = [] .. [[ msg ]];
                par/and do
                    emit ok;
                with
                    await ok;
                end
            end
        end
    end
end
