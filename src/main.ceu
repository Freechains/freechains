#include "common.ceu"

var UV_TCP_Server_Data shared = _;
[=[
    dofile 'src/common.lua'
    CONFIG, _, _ = table.unpack(arg)
    dofile(CONFIG)
]=];

await Init();

var int n = [[ #APP.chains ]];
var int i;
loop i in [1 -> n] do
    [[
        chain = APP.chains[@i]
        chain.prv_head_hash = chain.head_hash
    ]]
end

var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
var   int  port    = [[ APP.server.host[2] ]];
var   int  backlog = [[ APP.server.backlog ]];
_dbg(0, "server | listening in %s:%d", &&ip[0], port);
spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

event none write_ok;
[[
    main = {
        pending = {}
    }
]]

par do
    spawn do
        var int  msg;
        var bool err;
        var int  ret;
        every (msg,err,ret) in shared.ok do
_printf(">>> SHARED.OK %d %d %d\n", msg, err, ret);
            if not err then
                _ceu_assert(msg == {MESSAGE10}, "bug found");
                if ret == {MESSAGE10_OK} then
                    [[ print('>>> PENDING >>>', ARGS.chain.id) ]];
                    [[ main.pending[#main.pending+1] = ARGS.chain ]];
                end
            end
        end
    end

    loop do
        loop do
            var bool has_pending = [[ #main.pending>0 ]];
            if has_pending then
                break;
            else
                emit write_ok;
                await shared.ok;
            end
        end

        [[
            main.chain = table.remove(main.pending,1)
            path = APP.chains.files..'/'..main.chain.id..'.chain'
            print('>>> WRITE >>>', main.chain.id, path)
        ]]
        var[] byte path = [] .. [[path]] .. [0];

        _dbg(0, "server | received");
        [[ ARGS={ chain_id=main.chain.id } ]];
        await FS_write_10(&path);

        [[
            _, _, OUTPUT = table.unpack(arg)
            local f = assert(io.open(OUTPUT, 'a'))
            local function out (hash)
                if hash == main.chain.prv_head_hash then
                    return   -- handled previously
                end
                local block = APP.blocks[hash]
                out(block.tail_hash)
                for _,tx in ipairs(block.txs) do
                    tx = APP.txs[tx]
                    --for k,v in pairs(tx) do
                        --print(k,v)
                    --end
                    f:write(main.chain.id..'\n')
                    f:write(string.len(tx.payload)..'\n')
                    f:write(tx.payload)
                end
            end
            out(main.chain.head_hash)
            main.chain.prv_head_hash = main.chain.head_hash
            f:close()
        ]]
    end
with
    // the "par" is required because of the separated "lua[]"
    // because of the "async/thread" because of the blocking "f:read()"
    var[] byte msg;
    event none ok;
    par do
        await ok;
        loop do
            [[
                assert(load(@msg))()
            ]]
            _dbg(0, "client...");
            await ClientMessages(&shared);
            _dbg(0, "client | ok");
            par/and do
                emit ok;
            with
                await ok;
            end
        end
    with
        lua[] do
            [[
                _, INPUT, _ = table.unpack(arg)
                f = assert(io.open(INPUT, 'r+'))
            ]]
            do finalize with
                [[ f:close() ]]
            end
            loop do
                await async/thread (msg) do
                    [[
                        n = f:read('l')
                        print('>>> n >>>', f, n)
                    ]]
                end
                var bool eof = [[ n == nil ]];
                if eof then
                    await write_ok;
                    escape 0;
                end
                [[
                    n = assert(tonumber(n))
                    --print(n)
                    msg = f:read(n)
                    --print(msg)
                ]]
                msg = [] .. [[ msg ]];
                par/and do
                    emit ok;
                with
                    await ok;
                end
            end
        end
    end
end
