#include "common.ceu"

var UV_TCP_Server_Data shared = _;
[=[
    dofile 'src/common.lua'
    CONFIG, _, _ = table.unpack(arg)
    dofile(CONFIG)
]=];

await Init();

var int n = [[ #APP.chains ]];
var int i;
loop i in [1 -> n] do
    [[
        chain = APP.chains[@i]
        chain.prv_head_hash = chain.head_hash
    ]]
end

var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
var   int  port    = [[ APP.server.host[2] ]];
var   int  backlog = [[ APP.server.backlog ]];
_dbg(0, "server | listening in %s:%d", &&ip[0], port);
spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

par do
    [[
        main = {
            pending = {}
        }
    ]]
    spawn do
        var bool err;
        var int  msg;
        var int  ret;
        every (err, msg, ret) in shared.ok do
_printf(">>> SHARED.OK %d\n", err);
            if not err then
                _ceu_sys_assert(msg == 0x100, "bug found");
                [[ print('>>> PENDING >>>', ARGS.chain.id) ]];
                [[ main.pending[#main.pending+1] = ARGS.chain ]];
            end
        end
    end

    loop do
        loop do
            var bool has_pending = [[ #main.pending>0 ]];
            if has_pending then
                break;
            else
                await shared.ok;
            end
        end

        [[
            main.chain = table.remove(main.pending,1)
            path = APP.chains.files..'/'..main.chain.id..'.chain'
            print('>>> WRITE >>>', main.chain.id, path)
        ]]
        var[] byte path = [] .. [[path]] .. [0];

        _dbg(0, "server | received");
        [[ ARGS={ chain_id=main.chain.id } ]];
        await FS_write_10(&path);

        [[
            _, _, OUTPUT = table.unpack(arg)
            local f = assert(io.open(OUTPUT, 'w'))
            local cur_hash = main.chain.head_hash
            while true do
                if cur_hash == main.chain.prv_head_hash then
                    break   -- handled previously
                end
                local block = APP.blocks[cur_hash]
                for _,tx in pairs(block.txs) do
                    tx = APP.txs[tx]
                    --for k,v in pairs(tx) do
                        --print(k,v)
                    --end
                    f:write(main.chain.id..'\n')
                    f:write(string.len(tx.payload)..'\n')
                    f:write(tx.payload)
                end
                cur_hash = block.tail_hash
            end
            main.chain.prv_head_hash = main.chain.head_hash
            f:close()
        ]]
    end
with
    var[] byte msgs;
    event void ok;
    par do
        lua[] do
            [[
                _, INPUT, _ = table.unpack(arg)
                f = assert(io.open(INPUT, 'r+'))
            ]]
            do finalize with
                [[ f:close() ]]
            end
            loop do
                await async/thread (msgs) do
                    [[
                        local xxx = f:read('l')
                        --print('>>> xxx >>>', f, xxx)
                        local n = assert(tonumber(xxx))--assert(f:read('l'))))
                        --print(n)
                        buf = f:read(n)
                        --print(buf)
                    ]]
                end
                msgs = [] .. [[ buf ]];
                par/and do
                    emit ok;
                with
                    await ok;
                end
            end
        end
    with
        await ok;
        loop do
            [[
                assert(load(@msgs))()
            ]]
            _dbg(0, "client...");
            await ClientMessages(&shared);
            _dbg(0, "client | ok");
            emit shared.ok(false, 0x100, {MESSAGE10_OK});
            par/and do
                emit ok;
            with
                await ok;
            end
        end
    end
end
