#include "uv/fs.ceu"

code/await FS_read_10 (none) -> none
    throws Exception.Uv, Exception.Freechains.Malformed
    // input:  [[ ARGS={chain={TODO}} ]]
    // output: [[ ARGS={chain={DONE}} ]]
do
    [[
        THIS = {
            chain = ARGS.chain,
        }
        path = CFG.dir..'/'..THIS.chain.id..'.chain'
    ]];
    var[] byte path = []..[[path]]..[0];

    var& UV_FS_Open o = spawn UV_FS_Open(&&path[0],_,_,_);
    await o.file.ok;

    var _uv_stat_t stat = _;
    await UV_FS_Fstat(&o.file, &stat);
    var u64 size = stat.st_size;

    // => HEADER
    do
        var ssize n = await UV_FS_Read_N(&o.file, MESSAGE_BYTES);
        if n == 0 or
           o.file.buffer[0] != MESSAGE_MAGIC_0 or
           o.file.buffer[1] != MESSAGE_MAGIC_1 or
           o.file.buffer[2] != 1 or
           o.file.buffer[3] != 0
        then
            var Exception.Freechains.Malformed e = val Exception.Freechains.Malformed(_);
            throw e;
        end
        $o.file.buffer = 0;
    end

    // => CHAIN_ID
    do
        var usize len;
        await UV_FS_Read_N(&o.file, 1);
        len = o.file.buffer[0] as usize;
        $o.file.buffer = 0;

        await UV_FS_Read_N(&o.file, len);
        [[
            id = @o.file.buffer
            local key,zeros = string.match(id,'|(.*)|(.*)|')
            THIS.chain = assert(FC.chains[key][tonumber(zeros)], id)
        ]];
        $o.file.buffer = 0;
        //[[ print('>>> chain_id',id, THIS.chain.id) ]];

        var bool ok = [[ id==THIS.chain.id ]];
        if not ok then
            var Exception.Freechains.Malformed e = val Exception.Freechains.Malformed(_);
            throw e;
        end
    end

    // => BLOCKS
    [[
        THIS.chain.head = THIS.chain.base
    ]]
    loop do
        var ssize n = await UV_FS_Read_N(&o.file, HASH_BYTES);
        if n <= 0 then
            break;          // EOF
        end

        [[
            THIS.block = {
                timestamp   = nil,
                nonce       = nil,
                chain       = THIS.chain,
                pub         = nil,
                hash        = @o.file.buffer,
                prv         = THIS.chain.head,
                nxt         = nil,
                length      = THIS.chain.head.length + 1,
            }
            THIS.chain.head.nxt = THIS.block
            THIS.chain.head = THIS.block
        ]];

        $o.file.buffer = 0;

        // => TIMESTAMP + NONCE
        await UV_FS_Read_N(&o.file, sizeof(u64));
        var u64 timestamp = GET_BE64TOH(o.file.buffer,0);
        $o.file.buffer = 0;
        await UV_FS_Read_N(&o.file, sizeof(u64));
        var u64 nonce     = GET_BE64TOH(o.file.buffer,0);
        $o.file.buffer = 0;
        [[
            THIS.block.timestamp = @timestamp
            THIS.block.nonce     = @nonce
        ]]

        // => PUBLICATION_HASH
        await UV_FS_Read_N(&o.file, HASH_BYTES);
        [[
            THIS.pub_hash = @o.file.buffer
            --THIS.block.pub = FC.pubs[THIS.pub_hash]
        ]]
        $o.file.buffer = 0;

        var bool is_removed = [[ THIS.pub_hash==string.rep('\0',@HASH_BYTES) ]];

        // => PUBLICATION
        if not is_removed then
            // => TIMESTAMP + NONCE + LEN
            await UV_FS_Read_N(&o.file, sizeof(u64));
            var u64 timestamp = GET_BE64TOH(o.file.buffer,0);
            $o.file.buffer = 0;

            await UV_FS_Read_N(&o.file, sizeof(u64));
            var u64 nonce = GET_BE64TOH(o.file.buffer,0);
            $o.file.buffer = 0;

            await UV_FS_Read_N(&o.file, sizeof(u32));
            var u32 len = GET_BE32TOH(o.file.buffer,0);
            $o.file.buffer = 0;

            // => PAYLOAD
            if len == 0 then
                await UV_FS_Read_N(&o.file, HASH_BYTES);
            else
                await UV_FS_Read_N(&o.file, len as usize);
            end

            [[
                is_removal = (@len == 0);
                payload = @o.file.buffer
                THIS.block.pub = {
                    chain     = THIS.chain,
                    timestamp = @timestamp,
                    nonce     = @nonce,
                    payload   = ((not is_removal) and payload) or nil,
                    removal   = (is_removal and assert(FC.chain_block_get(THIS.chain,payload))) or nil,
                    hash      = THIS.pub_hash,
                }
                ARGS = { pub=THIS.block.pub }
            ]]

            $o.file.buffer = 0;

            // => LEN (pos)
            do
                await UV_FS_Read_N(&o.file, sizeof(u32));
                var u32 len2 = GET_BE32TOH(o.file.buffer,0);
                $o.file.buffer = 0;
                if len != len2 then
                    var Exception.Freechains.Malformed e = val Exception.Freechains.Malformed(_);
                    throw e;
                end
            end

            [[ ARGS={pub=THIS.block.pub} ]];
            await Publication_Check();
        end
    end

    [[ ARGS={block=THIS.block} ]];
    await Node_Check();

    [[
        ARGS = {
            chain = THIS.chain,
        }
    ]];
end

code/await FS_write_10 (none) -> none
    throws Exception.Uv
    // input [[ ARGS = { chain={...} } ]]
do
#if 0
    PS10
    [i]/*BLOCK_HASH*/ (genesis)
        TXS_N
        [j]/*TX_HASH*/ NONCE TX_BACK_HASH TX_PAYLOAD_LEN TX_PAYLOAD
        ...
    ...
    [n]/*BLOCK_HASH*/ (head)
        ...
#endif

    [[
        THIS = {
            chain = ARGS.chain,
        }

        assert(CFG.dir, 'missing persistency directory')
        os.execute('mkdir -p '..CFG.dir)
    ]];

    var bool is_base = [[ THIS.chain.head == THIS.chain.base ]];
    if is_base then
        escape;         // do not persist empty chains
    end

    var[] byte path = []..[[CFG.dir..'/'..THIS.chain.id..'.chain']]..[0];

    // create/truncate file
    do/_
        var int flags = _O_CREAT|_O_WRONLY|_O_TRUNC;
        var _mode_t mode = _S_IRUSR|_S_IWUSR|_S_IRGRP|_S_IWGRP|_S_IROTH;
        var& UV_FS_Open o = spawn UV_FS_Open(&&path[0], _, flags, mode);
        await o.file.ok;
    end

    // <= (append)
    var& UV_FS_Open o = spawn UV_FS_Open(&&path[0], 128000, _O_APPEND|_O_WRONLY, 0);
    await o.file.ok;
    _ceu_assert(o.file.handle >= 0, "bug found");

    // <= HEADER
    do
        o.file.buffer = [MESSAGE_MAGIC_0, MESSAGE_MAGIC_1, 1, 0];
        var ssize n = await UV_FS_Write_N(&o.file, MESSAGE_BYTES);
        _ceu_assert(n == 4, "bug found");
    end

    // <= CHAIN_ID
    do
        var byte len = [[ string.len(THIS.chain.id) ]];
        do
            o.file.buffer = [len];
            var ssize n = await UV_FS_Write_N(&o.file, 1);
            _ceu_assert(n == 1, "bug found");
        end
        do
            o.file.buffer = [] .. [[ THIS.chain.id ]];
            var ssize n = await UV_FS_Write_N(&o.file, len as usize);
            _ceu_assert(n == (len as ssize), "bug found");
        end
    end

    // <= BLOCKS (skip genesis)
    [[ THIS.cur = THIS.chain.base.nxt ]];
    loop do
        var bool has = [[ THIS.cur~=nil ]];
        if not has then
            break;
        end

        // <= HASH
        o.file.buffer = [] .. [[ THIS.cur.hash ]];

        // <= TIMESTAMP
        // <= NONCE
        o.file.buffer = o.file.buffer .. [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
        do
            var u64 timestamp = [[ THIS.cur.timestamp or 0 ]];
            var u64 nonce     = [[ THIS.cur.nonce or 0     ]];
            PUT_HTOBE64(o.file.buffer, HASH_BYTES,             timestamp);
            PUT_HTOBE64(o.file.buffer, HASH_BYTES+sizeof(u64), nonce);
        end

        // <= PUBLICATION_HASH (or 32x0's, if removed)
        o.file.buffer = o.file.buffer .. [[ (THIS.cur.pub and THIS.cur.pub.hash) or string.rep('\0',@HASH_BYTES) ]];
        await UV_FS_Write_N(&o.file,_);

        var bool is_removed = [[ THIS.cur.pub==nil ]];

        // <= PUBLICATION
        if not is_removed then
            // <= TIMESTAMP
            // <= NONCE
            do
                o.file.buffer = [] .. [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
                var u64 timestamp = [[ THIS.cur.pub.timestamp ]];
                var u64 nonce     = [[ THIS.cur.pub.nonce     ]];
                PUT_HTOBE64(o.file.buffer, 0,               timestamp);
                PUT_HTOBE64(o.file.buffer, 0+sizeof(u64),   nonce);
                await UV_FS_Write_N(&o.file,_);
            end

            // <= LEN
            // <= PAYLOAD
            // <= LEN
            do
                o.file.buffer = [] .. [0,0,0,0];
                var u32 len = [[ (THIS.cur.pub.removal and 0) or string.len(THIS.cur.pub.payload) ]];
                PUT_HTOBE32(o.file.buffer, 0, len);
                _ceu_assert($$o.file.buffer >= len, "FS buffer is too short for payload");
                await UV_FS_Write_N(&o.file,_);

                o.file.buffer = [] .. [[ (THIS.cur.pub.removal and THIS.cur.pub.removal.hash) or THIS.cur.pub.payload ]];
                await UV_FS_Write_N(&o.file,_);

                o.file.buffer = [] .. [0,0,0,0];
                PUT_HTOBE32(o.file.buffer, 0, len);
                await UV_FS_Write_N(&o.file,_);
            end
        end

        [[ THIS.cur = THIS.cur.nxt ]];
    end
end
