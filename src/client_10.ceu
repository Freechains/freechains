#ifndef _CLIENT_CEU
#define _CLIENT_CEU

var int client_10_n = 0;

code/await Client_10 (var& UV_TCP_Server_Data shared) -> none do
    outer.client_10_n = outer.client_10_n + 1;
    var int n = outer.client_10_n;
    par/and do
        par/or do
            var int n_;
            (n_,_) = await shared.err_client_10_pos until n_==n;
        with
            var int n_;
            (n_,_) = await shared.err_client_10_pre until n_==n;
        with
            var int n_ = await shared.ok_client_10_pos until n_==n;
        end
    with
        emit shared.go_client_10_pre(n);
    end
end

code/await Peer_10 (var& UV_TCP_Server_Data shared) -> none
    // [[ ARGS = { peer={...}, chain={...} } ]]
do
    [[
        THIS = {
            peer  = ARGS.peer,
            chain = ARGS.chain,
        }
    ]];

    var Exception? e;

    do finalize with
        if e? and (not (e! is Exception.Uv)) then
            [[ FC.errs[#FC.errs+1] = @(e! as int) ]];
            _dbg(0, "client | EXCEPTION | %s\n", e!.message);
        end
    end

    catch e do
        var[] byte ip   = [] .. [[ THIS.peer.address ]] .. [0];
        var   int  port = [[ THIS.peer.port ]];
        _dbg(2, "client:%p | connecting to %s:%d", {&_ceu_mem}, &&ip[0], port);

        var& UV_TCP_Connect c = spawn UV_TCP_Connect(&&ip[0], port, _);

        do finalize with
            _dbg(2, "client:%p | disconnected from %s:%d", {&_ceu_mem}, &&ip[0], port);
        end

        await c.ok;
        _dbg(2, "client:%p | connected to %s:%d", {&_ceu_mem}, &&ip[0], port);

        [[ ARGS = { chain=THIS.chain } ]]
        await Send_10_Header(&c.stream);

        [[ ARGS = { chain=THIS.chain } ]]
        await Send_10_Nodes(&c.stream);

        [[ ARGS = { chain=THIS.chain } ]]
        await Recv_10_Nodes(&shared, &c.stream);
    end
end

code/await Client_10_Pos (var& UV_TCP_Server_Data shared, var int n) -> none
    // [[ ARGS = { chain={...} } ]]
do
    [[
        THIS = {
            chain = ARGS.chain,
            peers = CFG.chains[ARGS.chain.key].peers
        }
    ]];

    var Exception? e;

    do finalize with
        if e? then
            [[ FC.errs[#FC.errs+1] = @(e! as int) ]];
            _dbg(0, "client | EXCEPTION | %s\n", e!.message);
            emit shared.err_client_10_pos(n, e! as int);
        else
            [[ ARGS = { chain=THIS.chain } ]];
            emit shared.ok_client_10_pos(n);
        end
    end

    catch e do
        var int ps = [[ (THIS.peers and #THIS.peers) or 0 ]];
        var int i;
        pool[] Peer_10 peers;
        loop i in [1 -> ps] do
            var bool min_zeros = [[ THIS.chain.zeros >= (THIS.peers[@i].zeros or 0) ]];
            if min_zeros then
                [[
                    ARGS = {
                        peer  = THIS.peers[@i],
                        chain = THIS.chain,
                    }
                ]]
                var&? Peer_10 p = spawn Peer_10(&shared) in peers;
                _ceu_assert(p?, "bug found");
            end
        end
        var[] byte id = [] .. [[ THIS.chain.id ]] .. [0];
        _dbg(3, "client:%p | broadcasting %s messages to (max) %d peer(s)", {&_ceu_mem}, &&id[0], ps);
        do finalize with
            _dbg(3, "client:%p | broadcasts OK", {&_ceu_mem});
        end

        var&? Peer_10 p;
        loop p in peers do
            await p;
            //_dbg(0, "client:%p | peer %d", {&_ceu_mem}, err);
        end
    end
end

code/await Publication_New (none) -> none
    // input:  [[ ARGS={pub={TODO}} ]]
    // output: [[ ARGS={pub={DONE}} ]]
do
    [[
        THIS = {
            pub = ARGS.pub,
        }
    ]];

    var[HASH_BYTES] byte hash;
    _ceu_vector_setlen(&&hash,HASH_BYTES,1);

    var u8 zeros = [[ THIS.pub.chain.zeros ]];

    var[] byte pln = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ..
                     [[ THIS.pub.chain.key ]];

#if 0
    var bool is_removal = [[ THIS.pub.remove_dst~=nil ]];
    if is_removal then
        pln = pln .. [[ THIS.pub.remove_dst.pub.hash ]]
                  .. [[ string.rep('\0',string.len(THIS.pub.remove_dst.pub.payload)) ]];
    else
        pln = pln .. [[ THIS.pub.payload ]];
    end
#else
    var bool should_encrypt = [[ THIS.pub.encrypt ]];
    if should_encrypt then
        var bool is_shared = [[ THIS.pub.chain.up.cfg.key_shared ~= nil ]];
        if is_shared then
            var usize idx = $pln;
            _ceu_vector_setlen(&&pln, $pln+{crypto_secretbox_NONCEBYTES+crypto_secretbox_MACBYTES}, 1);
            pln = pln .. [[ THIS.pub.payload ]];
            var usize len = [[ string.len(THIS.pub.payload) ]];
            var[] byte key = []..[[ assert(THIS.pub.sign or THIS.pub.chain.up.cfg.key_shared) ]];
            _ceu_assert(_sodium_symetric_encrypt(&&pln[idx], len, &&key[0]) == 0, "bug found");
            [[ THIS.pub.payload = string.sub(@pln, @idx+1) ]];
        end
    else
        pln = pln .. [[ THIS.pub.payload ]];
    end
#endif

    // show async/thread progress
    var int ms = 0;
#if 1
    spawn do
        every 100ms do
            ms = ms + 1;
            //_printf("(%d)",ms);
            _printf(".");
            _fflush(_stdout);
        end
    end
#endif

    var u64 timestamp = [[ THIS.pub.timestamp ]];
    var u64 nonce     = [[ THIS.pub.nonce     ]];
#if 1
    await async/thread (zeros,pln,hash, timestamp,nonce)
#endif
    do
        var u64 n = do
            var u64 n_ = 0;
            loop timestamp in [timestamp -> 0xFFffFFffFFffFFff] do
                PUT_HTOBE64(pln, 0, timestamp);

                loop nonce in [nonce -> 0xFFffFFffFFffFFff] do
                    PUT_HTOBE64(pln, sizeof(u64), nonce);

                    _ceu_assert(n_ < 0xFFffFFffFFffFFff, "bug found");
                    n_ = n_ + 1;

                    _crypto_generichash(&&hash[0],HASH_BYTES, &&pln[0],$pln, null,0);
                    if zeros <= _leading_zeros(&&hash[0],HASH_BYTES) then
                        escape n_;
                    end
                end
            end
            _ceu_assert(0, "bug found");
        end;
        _dbg(3, "client: POW rounds: %d\n", n);
    end

    [[
        THIS.pub.timestamp = @timestamp
        THIS.pub.nonce     = @nonce
        THIS.pub.hash      = @hash
        THIS.pub.chain.up.pubs[THIS.pub.hash] = THIS.pub

        --remove_dst = THIS.pub.remove_dst
        --if remove_dst then
            --remove_dst.pub.remove_src = THIS.pub
            --remove_dst.pub.payload = string.len(remove_dst.pub.payload)
        --end

        ARGS = THIS
    ]];
end

#if 0
code/await Remove_New (none) -> none
    // input:  [[ ARGS={rem={TODO}} ]]
    // output: [[ ARGS={rem={DONE}} ]]
do
    [[
        THIS = {
            rem = ARGS.rem,
        }
    ]];

    var[HASH_BYTES] byte hash;
    _ceu_vector_setlen(&&hash,HASH_BYTES,1);

    var u8 zeros = [[ THIS.rem.chain.zeros ]];

    var[] byte pln = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ..
                     [[ THIS.rem.pub.hash ]] ..
                     [[ string.rep('\0',THIS.rem.pub.len)) ]];

    // show async/thread progress
    var int ms = 0;
#if 1
    spawn do
        every 100ms do
            ms = ms + 1;
            //_printf("(%d)",ms);
            _printf(".");
            _fflush(_stdout);
        end
    end
#endif

    var u64 timestamp = [[ THIS.rem.timestamp ]];
    var u64 nonce     = [[ THIS.rem.nonce     ]];
#if 1
    await async/thread (zeros,pln,hash, timestamp,nonce)
#endif
    do
        var u64 n = do
            var u64 n_ = 0;
            loop timestamp in [timestamp -> 0xFFffFFffFFffFFff] do
                PUT_HTOBE64(pln, 0, timestamp);

                loop nonce in [nonce -> 0xFFffFFffFFffFFff] do
                    PUT_HTOBE64(pln, sizeof(u64), nonce);

                    _ceu_assert(n_ < 0xFFffFFffFFffFFff, "bug found");
                    n_ = n_ + 1;

                    _crypto_generichash(&&hash[0],HASH_BYTES, &&pln[0],$pln, null,0);
                    if zeros <= _leading_zeros(&&hash[0],HASH_BYTES) then
                        escape n_;
                    end
                end
            end
            _ceu_assert(0, "bug found");
        end;
        _dbg(3, "client: POW rounds: %d\n", n);
    end

    [[
        THIS.rem.timestamp = @timestamp
        THIS.rem.nonce     = @nonce
        THIS.rem.hash      = @hash
        THIS.rem.chain.up.rems[THIS.rem.hash] = THIS.rem

        ARGS = THIS
    ]];
end
#endif

code/await Node_New (none) -> none
    // input:  [[ ARGS={node={TODO}} ]]
    // effect: [[ ARGS={node={DONE}} ]]
do
    [[
        THIS = ARGS
    ]];

    var[HASH_BYTES] byte hash;
    _ceu_vector_setlen(&&hash, HASH_BYTES, 1);

    var u8 zeros = [[ THIS.node.chain.zeros ]];

    var[] byte pln = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ..
                     [[ THIS.node.pub.hash ]];

    var int n = [[ #THIS.node ]];
    var int i;
    loop i in [1 -> n] do
        pln = pln .. [[ THIS.node[@i].hash ]];
    end

    // show async/thread progress
    var int ms = 0;
#if 1
    spawn do
        every 100ms do
            ms = ms + 1;
            //_printf("[%d]",ms);
            _printf(".");
            _fflush(_stdout);
        end
    end
#endif

    var[] byte key_shared;
    var bool has_key_shared  = [[ THIS.node.chain.up.cfg.key_shared ~= nil ]];
    if has_key_shared then
        key_shared = []..[[ FC.hex2hash(THIS.node.chain.up.cfg.key_shared) ]];
    end

    var u64 timestamp = [[ THIS.node.timestamp ]];
    var u64 nonce     = [[ THIS.node.nonce     ]];
#if 1
    await async/thread (zeros,pln,hash, has_key_shared,key_shared, timestamp,nonce)
#endif
    do
        var u64 n = do
            var u64 n_ = 0;
            loop timestamp in [timestamp -> 0xFFffFFffFFffFFff] do
                PUT_HTOBE64(pln, 0, timestamp);

                loop nonce in [nonce -> 0xFFffFFffFFffFFff] do
                    PUT_HTOBE64(pln, sizeof(u64), nonce);

                    _ceu_assert(n_ < 0xFFffFFffFFffFFff, "bug found");
                    n_ = n_ + 1;

                    if has_key_shared then
                        _crypto_generichash(&&hash[0],HASH_BYTES, &&pln[0],$pln, &&key_shared[0],$key_shared);
                    else
                        _crypto_generichash(&&hash[0],HASH_BYTES, &&pln[0],$pln, null,0);
                    end

                    if zeros <= _leading_zeros(&&hash[0],HASH_BYTES) then
                        escape n_;
                    end
                end
            end
            _ceu_assert(0, "bug found");
        end;
        _dbg(3, "client: POW rounds: %d\n", n);
    end

    [[
        THIS.node.timestamp = @timestamp
        THIS.node.nonce     = @nonce
        THIS.node.hash      = @hash
        THIS.node = FC.node(THIS.node)
    ]];

    var bool should_sign = [[ THIS.node.sign ~= nil ]];
    if should_sign then
        var[] byte key_private = []..[[ FC.hex2hash(THIS.node.sign) ]];
        var[SIG_BYTES] byte sig = [];
        _ceu_vector_setlen(&&sig, SIG_BYTES, 1);
        _crypto_sign_detached(&&sig[0], null, &&pln[0],$pln, &&key_private[0]);
        [[ THIS.node.sig = @sig ]];
    end
end

code/await Client_10_Pre (var& UV_TCP_Server_Data shared, var int n) -> none
    // [[ ARGS = { message={...} } ]]
do
    [[
        THIS = {
            chain     = ARGS.message.chain,
            timestamp = ARGS.message.timestamp,
            nonce     = ARGS.message.nonce,
            payload   = ARGS.message.payload,
            sign      = ARGS.message.sign,
            encrypt   = ARGS.message.encrypt,
            --remove  = ARGS.message.remove,
        }
    ]]

    var Exception? e;

    do finalize with
        if e? then
            [[ FC.errs[#FC.errs+1] = @(e! as int) ]];
            _dbg(0, "client | EXCEPTION | %s\n", e!.message);
            emit shared.err_client_10_pre(n, e! as int);
        else
            [[ ARGS = { chain=THIS.chain } ]];
            emit shared.ok_client_10_pre(n);
        end
    end

    catch e do
        [[
            THIS.chain = assert(FC.chains[THIS.chain.key][THIS.chain.zeros], 'not subscribed to |'..THIS.chain.key..'|'..THIS.chain.zeros..'|')
            if THIS.chain.up.cfg.key_public then
                assert(THIS.sign ~= nil, 'expected private key')
            else
                assert(THIS.sign == nil)
            end
            if THIS.encrypt then
                assert(THIS.sign or THIS.chain.up.cfg.key_shared)
            end

            if CFG.deterministic then
                now = 0
            else
                now = os.time() * 1000000   -- in ms since the epoch
            end

            THIS.now = now
            THIS.pub = {
                chain     = THIS.chain,
                timestamp = THIS.timestamp or now,
                nonce     = THIS.nonce or 0,
                payload   = THIS.payload,
                --remove_dst = THIS.remove and assert(THIS.chain.cache[THIS.remove]) or nil,
                hash      = nil,
                sign      = THIS.sign,
                encrypt   = THIS.encrypt,
            }
            ARGS = THIS
        ]]
        await Publication_New();
#if 0
        [[
            THIS.rem = {
                chain      = THIS.chain,
                timestamp  = THIS.timestamp or now,
                nonce      = THIS.nonce or 0,
                pub = {
                    hash = THIS.pub.hash,
                    len  = string.len(THIS.pub.payload),
                },
            }
            ARGS = THIS
        ]];
        await Remove_New();
#endif
        do
            //[[ ARGS = { chain=THIS.chain } ]]
            //CHAIN_LOCK(l, shared, "lock_write");
            [[
                THIS.node = {
                    chain     = THIS.chain,
                    timestamp = THIS.now,
                    nonce     = 0,
                    pub       = THIS.pub,
                    sign      = THIS.sign,
                    encrypt   = THIS.encrypt,
                }
                FC.children(THIS.node, THIS.chain.head)

                ARGS = THIS
            ]]
            await Node_New();

            var bool needs_sign = [[ THIS.chain.up.cfg.key_public ~= nil ]];
            if needs_sign then
                [[ ARGS = THIS ]];
                await Node_Check();
            end

            [[
                FC.head_new(THIS.node)
                ARGS = {
                    chain = THIS.chain,
                    node  = THIS.node,
                }
            ]];
            emit shared.ok_node;
        end
        [[ ARGS = { chain=THIS.chain } ]];
        emit shared.go_client_10_pos(n);
    end
end

code/await Clients_10 (var& UV_TCP_Server_Data shared) -> NEVER
do
    [[
        THIS = {
            pending = {},
        }
    ]]
    par do
        pool[] Client_10_Pre pres;
        var int n;
        every n in shared.go_client_10_pre do
            spawn Client_10_Pre(&shared, n) in pres;
        end
    with
        var int n;
        every n in shared.go_client_10_pos do
            [[
                if THIS.pending[ARGS.chain] == nil then
                    THIS.pending[#THIS.pending+1] = ARGS.chain
                end
                if THIS.pending[ARGS.chain]==nil or @n!=0 then
                    THIS.pending[ARGS.chain] = @n
                end
            ]]
        end
    with
        var int i;
        loop i do
            var bool has_pending = [[ #THIS.pending>0 ]];
            if not has_pending then
                await shared.go_client_10_pos;
            end

            // before removing and starting to broadcast:
            //  - wait X to see if the chain changes again
            //  - but not more than Y
#if 0
            watching 5s do
                loop do
                    watching 1s do
                        await shared.go_client_10_pos;
                        var bool same = [[ ARGS.chain==THIS.pending[1] ]];
                        if same then
                            continue;
                        end
                    end
                    break;
                end
            end
#endif

            [[
                THIS.chain = table.remove(THIS.pending, 1)
                THIS.n     = THIS.pending[THIS.chain]
                THIS.pending[THIS.chain] = nil
            ]]

            [[ ARGS = { chain=THIS.chain } ]]
            var int n = [[ THIS.n ]];
            await Client_10_Pos(&shared, n);
        end
    end
end

#endif
