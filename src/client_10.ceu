#ifndef _CLIENT_CEU
#define _CLIENT_CEU

var int client_10_n = 0;

code/await Client_10 (var& UV_TCP_Server_Data shared) -> none do
    outer.client_10_n = outer.client_10_n + 1;
    var int n = outer.client_10_n;
    par/and do
        par/or do
            var int n_;
            (n_,_) = await shared.err_client_10_pos until n_==n;
        with
            var int n_ = await shared.ok_client_10_pos until n_==n;
        end
    with
        emit shared.go_client_10_pre(n);
    end
end

code/await Peer_10 (var& UV_TCP_Server_Data shared) -> none
    throws Exception.Uv, Exception.Freechains
    // [[ ARGS = { peer={...}, chain={...} } ]]
do
    [[
        THIS = {
            peer  = ARGS.peer,
            chain = ARGS.chain,
        }
    ]];

    var[] byte ip   = [] .. [[ THIS.peer.address ]] .. [0];
    var   int  port = [[ THIS.peer.port ]];
    _dbg(2, "client:%p | connecting to %s:%d", {&_ceu_mem}, &&ip[0], port);

    var& UV_TCP_Connect c = spawn UV_TCP_Connect(&&ip[0], port, _);

    do finalize with
        _dbg(2, "client:%p | disconnected from %s:%d", {&_ceu_mem}, &&ip[0], port);
    end

    await c.ok;
    _dbg(2, "client:%p | connected to %s:%d", {&_ceu_mem}, &&ip[0], port);

    [[ ARGS = { chain=THIS.chain } ]]
    await Send_10_Header(&c.stream);

    [[ ARGS = { chain=THIS.chain } ]]
    await Send_10_Nodes(&c.stream);

    [[ ARGS = { chain=THIS.chain } ]]
    await Recv_10_Nodes(&shared, &c.stream);
end

code/await Client_10_Pos (var& UV_TCP_Server_Data shared, var int n) -> none
    // [[ ARGS = { chain={...} } ]]
do
    [[
        THIS = {
            chain = ARGS.chain,
            peers = CFG.chains[ARGS.chain.key].peers
        }
    ]];

    var Exception? e;

    do finalize with
        if e? then
            [[ FC.errs[#FC.errs+1] = @(e! as int) ]];
            _dbg(0, "client | EXCEPTION | %s\n", e!.message);
            emit shared.err_client_10_pos(n, e! as int);
        else
            [[ ARGS = { chain=THIS.chain } ]];
            emit shared.ok_client_10_pos(n);
        end
    end

    catch e do
        var int ps = [[ (THIS.peers and #THIS.peers) or 0 ]];
        var int i;
        pool[] Peer_10 peers;
        loop i in [1 -> ps] do
            var bool min_zeros = [[ THIS.chain.zeros >= (THIS.peers[@i].zeros or 0) ]];
            if min_zeros then
                [[
                    ARGS = {
                        peer  = THIS.peers[@i],
                        chain = THIS.chain,
                    }
                ]]
                var&? Peer_10 p = spawn Peer_10(&shared) in peers;
                _ceu_assert(p?, "bug found");
            end
        end
        var[] byte id = [] .. [[ THIS.chain.id ]] .. [0];
        _dbg(3, "client:%p | broadcasting %s messages to (max) %d peer(s)", {&_ceu_mem}, &&id[0], ps);
        do finalize with
            _dbg(3, "client:%p | broadcasts OK", {&_ceu_mem});
        end

        var&? Peer_10 p;
        loop p in peers do
            await p;
            //_dbg(0, "client:%p | peer %d", {&_ceu_mem}, err);
        end
    end
end

code/await Client_10_Pre (var& UV_TCP_Server_Data shared, var int n) -> none
    // [[ ARGS = { message={...} } ]]
do
    [[
        THIS = {
            chain = ARGS.message.chain,
            pub   = {
                timestamp = ARGS.message.timestamp,
                nonce     = ARGS.message.nonce,
                payload   = ARGS.message.payload,
                removal   = ARGS.message.removal,
            }
        }
    ]]

    var Exception? e;

    do finalize with
        if e? then
            [[ FC.errs[#FC.errs+1] = @(e! as int) ]];
            _dbg(0, "client | EXCEPTION | %s\n", e!.message);
            emit shared.err_client_10_pre(n, e! as int);
        else
            [[ ARGS = { chain=THIS.chain } ]];
            emit shared.ok_client_10_pre(n);
        end
    end

    catch e do
        [[
            THIS.chain = assert(FC.chains[THIS.chain.key][THIS.chain.zeros], 'not subscribed to |'..THIS.chain.key..'|'..THIS.chain.zeros..'|')

            if CFG.deterministic then
                now = 0
            else
                now = os.time() * 1000000   -- in ms since the epoch
            end

            THIS.now = now
            THIS.pub = {
                chain     = THIS.chain,
                timestamp = THIS.pub.timestamp or now,
                nonce     = THIS.pub.nonce or 0,
                payload   = THIS.pub.payload,
                removal   = THIS.pub.removal and assert(FC.chain_node_get(THIS.chain, THIS.pub.removal)),
                hash      = nil,
            }
            ARGS = THIS
        ]]
        await Publication_New();
        [[
            if THIS.pub.removal then
                THIS.pub.removal.pub = nil
            end
        ]]
        do
            //[[ ARGS = { chain=THIS.chain } ]]
            //CHAIN_LOCK(l, shared, "lock_write");
            [[
                THIS.node = {
                    chain     = THIS.chain,
                    timestamp = THIS.now,
                    nonce     = 0,
                    pub       = THIS.pub,
                }
                FC.children(THIS.node, THIS.chain.head)

                ARGS = THIS
            ]]
            await Node_Hash();
            [[
                FC.head_new(THIS.node)
            ]]
        end
        [[ ARGS = { chain=THIS.chain } ]];
        emit shared.go_client_10_pos(n);
    end
end

code/await Clients_10 (var& UV_TCP_Server_Data shared) -> NEVER
do
    [[
        THIS = {
            pending = {},
        }
    ]]
    par do
        pool[] Client_10_Pre pres;
        var int n;
        every n in shared.go_client_10_pre do
            spawn Client_10_Pre(&shared, n) in pres;
        end
    with
        var int n;
        every n in shared.go_client_10_pos do
            [[
                if THIS.pending[ARGS.chain] == nil then
                    THIS.pending[ARGS.chain] = @n
                    THIS.pending[#THIS.pending+1] = ARGS.chain
                end
            ]]
        end
    with
        var int i;
        loop i do
            var bool has_pending = [[ #THIS.pending>0 ]];
            if not has_pending then
                await shared.go_client_10_pos;
            end

            // before removing and starting to broadcast:
            //  - wait X to see if the chain changes again
            //  - but not more than Y
#if 0
            watching 5s do
                loop do
                    watching 1s do
                        await shared.go_client_10_pos;
                        var bool same = [[ ARGS.chain==THIS.pending[1] ]];
                        if same then
                            continue;
                        end
                    end
                    break;
                end
            end
#endif

            [[
                THIS.chain = table.remove(THIS.pending, 1)
                THIS.n     = THIS.pending[THIS.chain]
                THIS.pending[THIS.chain] = nil
            ]]

            var bool should_write = [[ not CFG.no_persistency ]];
            if should_write then
                [[ ARGS = { chain=THIS.chain } ]]
                //await FS_write_10();
            end

            [[ ARGS = { chain=THIS.chain } ]]
            var int n = [[ THIS.n ]];
            await Client_10_Pos(&shared, n);
        end
    end
end

#endif
