#ifndef _SERVER_CEU
#define _SERVER_CEU

code/await UV_TCP_Server_Handler (var& UV_Stream tcp, var& UV_TCP_Server_Data shared) -> none
do
    var int msg = 0;
    var int ret = 0;

    var Exception? e1;
    catch e1 do
        // => MESSAGE
        await UV_Stream_Read_N(&tcp, MESSAGE_BYTES);

        //_printf("[server] => MESSAGE = [%d %d %d %d]\n",
                    //bytes[0], bytes[1], bytes[2], bytes[3]);

        var bool ok = ( tcp.buffer[0]==MESSAGE_MAGIC_0 and
                        tcp.buffer[1]==MESSAGE_MAGIC_1 );

        var int msg = (tcp.buffer[2]<<8) + (tcp.buffer[3]<<0);

        $tcp.buffer = $tcp.buffer - MESSAGE_BYTES;

        if ok and msg==0x100 then
            do ()
                var int out;
                out = do/out
                    #include "server/message10_recv.ceu"
                end;
                outer.ret = out;
            end
        else
            var Exception.Freechains.Unsupported e = val Exception.Freechains.Unsupported(_);
            throw e;
        end
    end
    if e1? and (e1! is Exception.Lua) then
        _ceu_assert(0, e1!.message);
    end

    var Exception? e2;
    catch e2 do
        if e1? then
            [[ APP.errs[#APP.errs+1] = @(e1! as int) ]];
        else/if ret != {MESSAGE10_OK} then
            [[ APP.errs[#APP.errs+1] = @ret ]];
        end
    end
    _ceu_sys_assert(not e2?, "bug found");

    // [[ ARGS = { chain=? } ]]
    emit shared.ok(e1?,msg,ret);
end

#endif
