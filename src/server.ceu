#ifndef _SERVER_CEU
#define _SERVER_CEU

class Message10_header_recv with
input:
    var _uv_tcp_t&      tcp;
    var byte[]&         bytes;
    var UV_Stream_Read& reader;

    function (_uv_tcp_t& tcp, byte[]& bytes, UV_Stream_Read& reader)=>Message10_header_recv run;
do
    function (_uv_tcp_t& tcp, byte[]& bytes, UV_Stream_Read& reader)=>Message10_header_recv run do
        this.tcp    = &tcp;
        this.bytes  = &bytes;
        this.reader = &reader;
    end

    var u32 off = MESSAGE_BYTES;

    // => CHAIN_LEN
    // => CHAIN_KEY
    // => CHAIN_ZEROS
    do
        // len
        do UV_Stream_ReadUntil.run(&reader, off+1);
        var u8 chain_len = bytes[off];
        off = off + 1;
        //_printf("[server] => CHAIN_LEN   = %d\n", chain_len);

        // key
        var char[] chain_key;
        do UV_Stream_ReadUntil.run(&reader, off+chain_len);
        $chain_key := chain_len;
        _memcpy((_char&&)&&chain_key, (_byte&&)&&bytes[off], chain_len);
        //_printf("[server] => CHAIN_KEY   = %s\n", (_char&&)&&chain_key);
        off = off + chain_len;

        // zeros
        do UV_Stream_ReadUntil.run(&reader, off+1);
        var u8 chain_zeros = bytes[off];
        //_printf("[server] => CHAIN_ZEROS = %d\n",  chain_zeros);
        off = off + 1;

        [[
            G(tcp).chain = GG.chain_parse( {
                key   = @chain_key,
                zeros = @chain_zeros,
            } )
            assert(G(tcp).chain)
        ]];

        var bool is_sub = [[ G(tcp).chain ~= nil ]];
        if not is_sub then
            escape _MESSAGE10_NOTSUB;    // OK ACK
        end

        // TODO: check CHAIN_LIMITS
    end

    escape _ERR_NONE;
end

class Message10_block_recv with
input:
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Message10_block_recv run;
do
    function (_uv_tcp_t& tcp)=>Message10_block_recv run do
        this.tcp = &tcp;
    end

    var byte[] bytes;
    var UV_Stream_Read reader =
            UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

    var u32 off = 0;

    // => BLOCK_HASH
    // => BLOCK_TXS_N
    do
        // hash
        do UV_Stream_ReadUntil.run(&reader, off+HASH_BYTES);
        var byte[HASH_BYTES] hash;
        _ceu_vector_copy_buffer(&&hash, 0,
                                (_byte&&)&&bytes[off], HASH_BYTES,
                                1);
        off = off + HASH_BYTES;

        // txs_n
        do UV_Stream_ReadUntil.run(&reader, off+sizeof(u32));
        var u32 txs_n = GET_HOST_U32(bytes, off);
        off = off + sizeof(u32);

        [[
            G(tcp).block.hash = @hash;
            --print('[server] => BLOCK_HASH', string.len(G(tcp).block.hash))
            --print(tostring2(G(tcp).block.hash))
            --print('[server] => BLOCK_TXS_N', @txs_n)
            G(tcp).block.txs_n = @txs_n
        ]];
    end

    // check if block is already on chain
    [[
        have = false
        cur = APP.blocks[ G(tcp).chain.head_hash ]
        while true do
            if cur.hash == G(tcp).block.hash then
                have = true
                break
            end
            if not cur.tail_hash then
                break
            end
            cur = assert(APP.blocks[cur.tail_hash])
        end
    ]];

    var bool have = [[ have ]];
    if have then
        escape _MESSAGE10_HAVE;    // OK ACK
    else
        escape _ERR_NONE;
    end
end

class Message10_tx_recv with
input:
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Message10_tx_recv run;
do
    function (_uv_tcp_t& tcp)=>Message10_tx_recv run do
        this.tcp = &tcp;
    end

    var byte[] bytes;
    var UV_Stream_Read reader =
            UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

    var u32 off = 0;

    // => TX_PAYLOAD_BYTES
    // => TX_HASH
    do
        // hash
        do UV_Stream_ReadUntil.run(&reader, off+HASH_BYTES);
        var byte[HASH_BYTES] hash;
        _ceu_vector_copy_buffer(&&hash, 0,
                                (_byte&&)&&bytes[off], HASH_BYTES,
                                1);
        off = off + HASH_BYTES;

        // payload_bytes
        do UV_Stream_ReadUntil.run(&reader, off+sizeof(u32));
        var u32 payload_bytes = GET_HOST_U32(bytes, off);
        off = off + sizeof(u32);

        // TODO: check payload_bytes vs chain.limits

        [[
            payload_bytes = @payload_bytes
            tx_hash = @hash;
            --print('[server] => TX_HASH', payload_bytes)
            --print(tostring2(tx_hash))

            tx = APP.txs[tx_hash]
            if tx == nil then
                G(tcp).tx = {
                    hash  = tx_hash,
                    bytes = payload_bytes,
                }
            else
                G(tcp).tx = tx
            end
        ]];
        var bool have = [[ tx ~= nil ]];

        // <= ACK-tx
        do
            var byte[1] send;
            if have then
                send = [ _MESSAGE10_HAVE ];
            else
                send = [ _ERR_NONE  ];
            end
            _dbg_tcp(0, &&this.tcp, "server", "<= ACK-tx = %d", send[0]);
            do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);
        end

        // HAVE_YES: next TX
        if have then
            escape _ERR_NONE;
        end
    end
    // HAVE_NO: complete TX

    // => TX_COMPLETE
    do
        // => TIMESTAMP
        var u32 timestamp = 0;
        do
            do UV_Stream_ReadUntil.run(&this.reader, off + sizeof(u32));
            timestamp = GET_HOST_U32(bytes,off);
            //_printf("[server] => TIMESTAMP = %X\n", timestamp);
            [[ G(tcp).tx.timestamp = @timestamp ]];
            off = off + sizeof(u32);
        end

        // => TX_BACK_HASH
        // TODO: check
        var byte[HASH_BYTES] tx_back_hash;
        do
            do UV_Stream_ReadUntil.run(&this.reader, off + HASH_BYTES);
            _ceu_vector_copy_buffer(&&tx_back_hash, 0,
                                    (_byte&&)&&bytes[off], HASH_BYTES,
                                    1);
            off = off + HASH_BYTES;
            _assert($tx_back_hash == HASH_BYTES);
            [[
                G(tcp).tx.back_hash = @tx_back_hash;
                --print('[server] => TX_BACK_HASH')
                --print(tostring2(G(tcp).tx.back_hash))
            ]];

            // [check] BACK_HASH is young enough? [ok ACK]
            do
#if 1
                //_printf("TODO: BLOCK_HASH young enough?\n");
#else
                var int n = [[ APP.server.chains.BACK_HASH_JUMP_LIMIT ]];
                [[ head_hash = APP.server.chains[MSG.chain.key].heads[MSG.chain.zeros] ]];
                loop i in n do
                    var bool is_eq = [[ head_hash == MSG.back_hash ]];
                    if is_eq then
                        xxx
                    end
                   [[ head_hash = APP ]]
                end
#endif
            end
        end

        // => TX_PAYLOAD
        var byte[] tx_payload;
        do
            var u32 len = [[ G(tcp).tx.bytes ]];
            do UV_Stream_ReadUntil.run(&this.reader, off + len);
            _ceu_vector_copy_buffer(&&tx_payload, 0,
                                    &&(((_byte&&)&&bytes)[off]), len,
                                    1);
            [[
                G(tcp).tx.payload = @tx_payload;
                --print('[server] => PAYLOAD')
                --print(tostring2(G(tcp).tx.payload))
            ]];
            off = off + len;
        end

        // => POS: TODO
        do
            do UV_Stream_ReadUntil.run(&this.reader, off + 1);
            var int pos = bytes[off];
            //_printf("[server] POS = %X\n", pos);
            [[ G(tcp).tx.pos = @pos ]];
            //_printf("TODO: POS matches?\n");
            off = off + 1;
        end

        // [check] TX_HASH is correct? [no ACK]
        do
            var byte[] plain;
            PUT_NETWORK_U32(plain, 0, timestamp);
            plain = []..plain..tx_back_hash..tx_payload;

            var byte[HASH_BYTES] hash;
            _crypto_generichash((_byte&&)&&hash, HASH_BYTES,
                                (_byte&&)&&plain, $plain,
                                null, 0);

            var char[HASH_BYTES] tx_hash = [[ G(tcp).tx.hash ]];
            var int ret = _memcmp((_char&&)&&tx_hash, (_byte&&)&&hash, HASH_BYTES);
            //_printf("[server] POW? %d\n", ret==0);
            if ret != 0 then
                escape _ERR_REMOTE_BUG_OR_MALICIOUS;
            end
        end
    end

    escape _ERR_NONE;
end

class Message10_recv with
input:
    var _uv_tcp_t&      tcp;
    var byte[]&         bytes;
    var UV_Stream_Read& reader;

    function (_uv_tcp_t& tcp, byte[]& bytes, UV_Stream_Read& reader)=>Message10_recv run;
do
    function (_uv_tcp_t& tcp, byte[]& bytes, UV_Stream_Read& reader)=>Message10_recv run do
        this.tcp    = &tcp;
        this.bytes  = &bytes;
        this.reader = &reader;
    end

    [[
        G(tcp) = {
            chain = nil,
        }
    ]];

    ///////////////////////////////////////////////////////////////////////////////
    // HEADER
    ///////////////////////////////////////////////////////////////////////////////

    // <= ACK-header
    // bytes/reader received from message partially parsed
    var int err = do Message10_header_recv.run(&tcp,&bytes,&reader);
    kill reader;    // "reader" only used for decoding the header
    if err == _MESSAGE10_NOTSUB then
        var byte[1] send = [err];
        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);
        escape err;     // terminate if not subcribed
    end

    // LOCK: only one "receive" per chain
    do
        var bool is_locked = [[ G(tcp).chain.recv_is_locked ]];
        if is_locked then
            loop do
                par/or do
                    await global:recv_chain_unlocked;
                with
                    await 1s;
                end
                is_locked = [[ G(tcp).chain.recv_is_locked ]];
                if not is_locked then
                    break;
                end
            end
        end
        [[ G(tcp).chain.recv_is_locked = true ]];
    end

// TODO: primitive "lock"
do
    finalize with
        //var bool is_locked = [[ G(tcp).chain.recv_is_locked ]];
        //_assert(not is_locked);
        [[ G(tcp).chain.recv_is_locked = false ]];
    end

    var byte[1] send = [err];
    do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);

    [[
        G(tcp).remote_head = nil
        G(tcp).remote_base = nil
    ]];

    ///////////////////////////////////////////////////////////////////////////////
    // BLOCKS:
    ///////////////////////////////////////////////////////////////////////////////

    err = _ERR_NONE;
    err = do
        loop i do
            [[
                G(tcp).block = {
                    id        = '1.0',
                    chain_id  = G(tcp).chain.id,
                    txs       = {},
                    hash      = nil,
                    up_hash   = nil,
                    tail_hash = nil,
                }
            ]];

            // <= ACK-block
            do
                var int err2 = do Message10_block_recv.run(&tcp);

                //[[ print('[server] => BLOCKS['..(@i)..'] : 
                //'..tostring2(G(tcp).block.hash)) ]];

                do
                    _dbg_tcp(0, &&this.tcp, "server", "<= ACK-block[%d] = %d",
                            _ceu_uv_tcp_getsockport(&&this.tcp),
                            _ceu_uv_tcp_getpeerport(&&this.tcp),
                            i, err2);
                    var byte[1] send = [err2];
                    do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);
                end

                // FOUND COMMON BLOCK?
                if err2 == _MESSAGE10_HAVE then
                    if i == 0 then
                        escape _MESSAGE10_HAVE;   // nothing new
                    else
                        escape _ERR_NONE;         // check/set new head
                    end
                end

                // received at least one new block
                [[
                    if (@i) == 0 then
                        G(tcp).remote_head = G(tcp).block
                    else
                        G(tcp).remote_base.tail_hash = G(tcp).block.hash
                        G(tcp).block.up_hash = G(tcp).remote_base.hash
                    end

                    G(tcp).remote_base = G(tcp).block
                ]];
            end

            ///////////////////////////////////////////////////////////////////////////
            // TXS
            ///////////////////////////////////////////////////////////////////////////

            do
                var int txs_n = [[ G(tcp).block.txs_n ]];
                //_printf("[server] => %d txs\n", txs_n);
                loop j in txs_n do
                    //_printf("[server] => txs[%d]\n", j);
                    var int err2 = do Message10_tx_recv.run(&tcp);
                    if err2 != _ERR_NONE then
                        escape err2;
                    end
                    [[
                        APP.txs[G(tcp).tx.hash] = G(tcp).tx
                        G(tcp).block.txs[@j+1] = G(tcp).tx.hash
                    ]];
                end
            end

//[[print(tostring2(G(tcp).block.hash))]];
            [[ APP.blocks[G(tcp).block.hash] = G(tcp).block ]];
        end
        _assert(0);
        escape _ERR_NONE;
    end;

    // UNLOCK "receive"
    [[ G(tcp).chain.recv_is_locked = false ]];
end
    emit global:recv_chain_unlocked;

    if err == _MESSAGE10_HAVE then
        escape _ERR_NONE;   // nothing new, but no error
    else/if err != _ERR_NONE then
        escape err;         // some error
    end

    // BLOCK holds the COMMON node
    [[
        common_hash = G(tcp).block.hash
        assert(G(tcp).remote_head and G(tcp).remote_base, '1')
        G(tcp).remote_base.tail_hash = common_hash
    ]];

    ///////////////////////////////////////////////////////////////////////////////
    // CHECK/SET NEW HEAD
    ///////////////////////////////////////////////////////////////////////////////

    /*
     * LOCAL:  gen <-> 1 <-> 2 <-> 3
     *                       | LOCAL
     *                       \BASE \HEAD
     * REMOTE:         | <-  4 <-> 5 <-> 6
     *                       \BASE       \HEAD
     * common_hash:   "1"
     * (COMMON "1" still ups to LOCAL, but REMOTE tails to "1")
     */

    // compare chains, set longest, apply shortest
    [[
        -- { base=?, head=?, size=? }
        local_ = GG.chain_head_base_size(G(tcp).chain.head_hash)
        remote = GG.chain_head_base_size(G(tcp).remote_head.hash)
        --print('[server] LOC='..local_.size..' vs REM='..remote.size)

        -- dst is the longest
        -- src is the shortest
        -- TODO-LEN:
        dst, src = nil, nil
        if remote.size > local_.size then
            dst, src = remote, local_
        elseif local_.size > remote.size then
            dst, src = local_, remote
        else
            -- break tie on hash value of head
            assert(remote.size == local_.size)
            if remote.head.hash > local_.head.hash then
                dst, src = remote, local_
            else
                dst, src = local_, remote
            end
        end

        -- relink current chain's head/common if longest is remote
        if dst == remote then
            --print('[server] remote wins')
            APP.blocks[common_hash].up_hash = G(tcp).remote_base.hash
            G(tcp).chain.head_hash = dst.head.hash
        else
            --print('[server] local wins')
            -- already ok
        end

        -- apply shortest to new block with all missing txs
        block_new = {
            id        = '1.0',  -- TODO
            txs       = {},
            up_hash   = nil,
            chain_id  = G(tcp).chain.id,
            -- set by Message10_block_parse_head
            --tail_hash = dst.head.hash,
            --hash      = error'TODO',
        }

        -- insert all src* txs into block_new.txs if non existent
        cur = src.head
        T = {}  -- txs in base->head order
        while cur.hash ~= common_hash do
            t = {}
            for _, tx in ipairs(cur.txs) do
                assert(type(tx) == 'string')
                if not GG.chain_tx_contains(dst.head.hash,tx) then
                    t[#t+1] = tx
                end
            end
            cur = assert(APP.blocks[cur.tail_hash])
            table.insert(T, 1, t) -- inverse order
        end
        for _, t in ipairs(T) do
            for _, tx in ipairs(t) do
                block_new.txs[#block_new.txs+1] = tx
            end
        end

        ARGS = {
            block = block_new
        }
    ]];
    var bool has_txs = [[ #block_new.txs > 0 ]];
    if has_txs then
        do Message10_block_parse_head;
    end

    ///////////////////////////////////////////////////////////////////////////////
    // RETRANSMIT NEW HEAD
    ///////////////////////////////////////////////////////////////////////////////

    do
        // TODO: conditions to not propagate changes
        //var bool has = [[ block_new ~= dst.head ]];
        //if has then
            [[
                ARGS = {
                    block = APP.blocks[G(tcp).chain.head_hash]
                }
            ]];
            var int err2 = do Client10;
            if err2 != _ERR_NONE then
                escape err2;
            end
        //end
    end

    escape _ERR_NONE;
end

class UV_TCP_Server_Handler with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build;
do
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build do
        this.tcp = &tcp;
    end

    spawn do
        var _uv_stream_t&& s;
        var int err;
        (s,err) = await UV_ERROR until (s==(_uv_stream_t&&)&&this.tcp);
        //_dbg(2, "server | disconnected from %s:%d", (_char&&)&&ip, port);
        _assert(err != _ERR_NONE);
        _dbg(0, "server | %s\n", _uv_strerror(err));
        escape err;
    end

    var int err = _ERR_NONE;

    var byte[] bytes;
    var UV_Stream_Read reader =
            UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

    // => MESSAGE
    do UV_Stream_ReadUntil.run(&reader, MESSAGE_BYTES);

    //_printf("[server] => MESSAGE = [%d %d %d %d]\n",
                //bytes[0], bytes[1], bytes[2], bytes[3]);

    var bool ok = ( bytes[0]==MESSAGE_MAGIC_0 and
                    bytes[1]==MESSAGE_MAGIC_1 );

    if ok and bytes[2]==1 and bytes[3]==0 then
        err = do Message10_recv.run(&this.tcp, &bytes, &reader);
    else
        err = _ERR_MESSAGE;
    end

    //_printf("[server] DONE: %d\n", err);
    escape err;
end

#endif
