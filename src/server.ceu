#ifndef _SERVER_CEU
#define _SERVER_CEU

class Message_0_0_receive with
    interface IMessage;

input:
    var _uv_tcp_t& tcp;

    function (_uv_tcp_t& tcp)=>Message_0_0_receive build;
do
    function (_uv_tcp_t& tcp)=>Message_0_0_receive build do
        this.tcp = &tcp;
    end

    this.err = _ERR_NONE;

    var UV_Stream_Read r = UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp),&bytes);

    var int nxt = 0;
    var int off = 0;

    // <= MESSAGE
    do
        off = nxt;
        nxt = nxt + 1+1+1+1;
        AWAIT_UNTIL(r,nxt);

        if bytes[off+0] != MESSAGE_MAGIC_0  or
           bytes[off+1] != MESSAGE_MAGIC_1  or
           bytes[off+2] != MESSAGE_MAJOR    or
           bytes[off+3] != MESSAGE_MINOR
        then
            escape _ERR_MESSAGE;
        end
        _printf("[server] MESSAGE = [%d %d %d %d]\n",
                bytes[off+0], bytes[off+1], bytes[off+2], bytes[off+3]);
    end

    // <= BC_SIGNED?
    // <= BC_LEN
    // <= BC_DATA
    do
        off = nxt;
        nxt = nxt + 1;
        AWAIT_UNTIL(r,nxt);
        var u8 v = bytes[off];
        var bool bc_signed = (v>>7);
        var int  bc_len    = (v&0x7F);
        _printf("[server] BC_SIGNED = %d\n", bc_signed);
        _printf("[server] BC_LEN    = %d\n", bc_len);

        off = nxt;
        nxt = nxt + bc_len;
        AWAIT_UNTIL(r,nxt);
        _printf("[server] BC_DATA   = [");
        loop i in bc_len do
            _printf("%2d", bytes[off+i]);
        end
        _printf(" ]\n");

        _printf("\n");
    end

    // <= PAYLOAD_HASH
    do
        off = nxt;
        nxt = nxt + HASH_BYTES;
        AWAIT_UNTIL(r,nxt);
        _printf("[server] PAYLOAD_HASH = [");
        loop i in HASH_BYTES do
            _printf("%2X", bytes[off+i]);
        end
        _printf(" ]\n");
    end

    // == END
    _assert(r.next >= nxt);
    if r.next > nxt then
        escape _ERR_EXTRA_BYTES;
    end

    // == CHECK
    do
        this.offs = []..this.offs..[nxt];

        // TODO: check
        //  - ainda não tenho PAYLOAD_HASH?
        //  - quero essa BC?
        //      - quero mesmo que unsigned?
        //  - quero com bc_zeros < K?
        //  - BLK_BACK_HASH é suficientemente recente?
        var byte[1] send = [1];
        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);
    end

    //////////////////////////////////////////////////////////////////////////

    // <= PoW
    do
        off = nxt;
        nxt = nxt + sizeof(u32);
        AWAIT_UNTIL(r,nxt);
        var u32 pow = GET_HOST_U32(bytes,off);
        _printf("[server] POW = %X\n", pow);
    end

    // <= PoS
    do
        off = nxt;
        nxt = nxt + 1;
        AWAIT_UNTIL(r,nxt);
        var int pos = bytes[off];
        _printf("[server] POS = %X\n", pos);
    end

    // <= BACK_HASH
    do
        off = nxt;
        nxt = nxt + HASH_BYTES;
        AWAIT_UNTIL(r,nxt);
        _printf("[server] BACK_HASH = [");
        loop i in HASH_BYTES do
            _printf("%2X", bytes[off+i]);
        end
        _printf(" ]\n");
    end

    // <= TAIL_HASH
    do
        off = nxt;
        nxt = nxt + HASH_BYTES;
        AWAIT_UNTIL(r,nxt);
        _printf("[server] TAIL_HASH = [");
        loop i in HASH_BYTES do
            _printf("%2X", bytes[off+i]);
        end
        _printf(" ]\n");
    end

    // <= PAYLOAD_LEN
    // <= PAYLOAD
    do
        off = nxt;
        nxt = nxt + sizeof(u32);
        AWAIT_UNTIL(r,nxt);
        var u32 payload_len = GET_HOST_U32(bytes,off);
        _printf("[server] PAYLOAD_LEN = %d\n", payload_len);

        off = nxt;
        nxt = nxt + payload_len;
        AWAIT_UNTIL(r,nxt);

        // TODO: trick to print the payload as string
        _assert($bytes == nxt);
        $bytes := $bytes + 1;
        bytes[nxt] = '\0';
        _printf("[server] PAYLOAD = %s", (_char&&)&&(((_byte&&)&&bytes)[off]));
        $bytes = $bytes - 1;
    end

    // == END
    _assert(r.next >= nxt);
    if r.next > nxt then
        escape _ERR_EXTRA_BYTES;
    end

    // == CHECK
    do
        this.offs = []..this.offs..[nxt];

        // TODO: check
        //  - tudo casa?
        var byte[1] send = [1];
        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);
    end

    //escape _ERR_NONE;
    await FOREVER;
end

class UV_TCP_Server_Handler with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build;
do
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build do
        this.tcp = &tcp;
    end

    var Message_0_0_receive msg = Message_0_0_receive.build(&this.tcp);
await 1s;
    _assert($msg.offs == 2);
    _assert(msg.err == _ERR_NONE);

    var int err = do PeersSend.run(&msg);
    _assert(err == _ERR_NONE);
end

#endif
