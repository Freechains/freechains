#ifndef _SERVER_CEU
#define _SERVER_CEU

native do
    enum {
        MESSAGE10_OK = 1,
        MESSAGE10_HAVE,
        MESSAGE10_NOTSUB,
    };
end

class Message10_receive with
input:
    var _uv_tcp_t& tcp;
    var Message&   msg;

    function (_uv_tcp_t& tcp, Message& msg)=>Message10_receive build;
do
    function (_uv_tcp_t& tcp, Message& msg)=>Message10_receive build do
        this.tcp = &tcp;
        this.msg = &msg;
    end

    [[
        MSG = {
            id = '1.0',
            chain = {
                key    = nil,
                zeros  = nil,
            },
            block_hash = nil,
            back_hash  = nil,
            tail_hash  = nil,
        }
    ]];

    var UV_Stream_Read r = UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp),
                                                &this.msg.bytes);

    var int nxt = 0;
    var int off = 0;

    // <= MESSAGE
    do
        // - [check] Is this message '1.0'?

        off = nxt;
        nxt = nxt + 1+1+1+1;
        AWAIT_UNTIL(r,nxt);

        if this.msg.bytes[off+0] != MESSAGE_MAGIC_0  or
           this.msg.bytes[off+1] != MESSAGE_MAGIC_1  or
           this.msg.bytes[off+2] != 1                or
           this.msg.bytes[off+3] != 0
        then
            escape _ERR_MESSAGE;
        end
        _printf("[server] MESSAGE = [%d %d %d %d]\n",
                this.msg.bytes[off+0],
                this.msg.bytes[off+1],
                this.msg.bytes[off+2],
                this.msg.bytes[off+3]);
    end

    // <= CHAIN_SIGNED?
    // <= CHAIN_LEN
    // <= CHAIN_KEY
    var char[] chain_key;
    var bool chain_signed = false;
    do
        off = nxt;
        nxt = nxt + 1;
        AWAIT_UNTIL(r,nxt);
        var u8 v = this.msg.bytes[off];
        chain_signed = (v>>7);
        var int chain_len = (v&0x7F);
        _printf("[server] CHAIN_SIGNED = %d\n", chain_signed);
        _printf("[server] CHAIN_LEN    = %d\n", chain_len);

        off = nxt;
        nxt = nxt + chain_len;
        AWAIT_UNTIL(r,nxt);
        $chain_key := chain_len;
        _strncpy((_char&&)&&chain_key, (_char&&)&&this.msg.bytes[off], chain_len);
        _printf("[server] CHAIN_KEY    = %s\n", (_char&&)&&chain_key);

        [[ MSG.chain.key = @chain_key ]];
    end

    // <= BLOCK_HASH
    var byte[HASH_BYTES] block_hash;
    do
        off = nxt;
        nxt = nxt + HASH_BYTES;
        AWAIT_UNTIL(r,nxt);
        $block_hash := HASH_BYTES;
        _ceu_vector_copy_buffer(&&block_hash, 0,
                                (_byte&&)&&this.msg.bytes[off], HASH_BYTES);
        [[
            print('[server] BLOCK_HASH = {')
            print(hex_dump(@block_hash))
            print('}')
        ]];
        [[ MSG.block_hash = @block_hash ]];
    end
    _assert($block_hash == HASH_BYTES);

    // == END
    _assert(r.next >= nxt);
    if r.next > nxt then
        escape _ERR_EXTRA_BYTES;
    end

    // == CHECK
    // => ACK
    do
        // - [check] Do I have this message hash?

        var bool have = [[ APP.blocks[@block_hash] ]];
        [[ APP.blocks[@block_hash] = true ]];

        var int ret = _ERR_NONE;

        // - [check] Am I subscribed to the message chain?
        // - [check] Does the message has the required zeros?

        if have then
            ret = _MESSAGE10_HAVE;
        else
            ret = _MESSAGE10_NOTSUB;
            [[ CHAIN = APP.chains[@chain_key] ]];
            var bool is_sub = [[ CHAIN ~= nil ]];
            if is_sub then
                var int zeros = _leading_zeros((_byte&&)&&block_hash, HASH_BYTES);
                is_sub = [[ CHAIN.zeros <= @zeros ]];
                if is_sub then
                    ret = _ERR_NONE;
                end
                [[ MSG.chain.zeros = @zeros ]];
            end
        end

        if ret == _ERR_NONE then
            ret = _MESSAGE10_OK;
        end

        var byte[1] send = [ret == _MESSAGE10_OK];
        this.msg.offs = []..this.msg.offs..[nxt];
        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);

        if ret != _MESSAGE10_OK then
            escape ret;
        end
    end

    //////////////////////////////////////////////////////////////////////////

    // <= PoW
    do
        off = nxt;
        nxt = nxt + sizeof(u32);
        AWAIT_UNTIL(r,nxt);
        var u32 pow = GET_HOST_U32(this.msg.bytes,off);
        _printf("[server] POW = %X\n", pow);
        [[ MSG.pow = @pow ]];
    end

    // <= PoS
    // TODO: check
    do
        off = nxt;
        nxt = nxt + 1;
        AWAIT_UNTIL(r,nxt);
        var int pos = this.msg.bytes[off];
        _printf("[server] POS = %X\n", pos);
        [[ MSG.pos = @pos ]];
    end

    // <= BACK_HASH
    var byte[HASH_BYTES] back_hash;
    do
        off = nxt;
        nxt = nxt + HASH_BYTES;
        AWAIT_UNTIL(r,nxt);
        $back_hash := HASH_BYTES;
        _ceu_vector_copy_buffer(&&back_hash, 0,
                                (_byte&&)&&this.msg.bytes[off], HASH_BYTES);
        [[
            print('[server] BACK_HASH = {')
            print(hex_dump(@back_hash))
            print('}')
        ]];
        [[ MSG.back_hash = @back_hash ]];
    end
    _assert($back_hash == HASH_BYTES);

    // <= TAIL_HASH
    var byte[HASH_BYTES] tail_hash;
    do
        off = nxt;
        nxt = nxt + HASH_BYTES;
        AWAIT_UNTIL(r,nxt);
        $tail_hash := HASH_BYTES;
        _ceu_vector_copy_buffer(&&tail_hash, 0,
                                (_byte&&)&&this.msg.bytes[off], HASH_BYTES);
        [[
            print('[server] TAIL_HASH = {')
            print(hex_dump(@tail_hash))
            print('}')
        ]];
        [[ MSG.tail_hash = @tail_hash ]];
    end
    _assert($tail_hash == HASH_BYTES);

    // <= PAYLOAD_LEN
    // <= PAYLOAD
    do
        off = nxt;
        nxt = nxt + sizeof(u32);
        AWAIT_UNTIL(r,nxt);
        var u32 payload_len = GET_HOST_U32(this.msg.bytes,off);
        _printf("[server] PAYLOAD_LEN = %d\n", payload_len);

        off = nxt;
        nxt = nxt + payload_len;
        AWAIT_UNTIL(r,nxt);

        // TODO: trick to print the payload as string
        _assert($this.msg.bytes == nxt);
        $this.msg.bytes := $this.msg.bytes + 1;
        this.msg.bytes[nxt] = '\0';
        _printf("[server] PAYLOAD = %s", (_char&&)&&(((_byte&&)&&this.msg.bytes)[off]));
        $this.msg.bytes = $this.msg.bytes - 1;
    end

    // == END
    _assert(r.next >= nxt);
    if r.next > nxt then
        escape _ERR_EXTRA_BYTES;
    end

    this.msg.offs = []..this.msg.offs..[nxt];

    escape _MESSAGE10_OK;
end

class Message10_link with
input:
    var Message& msg;

    function (Message& msg)=>Message10_link build;
do
    function (Message& msg)=>Message10_link build do
        this.msg = &msg;
    end

    // == CHECK
    do
        [[ HEAD = APP.chains[MSG.chain.key].heads[MSG.chain.zeros] ]];
        var bool same = [[ HEAD == MSG.block_hash ]];
    end
end

class UV_TCP_Server_Handler with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build;
do
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build do
        this.tcp = &tcp;
    end

    var Message msg;
    var int ret = do Message10_receive.build(&this.tcp, &msg);
    _assert(ret > _ERR_NONE);
    _printf("[server] ret = %d\n", ret);
    if ret==_MESSAGE10_HAVE or ret==_MESSAGE10_NOTSUB then
        _assert($msg.offs == 1);
    else
        _assert(ret == _MESSAGE10_OK);
        _assert($msg.offs == 2);
        var int err = do Message10_link.build(&msg);
        if err == _ERR_NONE then
            err = do PeersSend.run(&msg);
            _assert(err == _ERR_NONE);
        end
    end
end

#endif
