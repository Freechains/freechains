#ifndef _SERVER_CEU
#define _SERVER_CEU

class Message_0_0_receive with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Message_0_0_receive build;
do
    function (_uv_tcp_t& tcp)=>Message_0_0_receive build do
        this.tcp = &tcp;
    end

    var byte[CONTENTS_PUT_BYTES] bytes;
    var UV_Stream_Read r = UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp),&bytes);

    var int nxt = 0;
    var int off = 0;

    // <= MESSAGE
    do
        off = nxt;
        nxt = nxt + 1+1+1+1;
        AWAIT_UNTIL(r,nxt);

        if bytes[off+0] != MESSAGE_MAGIC_0  or
           bytes[off+1] != MESSAGE_MAGIC_1  or
           bytes[off+2] != MESSAGE_MAJOR    or
           bytes[off+3] != MESSAGE_MINOR
        then
            escape _ERR_MESSAGE;
        end
        _printf("[server] MESSAGE = [%d %d %d %d]\n",
                bytes[off+0], bytes[off+1], bytes[off+2], bytes[off+3]);
    end

    // <= BC_LEN
    // <= BC_DATA
    do
        off = nxt;
        nxt = nxt + 1;
        AWAIT_UNTIL(r,nxt);
        var int bc_len = bytes[off];
        _printf("[server] BC_LEN = %d\n", bc_len);

        off = nxt;
        nxt = nxt + bc_len;
        AWAIT_UNTIL(r,nxt);
        _printf("[server] BC_DATA = [");
        loop i in bc_len do
            _printf("%2d", bytes[off+i]);
        end
        _printf(" ]\n");
    end

    // <= ZEROS_N
    do
        off = nxt;
        nxt = nxt + 1;
        AWAIT_UNTIL(r,nxt);
        var int zeros_n = bytes[off];
        _printf("[server] ZEROS_N = %d\n", zeros_n);
    end

    // <= BLK_BACK_HASH
    do
        off = nxt;
        nxt = nxt + HASH_BYTES;
        AWAIT_UNTIL(r,nxt);
        _printf("[server] BLK_BACK_HASH = [");
        loop i in HASH_BYTES do
            _printf("%2X", bytes[off+i]);
        end
        _printf(" ]\n");
    end

    // <= CONTENTS_DATA_HASH
    do
        off = nxt;
        nxt = nxt + HASH_BYTES;
        AWAIT_UNTIL(r,nxt);
        _printf("[server] CONTENTS_DATA_HASH = [");
        loop i in HASH_BYTES do
            _printf("%2X", bytes[off+i]);
        end
        _printf(" ]\n");
    end

    // == END
    _assert(r.next >= nxt);
    if r.next > nxt then
        escape _ERR_EXTRA_BYTES;
    end

    // TODO: check
    //  - ainda não tenho CONTENTS_DATA_HASH?
    //  - quero essa BC?
    //      - quero mesmo que unsigned?
    //  - quero com zeros_n < K?
    //  - BLK_BACK_HASH é suficientemente recente?
    bytes = [1];
    do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

    //////////////////////////////////////////////////////////////////////////

    // <= NOUNCE
    do
        nxt = nxt + 1;
        AWAIT_UNTIL(r,nxt);
        var int nounce = bytes[off];
        _printf("[server] NOUNCE = %d\n", nounce);
    end

    // <= CONTENTS_LEN
    // <= CONTENTS_DATA
    do
        off = nxt;
        nxt = nxt + sizeof(u32);
        AWAIT_UNTIL(r,nxt);
        var u32 contents_len = GET_HOST_U32(bytes,off);
        _printf("[server] CONTENTS_LEN = %d\n", contents_len);

        off = nxt;
        nxt = nxt + contents_len;
        AWAIT_UNTIL(r,nxt);

        // TODO: trick to print the contents
        if $bytes <= nxt then
            $bytes := $bytes + 1;
        end
        var byte old = bytes[nxt];
        bytes[nxt] = '\0';
        _printf("[server] CONTENTS_DATA = %s", (_char&&)&&(((_byte&&)&&bytes)[off]));
        bytes[nxt] = old;
    end

    // == END
    _assert(r.next >= nxt);
    if r.next > nxt then
        escape _ERR_EXTRA_BYTES;
    end

    // TODO: check
    //  - ainda não tenho CONTENTS_DATA_HASH?
    //  - quero essa BC?
    //      - quero mesmo que unsigned?
    //  - quero com zeros_n < K?
    //  - BLK_BACK_HASH é suficientemente recente?
    bytes = [1];
    do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

    escape _ERR_NONE;
end

class UV_TCP_Server_Handler with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build;
do
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build do
        this.tcp = &tcp;
    end

    var int err = do Message_0_0_receive.build(&this.tcp);
    _assert(err == _ERR_NONE);
    escape _ERR_NONE;
end

#endif
