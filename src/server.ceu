#ifndef _SERVER_CEU
#define _SERVER_CEU

class Message10_header_recv with
input:
    var _uv_tcp_t&      tcp;
    var byte[]&         bytes;
    var UV_Stream_Read& reader;

    function (_uv_tcp_t& tcp, byte[]& bytes, UV_Stream_Read& reader)=>Message10_header_recv run;
do
    function (_uv_tcp_t& tcp, byte[]& bytes, UV_Stream_Read& reader)=>Message10_header_recv run do
        this.tcp    = &tcp;
        this.bytes  = &bytes;
        this.reader = &reader;
    end

    var u32 off = MESSAGE_BYTES;

    // => CHAIN_LEN
    // => CHAIN_KEY
    // => CHAIN_ZEROS
    do
        // len
        do UV_Stream_ReadUntil.run(&reader, off+1);
        var u8 chain_len = bytes[off];
        off = off + 1;
        _printf("[server] => CHAIN_LEN   = %d\n", chain_len);

        // key
        var char[] chain_key;
        do UV_Stream_ReadUntil.run(&reader, off+chain_len);
        $chain_key := chain_len;
        _memcpy((_char&&)&&chain_key, (_byte&&)&&bytes[off], chain_len);
        _printf("[server] => CHAIN_KEY   = %s\n", (_char&&)&&chain_key);
        off = off + chain_len;

        // zeros
        do UV_Stream_ReadUntil.run(&reader, off+1);
        var u8 chain_zeros = bytes[off];
        _printf("[server] => CHAIN_ZEROS = %d\n",  chain_zeros);
        off = off + 1;

        [[
            G(tcp).chain = APP.chains.parse( {
                key   = @chain_key,
                zeros = @chain_zeros,
            } )
        ]];

        var bool is_sub = [[ G(tcp).chain ~= nil ]];
        if not is_sub then
            escape _MESSAGE10_NOTSUB;    // OK ACK
        end

        // TODO: check CHAIN_LIMITS
    end

    escape _ERR_NONE;
end

class Message10_block_recv with
input:
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Message10_block_recv run;
do
    function (_uv_tcp_t& tcp)=>Message10_block_recv run do
        this.tcp = &tcp;
    end

    var byte[] bytes;
    var UV_Stream_Read reader =
            UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

    var u32 off = 0;

    // => BLOCK_HASH
    // => BLOCK_TXS_N
    do
        // hash
        do UV_Stream_ReadUntil.run(&reader, off+HASH_BYTES);
        var byte[HASH_BYTES] hash;
        _ceu_vector_copy_buffer(&&hash, 0,
                                (_byte&&)&&bytes[off], HASH_BYTES,
                                1);
        off = off + HASH_BYTES;

        // txs_n
        do UV_Stream_ReadUntil.run(&reader, off+sizeof(u32));
        var u32 txs_n = GET_HOST_U32(bytes, off);
        off = off + sizeof(u32);

        [[
            G(tcp).block.hash = @hash;
            print('[server] => BLOCK_HASH', string.len(G(tcp).block.hash))
            print(tostring2(G(tcp).block.hash))
            print('[server] => BLOCK_TXS_N', @txs_n)
            G(tcp).block.txs_n = @txs_n
        ]];
    end

    var bool have = [[ APP.blocks[G(tcp).block.hash] ~= nil ]];
    if have then
        escape _MESSAGE10_HAVE;    // OK ACK
    else
        escape _ERR_NONE;
    end
end

class Message10_tx_recv with
input:
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Message10_tx_recv run;
do
    function (_uv_tcp_t& tcp)=>Message10_tx_recv run do
        this.tcp = &tcp;
    end

    var byte[] bytes;
    var UV_Stream_Read reader =
            UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

    var u32 off = 0;

    // => TX_PAYLOAD_BYTES
    // => TX_HASH
    do
        // hash
        do UV_Stream_ReadUntil.run(&reader, off+HASH_BYTES);
        var byte[HASH_BYTES] hash;
        _ceu_vector_copy_buffer(&&hash, 0,
                                (_byte&&)&&bytes[off], HASH_BYTES,
                                1);
        off = off + HASH_BYTES;

        // payload_bytes
        do UV_Stream_ReadUntil.run(&reader, off+sizeof(u32));
        var u32 payload_bytes = GET_HOST_U32(bytes, off);
        off = off + sizeof(u32);
        [[ payload_bytes = @payload_bytes ]];

        // TODO: check payload_bytes vs chain.limits

        [[
            tx_hash = @hash
            print('[server] => TX_HASH', payload_bytes)
            print(tostring2(tx_hash))
            G(tcp).block.txs[#G(tcp).block.txs+1] = tx_hash
        ]];
        var bool have = [[ APP.txs[tx_hash] ~= nil ]];

        // <= ACK-tx
        do
            var byte[1] send;
            if have then
                send = [ _MESSAGE10_HAVE ];
            else
                send = [ _ERR_NONE  ];
            end
            _printf("[server] <= ACK-tx = %d\n", send[0]);
            do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);
        end

        // HAVE_YES: next TX
        if have then
            escape _ERR_NONE;
        end
    end
    // HAVE_NO: complete TX

    [[
        G(tcp).tx = {
            hash  = tx_hash,
            bytes = payload_bytes,
        }
    ]];

    // => TX_COMPLETE
    do
        // => TIMESTAMP
        var u32 timestamp = 0;
        do
            do UV_Stream_ReadUntil.run(&this.reader, off + sizeof(u32));
            timestamp = GET_HOST_U32(bytes,off);
            _printf("[server] => TIMESTAMP = %X\n", timestamp);
            [[ G(tcp).tx.timestamp = @timestamp ]];
            off = off + sizeof(u32);
        end

        // => TX_BACK_HASH
        // TODO: check
        var byte[HASH_BYTES] tx_back_hash;
        do
            do UV_Stream_ReadUntil.run(&this.reader, off + HASH_BYTES);
            _ceu_vector_copy_buffer(&&tx_back_hash, 0,
                                    (_byte&&)&&bytes[off], HASH_BYTES,
                                    1);
            off = off + HASH_BYTES;
            _assert($tx_back_hash == HASH_BYTES);
            [[
                G(tcp).tx.back_hash = @tx_back_hash
                print('[server] => TX_BACK_HASH')
                print(tostring2(G(tcp).tx.back_hash))
            ]];

            // [check] BACK_HASH is young enough? [ok ACK]
            do
#if 1
                _printf("TODO: BLOCK_HASH young enough?\n");
#else
                var int n = [[ APP.server.chains.BACK_HASH_JUMP_LIMIT ]];
                [[ head_hash = APP.server.chains[MSG.chain.key].heads[MSG.chain.zeros] ]];
                loop i in n do
                    var bool is_eq = [[ head_hash == MSG.back_hash ]];
                    if is_eq then
                        xxx
                    end
                   [[ head_hash = APP ]]
                end
#endif
            end
        end

        // => TX_PAYLOAD
        var byte[] tx_payload;
        do
            var u32 len = [[ G(tcp).tx.bytes ]];
            do UV_Stream_ReadUntil.run(&this.reader, off + len);
            _ceu_vector_copy_buffer(&&tx_payload, 0,
                                    &&(((_byte&&)&&bytes)[off]), len,
                                    1);
            [[
                G(tcp).tx.payload = @tx_payload
                print('[server] => PAYLOAD')
                print(tostring2(G(tcp).tx.payload))
            ]];
            off = off + len;
        end

        // => POS: TODO
        do
            do UV_Stream_ReadUntil.run(&this.reader, off + 1);
            var int pos = bytes[off];
            _printf("[server] POS = %X\n", pos);
            [[ G(tcp).tx.pos = @pos ]];
            _printf("TODO: POS matches?\n");
            off = off + 1;
        end

        // [check] TX_HASH is correct? [no ACK]
        do
            var byte[] plain;
            PUT_NETWORK_U32(plain, 0, timestamp);
            plain = []..plain..tx_back_hash..tx_payload;

            var byte[HASH_BYTES] hash;
            _crypto_generichash((_byte&&)&&hash, HASH_BYTES,
                                (_byte&&)&&plain, $plain,
                                null, 0);

            var char[HASH_BYTES] tx_hash = [[ G(tcp).tx.hash ]];
            var int ret = _memcmp((_char&&)&&tx_hash, (_byte&&)&&hash, HASH_BYTES);
            _printf("[server] POW? %d\n", ret==0);
            if ret != 0 then
                escape _ERR_REMOTE_BUG_OR_MALICIOUS;
            end
        end
    end

    escape _ERR_NONE;
end

class Message10_recv with
input:
    var _uv_tcp_t&      tcp;
    var byte[]&         bytes;
    var UV_Stream_Read& reader;

    function (_uv_tcp_t& tcp, byte[]& bytes, UV_Stream_Read& reader)=>Message10_recv run;
do
    function (_uv_tcp_t& tcp, byte[]& bytes, UV_Stream_Read& reader)=>Message10_recv run do
        this.tcp    = &tcp;
        this.bytes  = &bytes;
        this.reader = &reader;
    end

    [[
        G(tcp) = {
            chain = nil,
        }
    ]];

    ///////////////////////////////////////////////////////////////////////////////
    // HEADER
    ///////////////////////////////////////////////////////////////////////////////

    // <= ACK-header
    // bytes/reader received from message partially parsed
    do
        var int err = do Message10_header_recv.run(&tcp,&bytes,&reader);
        do
            _printf("[server] <= ACK-header = %d\n", err);
            var byte[1] send = [err];
            do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);
        end
        if err == _MESSAGE10_NOTSUB then
            escape err;     // terminate if not subcribed
        end
    end

    ///////////////////////////////////////////////////////////////////////////////
    // BLOCKS
    ///////////////////////////////////////////////////////////////////////////////

    [[
        G(tcp).remote_head = nil
        G(tcp).remote_base = nil
    ]];

    loop i do
        _printf("[server] => BLOCK[%d]\n", i);
        [[
            G(tcp).block = {
                id        = '1.0',
                txs       = { },
                hash      = nil,
                up_hash   = nil,
                tail_hash = nil,
            }
        ]];

        // <= ACK-block
        do
            var int err = do Message10_block_recv.run(&tcp);
            do
                _printf("[server] <= ACK-block = %d\n", err);
                var byte[1] send = [err];
                do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &send);
            end

            // FOUND COMMON BLOCK?
            if err == _MESSAGE10_HAVE then
                // link REMOTE tail to LOCAL chain in the COMMON point
                [[
                    if G(tcp).remote_head then
                        G(tcp).remote_base.tail_hash = G(tcp).block.hash
                    end
                ]];

                if i == 0 then
                    escape _ERR_NONE;   // nothing new
                else
                    break;              // check/set new head
                end
            end

            // received at least one new block
            [[
                G(tcp).remote_head = G(tcp).remote_head or G(tcp).block

                if G(tcp).remote_base then
                    G(tcp).remote_base.tail_hash = G(tcp).block.hash
                    G(tcp).block.up_hash  = G(tcp).remote_base.hash
                end
                G(tcp).remote_base = G(tcp).block
            ]];
        end

        ///////////////////////////////////////////////////////////////////////////
        // TXS
        ///////////////////////////////////////////////////////////////////////////

        do
            var int txs_n = [[ G(tcp).block.txs_n ]];
            _printf("[server] => %d txs\n", txs_n);
            loop j in txs_n do
                _printf("[server] => txs[%d]\n", j);
                var int err = do Message10_tx_recv.run(&tcp);
                if err != _ERR_NONE then
                    escape err;
                end
                [[ APP.txs[G(tcp).tx.hash] = G(tcp).tx ]];
            end
        end

        [[ APP.blocks[G(tcp).block.hash] = G(tcp).block ]];
    end

    // BLOCK holds the COMMON node
    [[
        COMMON = G(tcp).block
        assert(G(tcp).remote_head and G(tcp).remote_base)
        assert(COMMON.hash == G(tcp).remote_base.tail_hash)
    ]];

    ///////////////////////////////////////////////////////////////////////////////
    // CHECK/SET NEW HEAD
    ///////////////////////////////////////////////////////////////////////////////

    /*
     * LOCAL:  gen <-> 1 <-> 2 <-> 3
     *                       | LOCAL
     *                       \BASE \HEAD
     * COMMON:         1 <-> 2 <-> 3
     * REMOTE:         | <-  4 <-> 5 <-> 6
     *                       \BASE       \HEAD
     * (COMMON "1" still ups to LOCAL, but REMOTE tails to "1")
     */

    // if COMMON node has no up_hash, then this is not a fork
    var bool is_fork = [[ COMMON.up_hash ~= nil ]];

    [[ block_head = nil ]];

    if not is_fork then
        // simply concatenate REMOTE blocks
        [[
            COMMON.up_hash = G(tcp).remote_base.hash
            block_head = G(tcp).remote_head
        ]];
    else
        // compare and concatenate the two chains
        [[
            -- { base=?, head=?, len=? }
            local local_ = APP.chains.base_head_len(APP.blocks[COMMON.up_hash])
            local remote = APP.chains.base_head_len(G(tcp).remote_base)
            assert(remote.len>0 and local_.len>0)
            print('[server] LOC='..local_.len..' vs REM='..remote.len)

            -- dst is the longest
            -- src is the shortest
            -- TODO-LEN:
            local src, dst
            if remote.len >= local_.len then
-- TODO: >=
                dst, src = remote, local_
            else
                dst, src = local_, remote
            end

            -- concat (dst .. src)
            dst.head.up_hash   = src.base.hash
            src.base.tail_hash = dst.head.hash
            COMMON.up_hash     = dst.base.hash
            assert(dst.base.tail_hash == COMMON.hash)

            block_head = dst.head
        ]];
    end

    ///////////////////////////////////////////////////////////////////////////////
    // RETRANSMIT NEW HEAD
    ///////////////////////////////////////////////////////////////////////////////

    [[
        APP.chains[G(tcp).chain.id].head_hash = block_head.hash
        print(APP.chains.tostring(G(tcp).chain))
    ]];
    do
        var bool has = [[ block_head~=nil ]];
        if has then
            [[
                block_head.chain = G(tcp).chain
                ARGS = {
                    block = block_head,
                }
            ]];
            var int err = do Client10;
            escape err;
        end
    end

    escape _ERR_NONE;
end

class UV_TCP_Server_Handler with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build;
do
    function (_uv_tcp_t& tcp)=>UV_TCP_Server_Handler build do
        this.tcp = &tcp;
    end

    var int err = _ERR_NONE;

    var byte[] bytes;
    var UV_Stream_Read reader =
            UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

    // => MESSAGE
    do UV_Stream_ReadUntil.run(&this.reader, MESSAGE_BYTES);

    _printf("[server] => MESSAGE = [%d %d %d %d]\n",
                bytes[0], bytes[1], bytes[2], bytes[3]);

    var bool ok = ( bytes[0]==MESSAGE_MAGIC_0 and
                    bytes[1]==MESSAGE_MAGIC_1 );

    if ok and bytes[2]==1 and bytes[3]==0 then
        err = do Message10_recv.run(&this.tcp, &this.bytes, &this.reader);
    else
        err = _ERR_MESSAGE;
    end

    _printf("[server] DONE: %d\n", err);
    escape err;
end

#endif
