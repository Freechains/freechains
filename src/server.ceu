#ifndef _SERVER_CEU
#define _SERVER_CEU

code/await UV_TCP_Server_Handler (var& UV_Stream tcp, var& UV_TCP_Server_Data shared) -> none
do
    _dbg(3, "server | new handler");

    var int msg = 0;

    var Exception? e;

    do finalize with
        if e? then
            [[ FC.errs[#FC.errs+1] = @(e! as int) ]];
            _dbg(0, "server | EXCEPTION | %s\n", e!.message);
            emit shared.err_server(msg, e! as int);
        else
            [[ ARGS = { chain = THIS and THIS.chain } ]];
            emit shared.ok_server(msg);
        end
    end

    catch e do
        par/or do
            var int timeout = [[ CFG.daemon.timeout or 0 ]];
            if timeout == 0 then
                await FOREVER;
            else
                await (timeout)s;
            end
            var Exception.Freechains.Timeout e_ = val Exception.Freechains.Timeout(_);
            throw e_;
        with
            // => MESSAGE
            await UV_Stream_Read_N(&tcp, MESSAGE_BYTES);

            //_printf("[server] => MESSAGE = [%d %d %d %d]\n",
                        //bytes[0], bytes[1], bytes[2], bytes[3]);

            var bool ok = ( tcp.buffer[0]==MESSAGE_MAGIC_0 and
                            tcp.buffer[1]==MESSAGE_MAGIC_1 );

            msg = (tcp.buffer[2]<<8) + (tcp.buffer[3]<<0);
            _dbg(3, "server | MESSAGE | %d/%X", ok, msg);

            $tcp.buffer = $tcp.buffer - MESSAGE_BYTES;

            if ok then
                if msg=={MESSAGE10} then
                    _dbg(3, "server | MESSAGE 10");
                    do ()
                        await Recv_10_Header(&outer.tcp);
                        [[ THIS = { chain=ARGS.chain } ]];

                        [[ ARGS = { chain=THIS.chain } ]];
                        await Recv_10_Nodes(&outer.shared, &outer.tcp);

                        [[ ARGS = { chain=THIS.chain } ]];
                        await Send_10_Nodes(&outer.tcp);
                    end
                else/if msg=={MESSAGE20} then
                    _dbg(3, "server | MESSAGE 20");
                    do ()
                        #include "server/message_20.ceu"
                    end
                else/if msg=={MESSAGE30} then
                    _dbg(3, "server | MESSAGE 30");
                    do ()
                        #include "server/message_30.ceu"
                    end
                else/if msg=={MESSAGE40} then
                    _dbg(3, "server | MESSAGE 40");
                    do ()
                        #include "server/message_40.ceu"
                    end
                else/if msg=={MESSAGE50} then
                    _dbg(3, "server | MESSAGE 50");
                    do ()
                        #include "server/message_50.ceu"
                    end
                else/if msg=={MESSAGE60} then
                    _dbg(3, "server | MESSAGE 60");
                    do ()
                        #include "server/message_60.ceu"
                    end
                else/if msg=={MESSAGE70} then
                    _dbg(3, "server | MESSAGE 70");
                    // nothing, main.ceu will terminate
                end
            else
                var Exception.Freechains.Unsupported e_ = val Exception.Freechains.Unsupported(_);
                throw e_;
            end
        end
    end
end

#endif
