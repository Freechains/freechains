#ifndef _CLIENT_CEU
#define _CLIENT_CEU

code/await Message10_tx_send (var& _uv_tcp_t tcp, var u32 i) -> int
do
    // <= TX_HASH
    // <= TX_LEN
    do/_
        [[
            tx_hash   = G(tcp).block.txs[@i+1]
            G(tcp).tx = assert(APP.txs[tx_hash])
            --print('[client] <= txs['..(@i+1)..']', string.len(G(tcp).tx.payload))
            --print(tostring2(G(tcp).tx.hash))
        ]];
        var      u32  payload_bytes = [[ string.len(G(tcp).tx.payload) ]];
        vector[] byte bytes         = [] .. [[ G(tcp).tx.hash ]];
        _ceu_vector_setlen(&&bytes, $bytes+sizeof(u32), 1);
        PUT_NETWORK_U32(bytes, HASH_BYTES, payload_bytes);
        await UV_TCP_Write(&tcp, &bytes);

        // => ACK-tx
        do/_
            vector[1] byte recv;
            var&? UV_Stream_Read reader = spawn UV_TCP_Read(&tcp,&recv);
            await UV_Stream_ReadUntil(&reader!, 1);
            var int err = recv[0];

            //_printf("[client] => ACK-tx = %d\n", err);
            if err == _MESSAGE10_HAVE then
                escape _ERR_NONE;   // next TX (not an error)
            end
        end
    end

    // OK: complete TX
    //_printf("[client] <= complete...\n");
    do
        vector[] byte bytes;

        // <= NONCE
        do
            vector[] byte nonce = [] .. [[ G(tcp).tx.nonce ]];
            bytes = bytes..nonce;
            //_printf("[client] <= TIMESTAMP = %X\n", timestamp);
        end

        // <= TX_BACK_HASH
        vector[HASH_BYTES] byte tx_back_hash = [] .. [[ G(tcp).tx.back_hash ]];
        bytes = bytes..tx_back_hash;
        [[
            --print('[client] <= TX_BACK_HASH')
            --print(tostring2(G(tcp).tx.back_hash))
        ]]

        // <= TX_PAYLOAD
        vector[] byte tx_payload = [] .. [[ G(tcp).tx.payload ]];
        bytes = bytes..tx_payload;

        // <= PoS: TODO
        var byte pos_ = 0xEE;
        bytes = bytes..[pos_];
        //_printf("TODO: POS generate!\n");

        await UV_TCP_Write(&tcp, &bytes);
    end

    escape _ERR_NONE;
end

code/await Message10_send (var& _uv_tcp_t tcp) -> int
do
    ///////////////////////////////////////////////////////////////////////////
    // HEADER
    ///////////////////////////////////////////////////////////////////////////

    // <= MESSAGE
    // <= CHAIN_LEN
    // <= CHAIN_KEY
    // <= CHAIN_ZEROS
    // TODO: <= CHAIN_LIMITS
    do/_
        // <= MESSAGE
        vector[] byte bytes = [MESSAGE_MAGIC_0, MESSAGE_MAGIC_1, 1, 0];

        // <= CHAIN_LEN
        // <= CHAIN_KEY
        // <= CHAIN_ZEROS
        do
            [[ chain = APP.chains[G(tcp).block.chain_id] ]];
            vector[] byte chain_key   = [] .. [[ chain.key ]];
            var int    chain_zeros = [[ chain.zeros ]];
            var u32    chain_len   = [[ string.len(chain.key) ]];
            _ceu_dbg_assert(chain_len<CHAIN_KEY_BYTES);
            bytes = bytes..[chain_zeros,chain_len as byte]..chain_key;
        end

        await UV_TCP_Write(&tcp, &bytes);

        // => ACK-header
        do/_
            vector[1] byte recv;
            var&? UV_Stream_Read reader = spawn UV_TCP_Read(&tcp,&recv);
            await UV_Stream_ReadUntil(&reader!, 1);
            var int ret = recv[0];

            _dbg_tcp(0, &&tcp, "client", "=> ACK-header = %d", ret);

            if ret == _MESSAGE10_NOTSUB then
                escape ret;
            else
                // OK: proceed to BLOCKS
            end
        end
    end

    ///////////////////////////////////////////////////////////////////////////
    // BLOCKS
    ///////////////////////////////////////////////////////////////////////////
    var int i;
    loop i do
        // <= BLOCK_HASH
        // <= BLOCK_TXS_N
        do
            vector[] byte bytes;

            // <= BLOCK_HASH
            vector[HASH_BYTES] byte block_hash = [] .. [[ G(tcp).block.hash ]];
            bytes = bytes..block_hash;
            vector[] byte str = [] .. [[ tostring2(G(tcp).block.hash) ]];
            _dbg_tcp(0, &&tcp, "client", "<= BLOCKS[%d] : %s", i, &&str[0]);

            // <= BLOCK_TXS_N
            var u32 txs_n = [[ #G(tcp).block.txs ]];
            _ceu_vector_setlen(&&bytes, $bytes+sizeof(u32), 1);
            PUT_NETWORK_U32(bytes, HASH_BYTES, txs_n);

            await UV_TCP_Write(&tcp, &bytes);
        end

        // => ACK-block
        do
            vector[1] byte recv;
            var&? UV_Stream_Read reader = spawn UV_TCP_Read(&tcp,&recv);
            await UV_Stream_ReadUntil(&reader!, 1);
            var int ret = recv[0];

            _dbg_tcp(0, &&tcp, "client", "=> ACK-block = %d", ret);

            if ret == _MESSAGE10_HAVE then
                break;  // found common block
            end
        end

        ///////////////////////////////////////////////////////////////////////
        // TXS
        ///////////////////////////////////////////////////////////////////////
        var u32 txs_n = [[ #G(tcp).block.txs ]];
        _dbg_tcp(0, &&tcp, "client", "<= %d txs", txs_n);
        var u32 j;
        loop j in [0 -> txs_n[ do
            var int err = await Message10_tx_send(&tcp,j);
            if err != _ERR_NONE then
                escape err;
            end
        end

        // next block
        var bool has = [[ G(tcp).block.tail_hash ~= nil ]];
        if not has then
            escape _ERR_REMOTE_BUG_OR_MALICIOUS; // "genesis" always HAVE
        end
        [[ G(tcp).block = assert(APP.blocks[G(tcp).block.tail_hash]) ]];
    end

    escape _ERR_NONE;
end

code/await PeerSend (void) -> int
    // [[ ARGS = { peer=?, block=? } ]]
do

{CLIENTS_ALIVE++;}
do finalize with
    {CLIENTS_ALIVE--;}
end

    vector[] byte ip   = [] .. [[ ARGS.peer.host[1] ]];
    var      int  port = [[ ARGS.peer.host[2] ]];
    _dbg(2, "client:%p | connecting to %s:%d", {&_ceu_mem}, &&ip[0], port);

    var&? UV_TCP_Connect c = spawn UV_TCP_Connect(&&ip[0], port);

    [[
        G(c!.tcp) = {
            block = ARGS.block,
        }
    ]];

    var bool is_10 = [[ G(c!.tcp).block~=nil and G(c!.tcp).block.id=='1.0' ]];
    // ...

    do finalize with
        _dbg(2, "client:%p | disconnected from %s:%d", {&_ceu_mem}, &&ip[0], port);
    end
    var int? err =
        watching c do
            await c!.ok;
            _dbg(2, "client:%p | connected to %s:%d", {&_ceu_mem}, &&ip[0], port);
            var int err_ = _ERR_NONE;
            if is_10 then
                err_ = await Message10_send(&c!.tcp);
            else
                // ...
                err_ = _ERR_MESSAGE;
            end
            if err_ != _ERR_NONE then
                _dbg(3, "client:%p | %s", {&_ceu_mem}, _uv_strerror(err_));
#ifdef FREECHAINS_NO_MALICIOUS
                _ceu_dbg_assert(0);
#endif
            end
            escape err_;
        end;
    escape err!;
end

code/await Client (var& UV_TCP_Server_Data shared) -> int
    // [[ ARGS = { chain=?, block=? } ]]
do
    [[ THIS = ARGS ]];

    // LOCK: only one "send" per chain
    var bool is_locked = [[ THIS.chain.send_is_locked ]];
    if is_locked then
        loop do
            par/or do
                await shared.unlock;
            with
                await 1s;
            end
            is_locked = [[ THIS.chain.send_is_locked ]];
            if not is_locked then
                break;
            end
        end
    end

#ifdef OLD
    [[ THIS.chain.send_is_locked = true ]];
#endif
    do finalize with
        [[ THIS.chain.send_is_locked = false ]];
        emit shared.unlock;
    end

    var int ps = [[#APP.client.peers]];
    var int ps_ok = 0;
    var int i;
    pool[] PeerSend peers;
    loop i in [0 -> ps[ do
        [[
            peer = APP.client.peers[@(i+1)]
            ok = false
            for _, chain in pairs(peer.chains) do
                if chain.key==THIS.chain.key and
                   chain.zeros<=THIS.chain.zeros then
                    ok = true
                    break
                end
            end
        ]];
        var bool ok_ = [[ ok ]];
        if ok_ then
            ps_ok = ps_ok + 1;
            [[
                ARGS = {
                    peer  = peer,
                    --block = THIS.block,
                    block = APP.blocks[THIS.chain.head_hash],
                }
            ]];
            var&? PeerSend p = spawn PeerSend() in peers;
            _ceu_dbg_assert(p?);
        end
    end
    _dbg(0, "client:%p | broadcasting messages to %d peer(s)", {&_ceu_mem}, ps_ok);
    var&? PeerSend p;
    loop p in peers do
        await p;
        //_dbg(0, "client:%p | peer %d", {&_ceu_mem}, err);
    end
    _dbg(0, "client:%p | broadcasts OK", {&_ceu_mem});

    escape _ERR_NONE;   // trasmitted messages
end

code/await ClientMessages (var& UV_TCP_Server_Data shared) -> int
do
    var int ms = [[ #APP.messages ]];
    if ms == 0 then
        await FOREVER;  // server mode: don't let application terminate
    end

    // client mode: terminates

    [[
        -- id = 1.0
        block = {
            id        = nil,
            chain_id  = nil,
            txs       = { },
            hash      = nil,
            up_hash   = nil,
            tail_hash = nil,
        }
    ]]
    do finalize with
        [[ APP.messages = {} ]];
    end

    var bool is_10 = [[ APP.messages[1].id=='1.0' ]];

    var int i;
    loop i in [0 -> ms[ do
        [[
            msg = APP.messages[@i+1]
            assert(type(msg)=='table')
            assert(msg.id == APP.messages[1].id)    -- all must be the same
        ]];

        if is_10 then
            [[
                block.id = '1.0'

                assert(type(msg.chain)=='table')

                chain = assert( GG.chain_parse_get(msg.chain) )
                if (@i) == 0 then
                    block.chain_id = chain.id
                else
                    assert(chain.id == block.chain_id)
                end

                head_hash = chain.head_hash
                txs_back  = APP.blocks[head_hash].txs

                block.txs[#block.txs+1] = {
                    nonce     = nil,
                    back_hash = txs_back[#txs_back],
                    payload   = msg.payload,
                }
            ]];
        end
    end

    if is_10 then
        [[ ARGS = { block=block } ]];
        var int ret = await BlockHash(SourceBlockHash.New());
                        // returns [[ ARGS = { block=block } ]];
        _ceu_dbg_assert(ret == _ERR_NONE);
        [[
            block = ARGS.block
            chain = APP.chains[block.chain_id]

            -- last thing of BlockHash, no await in between
            assert(block.tail_hash == chain.head_hash)

            APP.blocks[chain.head_hash].up_hash = block.hash
            chain.head_hash = block.hash

            local chain = assert(APP.chains[ARGS.block.chain_id])
            ARGS = {
                block = assert(APP.blocks[chain.head_hash]),
                chain = chain,
            }
        ]];
        await Client(&shared);
    else
        _ceu_dbg_assert(0);  // message not supported
    end

    escape _ERR_NONE;
end

#endif
