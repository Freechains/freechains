#ifndef _CLIENT_CEU
#define _CLIENT_CEU

#include "sodium.ceu"

class Message10_prepare with
    var Message& msg;
    function (Message& msg)=>Message10_prepare build;
do
    function (Message& msg)=>Message10_prepare build do
        this.msg = &msg;
    end

    // => MESSAGE
    do
        var int major = [[ MSG.id_t.major ]];
        var int minor = [[ MSG.id_t.minor ]];
        this.msg.bytes = []..this.msg.bytes..
                         [MESSAGE_MAGIC_0, MESSAGE_MAGIC_1, major, minor];
    end

    // => CHAIN_SIGNED?
    // => CHAIN_LEN
    // => CHAIN_KEY
    var bool chain_signed = false;
    var char[] chain_key;
    do
        chain_signed = [[ MSG.chain.signed ]];
        chain_key    = [[ MSG.chain.key ]];

        var int chain_len = [[ string.len(MSG.chain.key) ]];
        _assert(chain_len>=0 and chain_len<CHAIN_KEY_BYTES);

        var u8 chain = (chain_len | (chain_signed<<7));
        this.msg.bytes = []..this.msg.bytes..[chain]..chain_key;
    end

    // => BLOCK_HASH (async/thread)
    var char[HASH_BYTES] tail_hash = [[ MSG.chain.config[@chain_signed].heads[
                                            MSG.chain.zeros
                                        ] ]];
    var char[]           payload   = [[ MSG.payload ]];
    var u32              nonce     = 0;
    do
        // calculate nonce for the leading zeros
        var char[HASH_BYTES] block_hash;
        var char[] plain =
            [ 0,0,0,0 ]      ..     // PoW nonce
            [ chain_signed ] ..
            chain_key        ..
            tail_hash        ..     // BACK_HASH (immutable)
            payload          ;
        var int ms = 0;
        par/or do
            every 100ms do
                ms = ms + 100;
                _printf(".");
                _fflush(_stdout);
            end
        with
            async/thread (plain,block_hash,nonce) do
                var int zeros_wanted = [[ MSG.chain.zeros ]];
                var int zeros_found  = 0;

                $block_hash := HASH_BYTES;
                loop do
                    _crypto_generichash((_byte&&)(_char&&)&&block_hash, HASH_BYTES,
                                        (_byte&&)(_char&&)&&plain, $plain,
                                        null, 0);
                    zeros_found = _leading_zeros((_char&&)&&block_hash, $block_hash);
                    if zeros_found >= zeros_wanted then
                        break;
                    end
                    nonce = nonce + 1;
                    PUT_NETWORK_U32(plain, 0, nonce);
                end
            end
        end
        _printf("\n[client] BLOCK_HASH = %dms\n", ms);
        this.msg.bytes = []..this.msg.bytes..block_hash;
    end

    this.msg.offs = []..this.msg.offs..[$this.msg.bytes];

    //////////////////////////////////////////////////////////////////////////

    // => PoW
    do
        PUT_NETWORK_U32(this.msg.bytes, $this.msg.bytes, nonce);
    end

    // => PoS
    do
        var u8 pos = 0xEE;              // TODO
        this.msg.bytes = []..this.msg.bytes..[pos];
    end

    // => BACK_HASH (immutable, see above)
    // => TAIL_HASH (mutable in further forwards)
    do
        // TODO: on creation is not required
        this.msg.bytes = []..this.msg.bytes..tail_hash; // BACK_HASH
        this.msg.bytes = []..this.msg.bytes..tail_hash; // TAIL_HASH
    end

    // => PAYLOAD_LEN
    // => PAYLOAD
    do
        PUT_NETWORK_U32(this.msg.bytes, $this.msg.bytes, $payload);
        this.msg.bytes = []..this.msg.bytes..payload;
    end

    this.msg.offs = []..this.msg.offs..[$this.msg.bytes];

    escape _ERR_NONE;
end

interface PeerListener with
    event int ok;
end

class PeerSend with
input:
    var int peer_i;
    var Message&      msg;
    var PeerListener& listener;

    function (int i, Message& msg, PeerListener& listener)=>PeerSend build;
do
    function (int i, Message& msg, PeerListener& listener)=>PeerSend build do
        this.peer_i   = i;
        this.msg      = &msg;
        this.listener = &listener;
    end

    var char[] ip   = [[ APP.client.peers[@this.peer_i][1] ]];
    var int    port = [[ APP.client.peers[@this.peer_i][2] ]];
    _printf("[client] Connecting to %s:%d.\n", (_char&&)&&ip, port);
    var UV_TCP_Client c = UV_TCP_Client.build(&ip, port);
    var int status = await c.ok;

    if status == 0 then
        _printf("[client] Connected to %s:%d.\n", (_char&&)&&ip, port);
        watching c do
            var u32 starting = 0;
            loop i in $this.msg.offs do
                // => offs[i]
                var u32 excluding = this.msg.offs[i];
                do UV_Stream_Write.build2(&_UV_STREAM_ALIAS(c.tcp),
                                          &this.msg.bytes,
                                          starting, excluding);

                // last ACK is never sent, so don't await below
                if i == $this.msg.offs then
                    _assert(excluding == $this.msg.bytes);
                    break;
                end

                // <= OK?
                var int ok = 0;
                do
                    var byte[] recv;
                    var UV_Stream_Read r = UV_Stream_Read.build(&_UV_STREAM_ALIAS(c.tcp),&recv);
                    AWAIT_UNTIL(r,1);
                    _assert(r.next >= 1);
                    if r.next > 1 then
                        escape _ERR_EXTRA_BYTES;
                    end
                    ok = recv[0];
                end
                starting = excluding;
            end
        end
        escape _ERR_NONE;
    end

    _printf("[client] Diconnected from %s:%d.\n", (_char&&)&&ip, port);
    escape _ERR_DISCONNECTED;
end

class PeersSend with
    interface PeerListener;
input:
    var Message& msg;

    function (Message& msg)=>PeersSend run;
do
    function (Message& msg)=>PeersSend run do
        this.msg = &msg;
    end

    _printf("[client] Broadcasting message...\n");
    var int n = [[#APP.client.peers]];
    loop i in n do
        spawn PeerSend.build(i+1, &this.msg, &this);
    end
    loop i in n do
        var int err = await this.ok;
        _printf("[client]\tpeer %d\n", err);
    end
    _printf("[client] Broadcast OK!\n");

    escape _ERR_NONE;
end

class Client with
do
    var int ni = [[ #APP.messages ]];

    loop i in ni do
        [[ MSG = APP.messages[@i+1] ]];
        var Message msg;
        var bool is_10 = [[ MSG.id=='1.0' ]];
        if is_10 then
            var int err = do Message10_prepare.build(&msg);
            _assert(err == _ERR_NONE);
        else
            _assert(0);  // message not supported
        end
        do PeersSend.run(&msg);
    end

    escape _ERR_NONE;
end

#endif
