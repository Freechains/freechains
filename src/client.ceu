#ifndef _CLIENT_CEU
#define _CLIENT_CEU

class Message10_tx_send with
    var _uv_tcp_t& tcp;
    var int        i;
    function (_uv_tcp_t& tcp, int i)=>Message10_tx_send run;
do
    function (_uv_tcp_t& tcp, int i)=>Message10_tx_send run do
        this.tcp = &tcp;
        this.i   = i;
    end

    // <= TX_HASH
    // <= TX_LEN
    do
        [[
            tx_hash   = G(tcp).block.txs[@this.i+1]
            G(tcp).tx = assert(APP.txs[tx_hash])
            --print('[client] <= txs['..(@this.i+1)..']', string.len(G(tcp).tx.payload))
            --print(tostring2(G(tcp).tx.hash))
        ]];
        var u32    payload_bytes = [[ string.len(G(tcp).tx.payload) ]];
        var char[] bytes         = [[ G(tcp).tx.hash ]];
        PUT_NETWORK_U32(bytes, HASH_BYTES, payload_bytes);
        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

        // => ACK-tx
        do
            var byte[1] recv;
            var UV_Stream_Read reader =
                    UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp),&recv);
            do UV_Stream_ReadUntil.run(&reader, 1);
            var int err = recv[0];

            //_printf("[client] => ACK-tx = %d\n", err);
            if err == _MESSAGE10_HAVE then
                escape _ERR_NONE;   // next TX (not an error)
            end
        end
    end

    // OK: complete TX
    //_printf("[client] <= complete...\n");
    do
        var byte[] bytes;

        // <= NONCE
        do
            var char[] nonce = [[ G(tcp).tx.nonce ]];
            bytes = []..bytes..nonce;
            //_printf("[client] <= TIMESTAMP = %X\n", timestamp);
        end

        // <= TX_BACK_HASH
        var char[HASH_BYTES] tx_back_hash = [[ G(tcp).tx.back_hash ]];
        bytes = []..bytes..tx_back_hash;
        [[
            --print('[client] <= TX_BACK_HASH')
            --print(tostring2(G(tcp).tx.back_hash))
        ]]

        // <= TX_PAYLOAD
        var char[] tx_payload = [[ G(tcp).tx.payload ]];
        bytes = []..bytes..tx_payload;

        // <= PoS: TODO
        var u8 pos = 0xEE;
        bytes = []..bytes..[pos];
        //_printf("TODO: POS generate!\n");

        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);
    end

    escape _ERR_NONE;
end

class Message10_send with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Message10_send run;
do
    function (_uv_tcp_t& tcp)=>Message10_send run do
        this.tcp = &tcp;
    end

    ///////////////////////////////////////////////////////////////////////////
    // HEADER
    ///////////////////////////////////////////////////////////////////////////

    // <= MESSAGE
    // <= CHAIN_LEN
    // <= CHAIN_KEY
    // <= CHAIN_ZEROS
    // TODO: <= CHAIN_LIMITS
    do
        // <= MESSAGE
        var byte[] bytes = [MESSAGE_MAGIC_0, MESSAGE_MAGIC_1, 1, 0];

        // <= CHAIN_LEN
        // <= CHAIN_KEY
        // <= CHAIN_ZEROS
        do
            [[ chain = APP.chains[G(tcp).block.chain_id] ]];
            var char[] chain_key   = [[ chain.key ]];
            var int    chain_zeros = [[ chain.zeros ]];
            var u32    chain_len   = [[ string.len(chain.key) ]];
            _assert(chain_len<CHAIN_KEY_BYTES);
            bytes = []..bytes..[chain_zeros,(u8)chain_len]..chain_key;
        end

        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);

        // => ACK-header
        do
            var byte[1] recv;
            var UV_Stream_Read reader =
                    UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp),&recv);
            do UV_Stream_ReadUntil.run(&reader, 1);
            var int ret = recv[0];

            _dbg_tcp(0, &&this.tcp, "client", "=> ACK-header = %d", ret);

            if ret == _MESSAGE10_NOTSUB then
                escape ret;
            else
                // OK: proceed to BLOCKS
            end
        end
    end

    ///////////////////////////////////////////////////////////////////////////
    // BLOCKS
    ///////////////////////////////////////////////////////////////////////////

    loop i do
        // <= BLOCK_HASH
        // <= BLOCK_TXS_N
        var int port = _ceu_uv_tcp_getpeerport(&&this.tcp);
        do
            var byte[] bytes;

            // <= BLOCK_HASH
            var char[HASH_BYTES] block_hash = [[ G(tcp).block.hash ]];
            bytes = []..bytes..block_hash;
            var char[] str = [[ tostring2(G(tcp).block.hash) ]];
            _dbg_tcp(0, &&this.tcp, "client", "<= BLOCKS[%d] : %s", i, (_char&&)&&str);

            // <= BLOCK_TXS_N
            var u32 txs_n = [[ #G(tcp).block.txs ]];
            PUT_NETWORK_U32(bytes, $bytes, txs_n);

            do UV_Stream_Write.build(&_UV_STREAM_ALIAS(this.tcp), &bytes);
        end

        // => ACK-block
        do
            var byte[1] recv;
            var UV_Stream_Read reader =
                    UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp),&recv);
            do UV_Stream_ReadUntil.run(&reader, 1);
            var int ret = recv[0];

            _dbg_tcp(0, &&this.tcp, "client", "=> ACK-block = %d", ret);

            if ret == _MESSAGE10_HAVE then
                break;  // found common block
            end
        end

        ///////////////////////////////////////////////////////////////////////
        // TXS
        ///////////////////////////////////////////////////////////////////////
        var u32 txs_n = [[ #G(tcp).block.txs ]];
        _dbg_tcp(0, &&tcp, "client", "<= %d txs", txs_n);
        loop j in txs_n do
            var int err = do Message10_tx_send.run(&tcp,j);
            if err != _ERR_NONE then
                escape err;
            end
        end

        // next block
        var bool has = [[ G(tcp).block.tail_hash ~= nil ]];
        if not has then
            escape _ERR_REMOTE_BUG_OR_MALICIOUS; // "genesis" always HAVE
        end
        [[ G(tcp).block = assert(APP.blocks[G(tcp).block.tail_hash]) ]];
    end

    escape _ERR_NONE;
end

interface PeerListener with
    event int ok;
end

class PeerSend with
    // [[ ARGS = { peer=?, block=? } ]]
input:
    var PeerListener& client;

    function (PeerListener& client)=>PeerSend run;
do
    function (PeerListener& client)=>PeerSend run do
        this.client = &client;
    end

    var char[] ip   = [[ ARGS.peer.host[1] ]];
    var int    port = [[ ARGS.peer.host[2] ]];
    _dbg(2, "client | connecting to %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Client c = UV_TCP_Client.build(&ip, port);

    [[
        G(c.tcp) = {
            block = ARGS.block,
        }
    ]];

    var bool is_10 = [[ G(c.tcp).block~=nil and G(c.tcp).block.id=='1.0' ]];
    // ...

    var int err =
    do
        var int err_ = await c.ok;
        if err_ != _ERR_NONE then
            escape err_;
        end

        _dbg(2, "client | connected to %s:%d", (_char&&)&&ip, port);
        watching err_ in c do
            err_ = _ERR_NONE;
            if is_10 then
                err_ = do Message10_send.run(&c.tcp);
            else
                // ...
                err_ = _ERR_MESSAGE;
            end
            escape err_;
        end
        escape err_;
// TODO: usar erro de c
        //escape _ERR_DISCONNECTED;
    end;

    _dbg(2, "client | disconnected from %s:%d", (_char&&)&&ip, port);
    if err != _ERR_NONE then
        _dbg(2, "client | %s", _uv_strerror(err));
    end
    emit client.ok => err;
    escape err;
end

class Client with
    interface PeerListener;
    // [[ ARGS = { chain=?, block=? } ]]
do
    [[ G(this) = ARGS ]];

    // LOCK: only one "send" per chain
    do
        var bool is_locked = [[ G(this).chain.send_is_locked ]];
        if is_locked then
            loop do
                par/or do
                    await global:send_chain_unlocked;
                with
                    await 1s;
                end
                is_locked = [[ G(this).chain.send_is_locked ]];
                if not is_locked then
                    break;
                end
            end
        end
        [[ G(this).chain.send_is_locked = true ]];
    end

// TODO: primitive "lock"
do
#if 0
    lock X do
        finalize with
            ...
        end
        ...
    end
#endif

    finalize with
        //var bool is_locked = [[ G(this).chain.send_is_locked ]];
        //_assert(not is_locked);
        [[ G(this).chain.send_is_locked = false ]];
    end

    var int ps = [[#APP.client.peers]];
    var int ps_ok = 0;
    loop i in ps do
        [[
            peer = APP.client.peers[@(i+1)]
            ok = false
            for _, chain in pairs(peer.chains) do
                if chain.key==G(this).chain.key and
                   chain.zeros<=G(this).chain.zeros then
                    ok = true
                    break
                end
            end
        ]];
        var bool ok_ = [[ ok ]];
        if ok_ then
            ps_ok = ps_ok + 1;
            [[
                ARGS = {
                    peer  = peer,
                    block = G(this).block,
                }
            ]];
            var PeerSend&&? p = spawn PeerSend.run(&this);
            _assert(p! != null);
        end
    end
    _dbg(0, "client | broadcasting messages to %d peer(s)", ps_ok);
    loop i in ps_ok do
        var int err = await this.ok;
        _dbg(0, "client | peer %d", err);
    end
    _dbg(0, "client | broadcasts OK");

    // UNLOCK "send"
    [[ G(this).chain.send_is_locked = false ]];
end
    emit global:send_chain_unlocked;

    escape _ERR_NONE;   // trasmitted messages
end

class Client10 with
    // [[ ARGS = { block=? } ]]
do
    [[
        ARGS = {
            chain = assert(APP.chains[ARGS.block.chain_id]),
            block = ARGS.block,
        }
    ]];
    do Client;
end

class ClientMessages with
do
    var int ms = [[ #APP.messages ]];
    if ms == 0 then
        await FOREVER;  // server mode: don't let application terminate
    end

    // client mode: terminates

    [[
        -- id = 1.0
        block = {
            id        = nil,
            chain_id  = nil,
            txs       = { },
            hash      = nil,
            up_hash   = nil,
            tail_hash = nil,
        }
    ]]
    finalize with
        [[ APP.messages = {} ]];
    end

    var bool is_10 = [[ APP.messages[1].id=='1.0' ]];

    loop i in ms do
        [[
            msg = APP.messages[@i+1]
            assert(type(msg)=='table')
            assert(msg.id == APP.messages[1].id)    -- all must be the same
        ]];

        if is_10 then
            [[
                block.id = '1.0'

                assert(type(msg.chain)=='table')

                chain = assert( GG.chain_parse_get(msg.chain) )
                if (@i) == 0 then
                    block.chain_id = chain.id
                else
                    assert(chain.id == block.chain_id)
                end

                head_hash = chain.head_hash
                txs_back  = APP.blocks[head_hash].txs

                block.txs[#block.txs+1] = {
                    nonce     = nil,
                    back_hash = txs_back[#txs_back],
                    payload   = msg.payload,
                }
            ]];
        end
    end

    if is_10 then
        [[ ARGS = { block=block } ]];
        var int ret = do BlockHash with
            this.source = SourceBlockHash.NEW();
        end;
        _assert(ret == _ERR_NONE);
        [[
            block = ARGS.block
            chain = APP.chains[block.chain_id]
            APP.blocks[chain.head_hash].up_hash = block.hash
            chain.head_hash = block.hash
        ]]

        do Client10;
    else
        _assert(0);  // message not supported
    end

    escape _ERR_NONE;
end

#endif
