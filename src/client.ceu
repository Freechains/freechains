#ifndef _CLIENT_CEU
#define _CLIENT_CEU

interface Message with
    var byte[] bytes;
    var u32[]  offs;
    var int    err;
end

class Message_0_0_prepare with
    interface Message;
    var int err = _ERR_NONE;
do
    // => MESSAGE
    do
        var int major = [[ MSG.id_t.major ]];
        var int minor = [[ MSG.id_t.minor ]];
        bytes = []..bytes..[MESSAGE_MAGIC_0, MESSAGE_MAGIC_1, major, minor];
    end

    // => BC_SIGNED?
    // => BC_LEN
    // => BC_DATA
    do
        var bool bc_signed = [[ MSG.bc_signed ]];
        var int  bc_len    = [[ MSG.bc_len    ]];
        _assert(bc_len>=0 and bc_len<256);
        var u8 bc = (bc_len | (bc_signed<<7));
        bytes = []..bytes..[bc];

        if bc_len > 0 then
            var char[] bc_data = [[ MSG.bc_data ]];
            bytes = []..bytes..bc_data;
        end
    end

    // => ZEROS_N
    do
        var int zeros_n = [[ MSG.zeros_n ]];
        _assert(zeros_n>=0 and zeros_n<256);
        bytes = []..bytes..[zeros_n];
    end

    // => BLK_BACK_HASH
    // => CONTENTS_DATA_HASH
    do
        // TODO: BLK_BACK_HASH
        loop i in HASH_BYTES do
            bytes = []..bytes..[0xEE];
        end
        // TODO: CONTENTS_DATA_HASH
        loop i in HASH_BYTES do
            bytes = []..bytes..[0xEE];
        end
    end

    offs = []..offs..[$bytes];

    //////////////////////////////////////////////////////////////////////////

    // => NOUNCE
    var u8 nounce = 0;
    bytes = []..bytes..[nounce];

    // => CONTENTS_LEN
    // => CONTENTS_DATA
    var char[] contents_data = [[ MSG.contents_data ]];
    PUT_NETWORK_U32(bytes, $contents_data);
    bytes = []..bytes..contents_data;

    offs = []..offs..[$bytes];

    this.err = _ERR_NONE;
    await FOREVER;
end

interface PeerListener with
    event int ok;
end

class PeerSend with
input:
    var int i;
    var Message&      message;
    var PeerListener& listener;

    function (int i, Message& message, PeerListener& listener)=>PeerSend build;
do
    function (int i, Message& message, PeerListener& listener)=>PeerSend build do
        this.i        = i;
        this.message  = &message;
        this.listener = &listener;
    end

    var char[] ip   = [[ APP.client.peers[@this.i][1] ]];
    var int    port = [[ APP.client.peers[@this.i][2] ]];
    _printf("[client] Connecting to %s:%d.\n", (_char&&)&&ip, port);
    var UV_TCP_Client c = UV_TCP_Client.build(&ip, port);
    var int status = await c.ok;

    if status == 0 then
        _printf("[client] Connected to %s:%d.\n", (_char&&)&&ip, port);
        watching c do
            var u32 starting = 0;
            loop i in $this.message.offs do
                // => offs[i]
                var u32 excluding = this.message.offs[i];
                do UV_Stream_Write.build2(&_UV_STREAM_ALIAS(c.tcp),
                                          &this.message.bytes,
                                          starting, excluding);
                starting = excluding;

                // <= OK?
                var int ok = 0;
                do
                    var byte[] recv;
                    var UV_Stream_Read r = 
                    UV_Stream_Read.build(&_UV_STREAM_ALIAS(c.tcp),&recv);
                    AWAIT_UNTIL(r,1);
                    _assert(r.next >= 1);
                    if r.next > 1 then
                        escape _ERR_EXTRA_BYTES;
                    end
                    ok = recv[0];
                end
            end
        end
        escape _ERR_NONE;
    end

    _printf("[client] Diconnected from %s:%d.\n", (_char&&)&&ip, port);
    escape _ERR_DISCONNECTED;
end

class Client with
    interface PeerListener;
do
    var int n = [[ #APP.messages ]];

    loop i in n do
        [[ MSG = APP.messages[@i+1] ]];
        var Message_0_0_prepare msg;
        _assert(msg.err == _ERR_NONE);

        _printf("[client] Sending message...\n");
        var int n = [[#APP.client.peers]];
        loop i in n do
            spawn PeerSend.build(i+1, &msg, &this);
        end
        loop i in n do
            var int err = await this.ok;
            _printf("[client]\tpeer %d\n", err);
        end
        _printf("[client] Send OK!\n");
    end

    escape _ERR_NONE;
end

#endif
