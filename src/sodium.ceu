#ifndef _SODIUM_CEU
#define _SODIUM_CEU

native/nohold
    _crypto_generichash,
    _crypto_sign_detached,
    _crypto_sign_verify_detached,
    _sodium_passphrase2pwhash,
    _sodium_passphrase2keys,
    _sodium_pubpvt_decrypt,
    _sodium_pubpvt_encrypt,
    _sodium_sealed_decrypt,
    _sodium_sealed_encrypt,
    _sodium_shared_decrypt,
    _sodium_shared_encrypt,
;

#if 1
{
    ceu_assert(
        crypto_sign_ed25519_PUBLICKEYBYTES == crypto_sign_PUBLICKEYBYTES &&
        crypto_sign_ed25519_SECRETKEYBYTES == crypto_sign_SECRETKEYBYTES &&
        crypto_scalarmult_curve25519_BYTES == crypto_box_PUBLICKEYBYTES  &&
        crypto_scalarmult_curve25519_BYTES == crypto_box_SECRETKEYBYTES,
        "bug found"
    );
}
#endif

native/pre do
    ##include <sodium.h>

    int sodium_passphrase2pwhash (byte* pwhash, usize pwhash_len, byte* passphrase, usize passphrase_len)
    {
#if 1
            if (pwhash_len     < crypto_pwhash_BYTES_MIN  ||
                pwhash_len     > crypto_pwhash_BYTES_MAX  ||
                passphrase_len < crypto_pwhash_PASSWD_MIN ||
                passphrase_len > crypto_pwhash_PASSWD_MAX )
            {
                return -1;
            }
#endif

            byte salt[crypto_pwhash_SALTBYTES];
            memset(salt, 0, crypto_pwhash_SALTBYTES);

            return crypto_pwhash(pwhash, pwhash_len,
                                 passphrase, passphrase_len,
                                 salt,
                                 crypto_pwhash_OPSLIMIT_INTERACTIVE,
                                 crypto_pwhash_MEMLIMIT_INTERACTIVE,
                                 crypto_pwhash_ALG_DEFAULT);
    }

    int sodium_passphrase2keys (byte* passphrase, usize passphrase_len, byte* pub, byte* pvt)
    {
        unsigned char seed[crypto_sign_SEEDBYTES];
#if 0
        {
            ceu_assert(crypto_sign_SEEDBYTES >= crypto_generichash_BYTES, "bug found");
            int ret = crypto_generichash(seed, crypto_sign_SEEDBYTES,
                                         (unsigned char*)passphrase, passphrase_len,
                                         NULL, 0);
            ceu_assert(ret == 0, "bug found");
        }
        return crypto_sign_seed_keypair(pub, pvt, seed);
#else
        int ret = sodium_passphrase2pwhash(seed, crypto_sign_SEEDBYTES, passphrase, passphrase_len);
        if (ret != 0) {
            return ret;
        }
#if 0
        return crypto_box_seed_keypair(pub, pvt, seed);
#else
        return crypto_sign_seed_keypair(pub, pvt, seed);
#endif
#endif
    }

    int sodium_shared_encrypt (byte* buf, usize plain_len, byte* shared)
    {
        byte* nonce  = &buf[0];
        byte* cipher = &buf[crypto_secretbox_NONCEBYTES];
        byte* plain  = &buf[crypto_secretbox_NONCEBYTES+crypto_secretbox_MACBYTES];

#ifdef DETERMINISTIC
        memset(nonce, 0, crypto_secretbox_NONCEBYTES);
#else
        randombytes_buf(nonce, crypto_secretbox_NONCEBYTES);
#endif
        return crypto_secretbox_easy(cipher, plain, plain_len, nonce, shared);
    }

    int sodium_shared_decrypt (byte* buf, usize buf_len, byte* shared)
    {
        byte* nonce  = &buf[0];
        byte* cipher = &buf[crypto_secretbox_NONCEBYTES];
        byte* plain  = &buf[crypto_secretbox_NONCEBYTES+crypto_secretbox_MACBYTES];

        return crypto_secretbox_open_easy(plain, cipher, buf_len-crypto_secretbox_NONCEBYTES,
                                          nonce, shared);
    }

    int sodium_sealed_encrypt (byte* buf, usize plain_len, byte* pub)
    {
        byte* seal  = &buf[0];
        byte* plain = &buf[crypto_box_SEALBYTES];

        byte pub_[crypto_box_PUBLICKEYBYTES];
        int ret = crypto_sign_ed25519_pk_to_curve25519(pub_, pub);
        if (ret != 0) { return ret; }
        return crypto_box_seal(seal, plain, plain_len, pub_);
    }

    int sodium_sealed_decrypt (byte* buf, usize buf_len, byte* pub, byte* pvt)
    {
        byte* seal  = &buf[0];
        byte* plain = &buf[crypto_box_SEALBYTES];

        byte pub_[crypto_box_PUBLICKEYBYTES];
        byte pvt_[crypto_box_SECRETKEYBYTES];
        int ret = crypto_sign_ed25519_pk_to_curve25519(pub_, pub);
        if (ret != 0) { return ret; }
        ret = crypto_sign_ed25519_sk_to_curve25519(pvt_, pvt);
        if (ret != 0) { return ret; }

        return crypto_box_seal_open(plain, seal, buf_len, pub_, pvt_);
    }

    int sodium_pubpvt_encrypt (byte* buf, usize plain_len, byte* pub, byte* pvt)
    {
        byte* nonce  = &buf[0];
        byte* cipher = &buf[crypto_box_NONCEBYTES];
        byte* plain  = &buf[crypto_box_NONCEBYTES+crypto_box_MACBYTES];

        byte pub_[crypto_box_PUBLICKEYBYTES];
        byte pvt_[crypto_box_SECRETKEYBYTES];
        int ret = crypto_sign_ed25519_pk_to_curve25519(pub_, pub);
        if (ret != 0) { return ret; }
        ret = crypto_sign_ed25519_sk_to_curve25519(pvt_, pvt);
        if (ret != 0) { return ret; }

#ifdef DETERMINISTIC
        memset(nonce, 0, crypto_box_NONCEBYTES);
#else
        randombytes_buf(nonce, crypto_box_NONCEBYTES);
#endif

        return crypto_box_easy(cipher, plain, plain_len, nonce, pub_, pvt_);
    }

    int sodium_pubpvt_decrypt (byte* buf, usize buf_len, byte* pub, byte* pvt)
    {
        byte* nonce  = &buf[0];
        byte* cipher = &buf[crypto_box_NONCEBYTES];
        byte* plain  = &buf[crypto_box_NONCEBYTES+crypto_box_MACBYTES];

        byte pub_[crypto_box_PUBLICKEYBYTES];
        byte pvt_[crypto_box_SECRETKEYBYTES];
        int ret = crypto_sign_ed25519_pk_to_curve25519(pub_, pub);
        if (ret != 0) { return ret; }
        ret = crypto_sign_ed25519_sk_to_curve25519(pvt_, pvt);
        if (ret != 0) { return ret; }

        return crypto_box_open_easy(plain, cipher, buf_len-crypto_box_NONCEBYTES,
                                    nonce, pub_, pvt_);
    }
end

#endif

