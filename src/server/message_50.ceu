#ifndef _MESSAGE50_CEU
#define _MESSAGE50_CEU

/*
 * CONFIGURE: get or set configuration
 *
 *  msg = {
 *      config = nil,   -- or a table
 *      config = {,     -- or nil
 *          ...
 *      }
 *
 *  ret = {
 *      ...
 *  }
 */

// echo -n -e "PS\x05\x00\x00\x00\x00\x03nil" | nc localhost 8500
// echo -n -e "PS\x05\x00\x00\x00\x00\x09{dir='/'}" | nc localhost 8500

// => LEN
await UV_Stream_Read_N(&outer.tcp, sizeof(u32));
var u32 len = GET_BE32TOH(outer.tcp.buffer,0);
$outer.tcp.buffer = $outer.tcp.buffer - sizeof(u32);
_dbg_tcp(2, &&outer.tcp.handle, "server", "LEN = %d", len);

// => MSG
await UV_Stream_Read_N(&outer.tcp, (len as usize));
//outer.tcp.buffer = outer.tcp.buffer..[0];
//_dbg(3, "server | MESSAGE 50 | %s", &&outer.tcp.buffer[0]);
[[
    --print('###', @outer.tcp.buffer)
    msg = assert(load('return '..@outer.tcp.buffer))()
    --print('>>>', FC.tostring(msg,'plain'))

    if msg ~= nil then
        CFG = msg
        FC.cfg_write()
    end
]]

var bool is_get = [[ msg==nil ]];
if is_get then
    // <= CFG
    //[[ print('RET', FC.tostring(CFG,'plain')) ]];
    outer.tcp.buffer = []..[[ FC.tostring(CFG,'plain') ]];
    await UV_Stream_Write_N(&outer.tcp,_);

else
    // TODO: broadcasts everything if anything at all changes
    // could broadcast only a chain with changing peers

    // broadcast all chains to all peers
    [[
        THIS = {
            chains = {},
        }
        for _, chain in pairs(CFG.chains) do
            THIS.chains[#THIS.chains+1] = chain
        end
    ]]
    var int n = [[ #THIS.chains ]];
    var int i;
    loop i in [1 -> n] do
        [[
            cfg = THIS.chains[@i]
        ]]
        var int zeros = [[cfg.zeros]];
        var int j;
        //loop j in [zeros -> 255] do
        loop j in [zeros -> 0] do
            [[
                chain = assert(FC.chains[cfg.key][@j])
                has = (chain.head ~= chain.base)
                ARGS = {
                    chain = chain,
                }
            ]]
            var bool has = [[ has ]];
// TODO: how not to send all chains in all levels? Even if head=base? (I don't really know if they are empty in other peers.)
            //if has then
                emit outer.shared.go_client_10_pos(0);
            //end
        end
    end

end

#endif
