#ifndef _MESSAGE20_CEU
#define _MESSAGE20_CEU

/*
 * GET:
 *
 *  msg = {
 *      chain = {
 *          key   = <string>,
 *          zeros = <number>,
 *      }
 *      node = <hash>,     -- or pub or nothing
 *      pub  = <hash>,     -- or node or nothing
 *
 *      // TODO
 *      from=1,   to=10   or
 *      from=-10, to=-1   or
 *      from=<date>, to=<date>
 *  }
 *
 *  ret = {
 *      hash      = <hash>,
 *      prv       = <hash>,
 *      timestamp = <number>,
 *      nonce     = <number>,
 *      removal   = <has>,      -- or pub
 *      pub       = {           -- or removal
 *          hash      = <hash>,
 *          timestamp = <number>,
 *          nonce     = <number>,
 *          payload   = <string>,
 *      },
 *  }
 */

// echo -n -e "PS\x02\x00\x00\x00\x00\x18{chain={key='',zeros=0}}" | nc localhost 8500

// => LEN
await UV_Stream_Read_N(&outer.tcp, sizeof(u32));
var u32 len = GET_BE32TOH(outer.tcp.buffer,0);
$outer.tcp.buffer = $outer.tcp.buffer - sizeof(u32);
_dbg_tcp(2, &&outer.tcp.handle, "server", "LEN = %d", len);

// => MSG
await UV_Stream_Read_N(&outer.tcp, (len as usize));
//outer.tcp.buffer = outer.tcp.buffer..[0];
//_dbg(3, "server | MESSAGE 20 | %s", &&outer.tcp.buffer[0]);
[[
    assert(load('msg = '..@outer.tcp.buffer))()
    --print('>>>', FC.tostring(msg,'plain'))

    chain = assert(FC.chains[msg.chain.key][msg.chain.zeros])
    node = chain.head

    nodes = msg.node and { FC.hex2hash(msg.node) }
    --msg.pub  = msg.pub  and error'TODO' and FC.hex2hash(msg.pub)

    if not nodes then
        nodes = {}
        for hash in pairs(chain.head) do
            nodes[#nodes+1] = hash
        end
    end

    RET = {}
]]

var int n = [[ #nodes ]];
var int i;
loop i in [1 -> n] do
    [[
        hash = nodes[@i]
        node = chain.cache[hash]
    ]]
    var bool has = [[ node ~= nil ]];
    if not has then
        continue;
    end

    [[
        ret = {
            chain     = { key=chain.key, zeros=chain.zeros },
            seq       = node.seq,
            hash      = FC.hash2hex(node.hash),
            timestamp = node.timestamp,
            nonce     = node.nonce,
            pub       = node.pub and {
                hash      = FC.hash2hex(node.pub.hash),
                timestamp = node.pub.timestamp,
                nonce     = node.pub.nonce,
                payload   = node.pub.payload,
                --removal   = node.pub.removal and FC.hash2hex(node.pub.removal.hash),
            } or nil,
        }
        for _, child in ipairs(node) do
            ret[#ret+1] = FC.hash2hex(child.hash)
        end
        RET[#RET+1] = ret
    ]]
end

// <= MSG
//[[ print('RET', FC.tostring(ret,'plain')) ]];
outer.tcp.buffer = []..[[ FC.tostring(RET,'plain') ]];
await UV_Stream_Write_N(&outer.tcp,_);

#endif
