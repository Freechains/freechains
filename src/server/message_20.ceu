#ifndef _MESSAGE20_CEU
#define _MESSAGE20_CEU

// echo -n -e "PS\x02\x00\x00\x00\x00\x18{chain={key='',zeros=0}}" | nc localhost 8500

// => LEN
await UV_Stream_Read_N(&outer.tcp, sizeof(u32));
var u32 len = GET_BE32TOH(outer.tcp.buffer,0);
$outer.tcp.buffer = $outer.tcp.buffer - sizeof(u32);
_dbg_tcp(2, &&outer.tcp.handle, "server", "LEN = %d", len);

// => MSG
await UV_Stream_Read_N(&outer.tcp, (len as usize));
//outer.tcp.buffer = outer.tcp.buffer..[0];
//_dbg(3, "server | MESSAGE 20 | %s", &&outer.tcp.buffer[0]);
[[
    assert(load('msg = '..@outer.tcp.buffer))()
    print('>>>', tostring2(msg,'plain'))

    chain = assert(FC.chains[msg.chain.key][msg.chain.zeros])
    msg = {
        hash = FC.hash2hex(chain.head.hash),
        removal = chain.head.removal and FC.hash2hex(chain.head.removal.hash),
        pub = chain.head.pub and {
            hash    = FC.hash2hex(chain.head.pub.hash),
            payload = chain.head.pub.payload,
        } or nil,
        prv = chain.head.prv and FC.hash2hex(chain.head.prv.hash) or nil,
    }
]]

// <= MSG
outer.tcp.buffer = []..[[ tostring2(msg,'plain') ]];
await UV_Stream_Write_N(&outer.tcp,_);

#endif
