#ifndef _MESSAGE60_CEU
#define _MESSAGE60_CEU

/*
 * LISTEN:
 *
 *  msg = {
 *      chain = {               -- or nil (listen all chains)
 *          key   = <string>,
 *          zeros = <number>,   -- or nil (listan all zeros)
 *      }
 *      TODO: reset
 *  }
 *
 *  ret = {
 *      hash      = <hash>,
 *      prv       = <hash>,
 *      timestamp = <number>,
 *      nonce     = <number>,
 *      --removal   = <has>,      -- or pub
 *      pub       = {           -- or removal
 *          hash      = <hash>,
 *          timestamp = <number>,
 *          nonce     = <number>,
 *          payload   = <string>,
 *      },
 *  }
 *  ...                         -- one for each new block
 */

// echo -n -e "PS\x02\x00\x00\x00\x00\x18{chain={key='',zeros=0}}" | nc localhost 8500

// => LEN
await UV_Stream_Read_N(&outer.tcp, sizeof(u32));
var u32 len = GET_BE32TOH(outer.tcp.buffer,0);
$outer.tcp.buffer = $outer.tcp.buffer - sizeof(u32);
_dbg_tcp(2, &&outer.tcp.handle, "server", "LEN = %d", len);

// => MSG
await UV_Stream_Read_N(&outer.tcp, (len as usize));
//outer.tcp.buffer = outer.tcp.buffer..[0];
//_dbg(3, "server | MESSAGE 60 | %s", &&outer.tcp.buffer[0]);
[[
    --print('>>>', FC.tostring(msg,'plain'))
    THIS = {
        msg = assert(load('return '..@outer.tcp.buffer))()
    }
]]

// TODO: may loose messages if they arrive while on Write below
    // one trail writes to buffer
    // anoter trail calls Write (must awake after first from go_client_10_pos)
loop do
    await outer.shared.ok_node;
    [[
        listen = THIS.msg.chain
        received = ARGS.chain
        if listen==nil or
           (listen.key==received.key and (listen.zeros==nil or
                                          (listen.zeros<=received.zeros)))
        then
            node = ARGS.node
            ret = {
                chain     = { key=received.key, zeros=received.zeros },
                hash      = FC.hash2hex(node.hash),
                timestamp = node.timestamp,
                nonce     = node.nonce,
                pub       = node.pub and {
                    hash      = FC.hash2hex(node.pub.hash),
                    timestamp = node.pub.timestamp,
                    nonce     = node.pub.nonce,
                    payload   = node.pub.payload,
                    --removal   = node.pub.removal and FC.hash2hex(node.pub.removal.hash),
                } or nil,
            }
            for _, child in ipairs(node) do
                ret[#ret+1] = FC.hash2hex(child.hash)
            end
        else
            ret = nil
        end
    ]]
    var bool has_ret = [[ ret~=nil ]];
    if has_ret then
        // <= MSG
        //[[ print('RET', FC.tostring(ret,'plain')) ]];
        [[ ret = FC.tostring(ret,'plain') ]];
        outer.tcp.buffer = []..[[ string.len(ret) ]]..[{'\n'}]..[[ ret ]];
        await UV_Stream_Write_N(&outer.tcp,_);
    end
end

#endif
