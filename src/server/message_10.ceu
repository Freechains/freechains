#ifndef _MESSAGE10_CEU
#define _MESSAGE10_CEU

code/await Recv_10_Header (var& UV_Stream tcp) -> none
    throws Exception.Uv, Exception.Freechains
do
    // => CHAIN_KEY_LEN
    // => CHAIN_KEY_STR
    // => CHAIN_ZEROS

    // key_len
    await UV_Stream_Read_N(&tcp, 1);
    var byte key_len = tcp.buffer[0];
    $tcp.buffer = $tcp.buffer - 1;
    _dbg_tcp(2, &&tcp.handle, "server", "CHAIN_KEY_LEN = %d", key_len);

    // key_str
    await UV_Stream_Read_N(&tcp, (key_len as usize));
    var[256] byte key_str = []..tcp.buffer;
    _dbg_tcp(2, &&tcp.handle, "server", "CHAIN_KEY_STR = %s", &&key_str[0]);
    $tcp.buffer = $tcp.buffer - (key_len as usize);

    // zeros
    await UV_Stream_Read_N(&tcp, 1);
    var byte zeros = tcp.buffer[0];
    _dbg_tcp(2, &&tcp.handle, "server", "CHAIN_ZEROS   = %d", zeros);
    $tcp.buffer = $tcp.buffer - 1;

    [[
        key   = @key_str
        zeros = @zeros
        ARGS  = {
            chain = FC.chains[key] and CFG.chains[key].zeros<=zeros and FC.chains[key][zeros] or nil
        }
    ]];

    var bool is_sub = [[ ARGS.chain ~= nil ]];
    _dbg_tcp(2, &&tcp.handle, "server", "is_sub      = %d", is_sub);
    if not is_sub then
        var Exception.Freechains.Not_Subscribed e = val Exception.Freechains.Not_Subscribed(_);
        throw e;
    end
end

code/await Recv_10_Nodes (var& UV_TCP_Server_Data shared, var& UV_Stream tcp) -> none
    throws Exception.Uv
do
    [[ THIS = { chain=ARGS.chain } ]];

    //CHAIN_LOCK(l, shared, "lock_write");

    code/await Go (none) -> none
        throws Exception.Uv
    do
        [[
            THIS = {
                chain = ARGS.chain,
            }
        ]];

        loop do
            // => n
            await UV_Stream_Read_N(&outer.tcp, 1);
            var int n = outer.tcp.buffer[0];
            $outer.tcp.buffer = $outer.tcp.buffer - 1;

            if n == 0 then
                break;
            end

            [[
                THIS.node = {
                    chain = THIS.chain,
                }
            ]];

            // => NODE_HASH
            do
                await UV_Stream_Read_N(&outer.tcp, HASH_BYTES);
                var[HASH_BYTES] byte hash;
                _ceu_vector_copy(&&hash,0, &&outer.tcp.buffer,0, HASH_BYTES);
                [[
                    THIS.node.hash = @hash;
                ]];
                $outer.tcp.buffer = $outer.tcp.buffer - HASH_BYTES;

                var[] byte str = [] .. [[ FC.tostring(THIS.node.hash) ]] .. [0];
                _dbg_tcp(3, &&outer.tcp.handle, "server", "=> NODE_HASH : %s", &&str[0]);
            end

            // => NODE[1].hash
            // => ...
            // => NODE[n].hash
            var int i;
            loop i in [1 -> n] do
                await UV_Stream_Read_N(&outer.tcp, HASH_BYTES);
                var[HASH_BYTES] byte hash;
                _ceu_vector_copy(&&hash,0, &&outer.tcp.buffer,0, HASH_BYTES);
                [[
                    prv = assert(THIS.node.chain.cache[@hash], 'expected in cache: '..FC.tostring(@hash)..' <- '..FC.tostring(THIS.node.hash))
                    THIS.node[@i] = prv
                ]];
                $outer.tcp.buffer = $outer.tcp.buffer - HASH_BYTES;

                var[] byte str = [] .. [[ FC.tostring(THIS.node[@i].hash) ]] .. [0];
                _dbg_tcp(3, &&outer.tcp.handle, "server", "=> NODE_HASH[%d] : %s", i, &&str[0]);
            end

            // => TIMESTAMP + NONCE
            do
                await UV_Stream_Read_N(&outer.tcp, 2*sizeof(u64));
                var u64 timestamp = GET_BE64TOH(outer.tcp.buffer,0);
                $outer.tcp.buffer = $outer.tcp.buffer - sizeof(u64);
                var u64 nonce = GET_BE64TOH(outer.tcp.buffer,0);
                $outer.tcp.buffer = $outer.tcp.buffer - sizeof(u64);
                [[
                    THIS.node.timestamp = @timestamp
                    THIS.node.nonce     = @nonce
                ]]
            end

            // => PUB
            do
                // => PUB_HASH?
                await UV_Stream_Read_N(&outer.tcp, HASH_BYTES);
                var[HASH_BYTES] byte pub_hash;
                _ceu_vector_copy(&&pub_hash,0, &&outer.tcp.buffer,0, HASH_BYTES);
                [[
                    pub_hash = @pub_hash
                    cache = THIS.chain.up.pubs[pub_hash]
                    THIS.node.pub = cache or {
                        hash      = pub_hash,
                        chain     = THIS.node.chain,
                        timestamp = nil,
                        nonce     = nil,
                        payload   = nil,
                    }
                ]]

                // <= PUB_HASH_ACK!
                var bool has_pub = [[ cache~=nil ]];
                if has_pub then
                    outer.tcp.buffer = [1];
                    await UV_Stream_Write_N(&outer.tcp,_);
                    escape;     // skip pub receive
                else
                    outer.tcp.buffer = [0];
                    await UV_Stream_Write_N(&outer.tcp,_);
                end

                // => TIMESTAMP + NONCE
                do
                    await UV_Stream_Read_N(&outer.tcp, 2*sizeof(u64));
                    var u64 timestamp = GET_BE64TOH(outer.tcp.buffer,0);
                    $outer.tcp.buffer = $outer.tcp.buffer - sizeof(u64);
                    var u64 nonce = GET_BE64TOH(outer.tcp.buffer,0);
                    $outer.tcp.buffer = $outer.tcp.buffer - sizeof(u64);
                    [[
                        THIS.node.pub.timestamp = @timestamp
                        THIS.node.pub.nonce     = @nonce
                    ]]
                end

                // <= LEN
                // <= PAYLOAD
                do
                    await UV_Stream_Read_N(&outer.tcp, sizeof(u32));
                    var u32 len = GET_BE32TOH(outer.tcp.buffer,0);
                    $outer.tcp.buffer = $outer.tcp.buffer - sizeof(u32);

                    await UV_Stream_Read_N(&outer.tcp, len as usize);
                    var[len] byte payload;
                    _ceu_vector_copy(&&payload,0, &&outer.tcp.buffer,0, len);
                    $outer.tcp.buffer = $outer.tcp.buffer - (len as usize);

                    var[] byte str = [] .. payload .. [0];
                    _dbg_tcp(3, &&outer.tcp.handle, "server", "=> PAYLOAD : %s", &&str[0]);

                    [[
                        THIS.node.pub.payload = @payload
                        ARGS = { pub=THIS.node.pub }
                    ]]
                    await Publication_Check();
                end
            end

            [[ ARGS = THIS ]]
            await Node_Check();
            [[
                if THIS.node.__from_cache then
                    -- maybe I already received it concurrently
                else
                    FC.head_new(THIS.node)
                end
            ]];
            [[ ARGS = { chain=THIS.chain } ]];
            emit outer.shared.go_client_10_pos(0);
        end
    end

    loop do
        await UV_Stream_Read_N(&tcp, 1);
        var int has = tcp.buffer[0];
        $tcp.buffer = $tcp.buffer - 1;
        if has == 0 then
            break;
        end

        // => HASH

        await UV_Stream_Read_N(&tcp, HASH_BYTES);
        var[HASH_BYTES] byte hash;
        _ceu_vector_copy(&&hash,0, &&tcp.buffer,0, HASH_BYTES);
        [[
            THIS.hash = @hash;
        ]];
        $tcp.buffer = $tcp.buffer - HASH_BYTES;

        var bool has = [[ THIS.chain.cache[THIS.hash] ]];
        if has then
            tcp.buffer = [1];
        else
            tcp.buffer = [0];
        end
        await UV_Stream_Write_N(&tcp,_);
        [[ ARGS = { chain=THIS.chain } ]]
        await Go();
    end
end

///////////////////////////////////////////////////////////////////////////////

code/await Send_10_Header (var& UV_Stream tcp) -> none
    // [[ ARGS = { chain={...} } ]]
    throws Exception.Uv, Exception.Freechains.Malformed
do
    [[
        THIS = {
            chain = ARGS.chain,
        }
    ]]

    ///////////////////////////////////////////////////////////////////////////
    // HEADER
    ///////////////////////////////////////////////////////////////////////////

    // <= MESSAGE
    // <= CHAIN_KEY_LEN
    // <= CHAIN_KEY_STR
    // <= CHAIN_ZEROS
    do
        tcp.buffer = [MESSAGE_MAGIC_0, MESSAGE_MAGIC_1, 0x01, 0x00];
        var u8     key_len = [[ string.len(THIS.chain.key) ]];
        var[] byte key_str = [] .. [[ THIS.chain.key ]];
        var u8     zeros   = [[ THIS.chain.zeros ]];
        _ceu_assert(key_len<CHAIN_KEY_BYTES, "bug found");
        tcp.buffer = tcp.buffer .. [key_len as byte] .. key_str .. [zeros as byte];
        await UV_Stream_Write_N(&tcp,_);
    end
end

code/await Send_10_Nodes (var& UV_Stream tcp) -> none
    // [[ ARGS = { chain={...} } ]]
    throws Exception.Uv, Exception.Freechains.Malformed
do
    ///////////////////////////////////////////////////////////////////////////
    // NODES
    ///////////////////////////////////////////////////////////////////////////

    code/await Go (none) -> none
        throws Exception.Uv
    do
        [[ THIS = ARGS ]];
        loop do
            [[
                THIS.cur = THIS.togo[#THIS.togo]
                go = false
                if THIS.cur then
                    --THIS.togo[THIS.cur] = THIS.togo[THIS.cur] + 1
                    go = true
                    for _,v in ipairs(THIS.cur) do
                        if not THIS.asked[v] then
                            go = false
                            break
                        end
                    end
                end
            ]]
            var bool go = [[ go ]];
            if not go then
                outer.tcp.buffer = [0];
                await UV_Stream_Write_N(&outer.tcp,_);
                escape;
            end

            [[
                table.remove(THIS.togo)
            ]]

            // <= n
            // <= NODE_HASH
            // <= NODE[1].hash
            // <= ...
            // <= NODE[n].hash
            // <= TIMESTAMP + NONCE
            // <= PUB
            // <=   PUB_HASH?
            // =>   PUB_HASH ACK!
            // <=   TIMESTAMP + NONCE
            // <=   LEN
            // <=   PAYLOAD
            // <= REMOVED
            // <=   TODO

            var int n = [[ #THIS.cur ]];
            _ceu_assert(n <= 255, "too many children");

            // <= n
            // <= NODE_HASH
            var[] byte str = [] .. [[ FC.tostring(THIS.cur.hash) ]] .. [0];
            _dbg_tcp(3, &&outer.tcp.handle, "client", "<= NODE_HASH : %s", &&str[0]);
            outer.tcp.buffer = [n] .. [[ THIS.cur.hash ]];

            // <= NODE[1].hash
            // <= ...
            // <= NODE[n].hash
            var int i;
            loop i in [1 -> n] do
                var[] byte str = [] .. [[ FC.tostring(THIS.cur[@i].hash) ]] .. [0];
                _dbg_tcp(3, &&outer.tcp.handle, "client", "<= NODE_HASH[%d] : %s", i, &&str[0]);
                outer.tcp.buffer = outer.tcp.buffer .. [[ THIS.cur[@i].hash ]];
            end

            // <= TIMESTAMP + NONCE
            do
                var usize offset = $outer.tcp.buffer;
                outer.tcp.buffer = outer.tcp.buffer..[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
                var u64 timestamp = [[ THIS.cur.timestamp ]];
                var u64 nonce     = [[ THIS.cur.nonce     ]];
                PUT_HTOBE64(outer.tcp.buffer, offset, timestamp);
                PUT_HTOBE64(outer.tcp.buffer, offset+sizeof(u64), nonce);
            end

            // <= PUB
            do
                // <= PUB_HASH?
                outer.tcp.buffer = outer.tcp.buffer .. [[ THIS.cur.pub.hash ]];
                await UV_Stream_Write_N(&outer.tcp,_);

                // => PUB_HASH_ACK!
                await UV_Stream_Read_N(&outer.tcp, 1);
                var int ret = outer.tcp.buffer[0];
                $outer.tcp.buffer = $outer.tcp.buffer - 1;
                if ret == 0 then
                    // <= PUB: TIMESTAMP+NONCE+LEN+PAYLOAD
                    outer.tcp.buffer = [] .. [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
                                          .. [0,0,0,0]
                                          .. [[ THIS.cur.pub.payload ]];

                    var u64 timestamp   = [[ THIS.cur.pub.timestamp           ]];
                    var u64 nonce       = [[ THIS.cur.pub.nonce               ]];
                    var u32 payload_len = [[ string.len(THIS.cur.pub.payload) ]];
                    PUT_HTOBE64(outer.tcp.buffer, 0, timestamp);
                    PUT_HTOBE64(outer.tcp.buffer, sizeof(u64), nonce);
                    PUT_HTOBE32(outer.tcp.buffer, 2*sizeof(u64), payload_len);
                    await UV_Stream_Write_N(&outer.tcp,_);
                end
            end
        end
    end

     // TODO: PoS: before/after each node? once per node?
    [[
        THIS = {
            chain = ARGS.chain,
            toask = {},
            asked = {},
            togo  = {},
        }
        FC.children(THIS.toask, THIS.chain.head)
    ]]

   loop do
        [[
            THIS.cur = nil
            while true do
                if #THIS.toask == 0 then
                    break
                end

                cur = table.remove(THIS.toask) -- next to ask
                if not THIS.asked[cur] then
                    THIS.cur = cur
                    THIS.asked[cur] = true     -- dont ask for this one again (avoid diamonds in the graph)
                    break
                end
            end
        ]]

        var bool has_ask = [[ THIS.cur ~= nil ]];
        if not has_ask then
            tcp.buffer = [0];                   // no more nodes to offer
            await UV_Stream_Write_N(&tcp,_);
            break;
        end

        // <= HASH (ask)
        tcp.buffer = [1] .. [[ THIS.cur.hash ]];
        await UV_Stream_Write_N(&tcp,_);

        // => ACK-HASH (answer)
        await UV_Stream_Read_N(&tcp, 1);
        var byte ret = tcp.buffer[0];
        $tcp.buffer = $tcp.buffer - 1;

        [[ THIS.go = true ]]
        if ret == 0 then
            [[
                THIS.togo[#THIS.togo+1] = THIS.cur      -- send it complete later
                --THIS.togo[THIS.cur] = 0
                for _, a in ipairs(THIS.cur) do
                    if not THIS.asked[a] then
                        THIS.toask[#THIS.toask+1] = a   -- first ask for its children
                        THIS.go = false
                    end
                end
            ]]
        end

        var bool go = [[ THIS.go ]];
        if go then
            [[ ARGS = THIS ]];
            await Go();
        else
            tcp.buffer = [0];
            await UV_Stream_Write_N(&tcp,_);
        end
    end
end

#endif
