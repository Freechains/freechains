#ifndef _MESSAGE30_CEU
#define _MESSAGE30_CEU

/*
 * PUBLISH:
 *
 *  msg = {
 *      chain = {
 *          key   = <string>,
 *          zeros = <number>,
 *      }
 *      payload = <string>,
 *  }
 *
 *  // TODO
 *  ret = {
 *  }
 */

// => LEN
await UV_Stream_Read_N(&outer.tcp, sizeof(u32));
var u32 len = GET_BE32TOH(outer.tcp.buffer,0);
$outer.tcp.buffer = $outer.tcp.buffer - sizeof(u32);
_dbg_tcp(2, &&outer.tcp.handle, "server", "LEN = %d", len);

// => MSG
await UV_Stream_Read_N(&outer.tcp, (len as usize));
//outer.tcp.buffer = outer.tcp.buffer..[0];
//_dbg(3, "server | MESSAGE 30 | %s", &&outer.tcp.buffer[0]);
[[
    assert(load('msg = '..@outer.tcp.buffer))()
    --print('>>>', FC.tostring(msg,'plain'))
    ARGS = {
        message = {
            chain       = msg.chain,
            timestamp   = msg.timestamp,
            nonce       = msg.nonce,
            payload     = msg.payload,
            removal     = msg.removal and FC.hex2hash(msg.removal) or nil,
            key_private = msg.key_private,
        },
    }
]]
emit outer.shared.go_client_10_pre(0);

// <= MSG
//outer.tcp.buffer = []..[[ FC.tostring(msg,'plain') ]];
//await UV_Stream_Write_N(&outer.tcp,_);

#endif
