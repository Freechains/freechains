#ifndef _MESSAGE10_RECV_CEU
#define _MESSAGE10_RECV_CEU

code/await Message10_header_recv (var& UV_Stream tcp) -> int
do
    // => CHAIN_LEN
    // => CHAIN_KEY
    // => CHAIN_ZEROS
    do/_
        // zeros
        var ssize n = await UV_Stream_Read_N(&tcp, 1);
        _ceu_dbg_assert(n>=0 and $tcp.buffer>=1);
        var byte chain_zeros = tcp.buffer[0];
        _dbg_tcp(2, &&tcp.handle, "server", "CHAIN_ZEROS = %d",  chain_zeros);
        $tcp.buffer = $tcp.buffer - 1;

        // len
        n = await UV_Stream_Read_N(&tcp, 1);
        _ceu_dbg_assert(n>=0 and $tcp.buffer>=1);
        var byte chain_len = tcp.buffer[0];
        $tcp.buffer = $tcp.buffer - 1;
        _dbg_tcp(2, &&tcp.handle, "server", "CHAIN_LEN   = %d", chain_len);

        // key
        var[] byte chain_key;
        n = await UV_Stream_Read_N(&tcp, (chain_len as usize));
        _ceu_dbg_assert(n>=0 and $tcp.buffer>=(chain_len as usize));
        _ceu_vector_setlen(&&chain_key,chain_len,1);
        if chain_len > 0 then
            _memcpy(&&chain_key[0], &&tcp.buffer[0], chain_len);
        end
        _dbg_tcp(2, &&tcp.handle, "server", "CHAIN_KEY   = %s", &&chain_key[0]);
        $tcp.buffer = $tcp.buffer - (chain_len as usize);

        [[
            G(tcp).chain = GG.chain_parse_get( {
                key   = @chain_key,
                zeros = @chain_zeros,
            } )
        ]];

        var bool is_sub = [[ G(tcp).chain ~= nil ]];
        _dbg_tcp(2, &&tcp.handle, "server", "is_sub      = %d", is_sub);
        if not is_sub then
            escape _MESSAGE10_NOTSUB;    // OK ACK
        end

        // TODO: check CHAIN_LIMITS
    end

    escape _ERR_NONE;
end

code/await Message10_block_recv (var& UV_Stream tcp) -> int
do
    // => BLOCK_HASH
    // => BLOCK_TXS_N
    do
        // hash
[[print('>>>', @$tcp.buffer)]]
        var ssize n = await UV_Stream_Read_N(&tcp, HASH_BYTES);
[[print'<<<']]
        _ceu_dbg_assert(n>=0 and $tcp.buffer>=HASH_BYTES);

        var[HASH_BYTES] byte hash;
        _ceu_vector_setlen(&&hash, HASH_BYTES, 1);
        _ceu_vector_buf_set(&&hash, 0, &&tcp.buffer[0], HASH_BYTES);
        $tcp.buffer = $tcp.buffer - HASH_BYTES;

        do
            var[] byte str = [] .. [[ tostring2(@hash) ]];
            _dbg_tcp(3, &&tcp.handle, "server", "=> BLOCK_HASH : %s", &&str[0]);
        end

        // txs_n
        n = await UV_Stream_Read_N(&tcp, sizeof(u32));
        _ceu_dbg_assert(n>=0 and $tcp.buffer>=sizeof(u32));
        var u32 txs_n = GET_HOST_U32(tcp.buffer, 0);
        $tcp.buffer = $tcp.buffer - sizeof(u32);
        _dbg_tcp(0, &&tcp.handle, "server", "=> BLOCK_TXS_N : %d", txs_n);

        [[
            G(tcp).block.hash = @hash;
            --print('[server] => BLOCK_HASH', string.len(G(tcp).block.hash))
            --print(tostring2(G(tcp).block.hash))
            --print('[server] => BLOCK_TXS_N', @txs_n)
            G(tcp).block.txs_n = @txs_n
        ]];
    end

    // check if block is already on chain
    [[
        have = false
        cur = assert( APP.blocks[ G(tcp).chain.head_hash ] )
        while true do
            if cur.hash == G(tcp).block.hash then
                have = true
                break
            end
            if not cur.tail_hash then
                break
            end
            cur = assert(APP.blocks[cur.tail_hash])
        end
    ]];

    var bool have = [[ have ]];
    if have then
        escape _MESSAGE10_HAVE;    // OK ACK
    else
        escape _ERR_NONE;
    end
end

code/await Message10_tx_recv (var& UV_Stream tcp) -> int
do
    // => TX_PAYLOAD_BYTES
    // => TX_HASH
    do/_
        // hash
        var ssize n = await UV_Stream_Read_N(&tcp, HASH_BYTES);
        _ceu_dbg_assert(n>=0 and $tcp.buffer>=HASH_BYTES);

        var[HASH_BYTES] byte hash;
        _ceu_vector_setlen(&&hash,HASH_BYTES,1);
        _ceu_vector_buf_set(&&hash, 0, &&tcp.buffer[0], HASH_BYTES);

        $tcp.buffer = $tcp.buffer - HASH_BYTES;

        var int zeros_wanted = [[ G(tcp).chain.zeros ]];
        if zeros_wanted > _leading_zeros(&&hash[0],HASH_BYTES) then
// TODO: test-case to fail here
// TODO: also change from ">" to "!="
_ceu_dbg_assert(0);
            escape _ERR_REMOTE_BUG_OR_MALICIOUS;
        end

        // payload_bytes
        n = await UV_Stream_Read_N(&tcp, sizeof(u32));
        _ceu_dbg_assert(n>=0 and $tcp.buffer>=sizeof(u32));
        var u32 payload_bytes = GET_HOST_U32(tcp.buffer, 0);
        $tcp.buffer = $tcp.buffer - sizeof(u32);

        // TODO: check payload_bytes vs chain.limits

        [[
            payload_bytes = @payload_bytes
            tx_hash = @hash;
            --print('[server] => TX_HASH', payload_bytes)
            --print(tostring2(tx_hash))

            tx = APP.txs[tx_hash]
            if tx == nil then
                G(tcp).tx = {
                    hash  = tx_hash,
                    bytes = payload_bytes,
                }
            else
                G(tcp).tx = tx
            end
        ]];
        var bool have = [[ tx ~= nil ]];

        // <= ACK-tx
        do
            if have then
                tcp.buffer = [ _MESSAGE10_HAVE ];
            else
                tcp.buffer = [ _ERR_NONE  ];
            end
            _dbg_tcp(0, &&tcp.handle, "server", "<= ACK-tx = %d", tcp.buffer[0]);
            await UV_Stream_Write_N(&tcp, 1);
        end

        // HAVE_YES: next TX
        if have then
            escape _ERR_NONE;
        end
    end
    // HAVE_NO: complete TX

    // => TX_COMPLETE
    do
        // => NONCE/TIMESTAMP: 128 bits
        do
            var ssize n = await UV_Stream_Read_N(&tcp, NONCE_BYTES);
            _ceu_dbg_assert(n>=0 and $tcp.buffer>=NONCE_BYTES);

            var[NONCE_BYTES] byte nonce;
            _ceu_vector_setlen(&&nonce,NONCE_BYTES,1);
            _ceu_vector_buf_set(&&nonce, 0, &&tcp.buffer[0], NONCE_BYTES);
    
            [[ G(tcp).tx.nonce = @nonce ]];
            //[[ print('NONCE', tostring2(G(tcp).tx.nonce)) ]];
            //_printf("[server] => TIMESTAMP = %X\n", timestamp);
            $tcp.buffer = $tcp.buffer - NONCE_BYTES;
        end

        // => TX_BACK_HASH
// TODO: check back_hash
        do
            var ssize n = await UV_Stream_Read_N(&tcp, HASH_BYTES);
            _ceu_dbg_assert(n>=0 and $tcp.buffer>=HASH_BYTES);

            var[HASH_BYTES] byte back_hash;
            _ceu_vector_setlen(&&back_hash, HASH_BYTES, 1);
            _ceu_vector_buf_set(&&back_hash, 0, &&tcp.buffer[0], HASH_BYTES);

            $tcp.buffer = $tcp.buffer - HASH_BYTES;
            [[
                G(tcp).tx.back_hash = @back_hash;
                --print('[server] => TX_BACK_HASH')
                --print(tostring2(G(tcp).tx.back_hash))
            ]];

            // [check] BACK_HASH is young enough? [ok ACK]
            do
#if 1
                //_printf("TODO: BLOCK_HASH young enough?\n");
#else
                var int n = [[ APP.server.chains.BACK_HASH_JUMP_LIMIT ]];
                [[ head_hash = APP.server.chains[MSG.chain.key].heads[MSG.chain.zeros] ]];
                loop i in n do
                    var bool is_eq = [[ head_hash == MSG.back_hash ]];
                    if is_eq then
                        xxx
                    end
                   [[ head_hash = APP ]]
                end
#endif
            end
        end

        // => TX_PAYLOAD
        do
            var usize len = [[ G(tcp).tx.bytes ]];
            var ssize n = await UV_Stream_Read_N(&tcp, len);
            _ceu_dbg_assert(n>=0 and $tcp.buffer>=len);

            var[] byte tx_payload;
            _ceu_vector_setlen(&&tx_payload, len, 1);
            _ceu_vector_buf_set(&&tx_payload, 0, &&tcp.buffer[0], len);
            [[
                G(tcp).tx.payload = @tx_payload;
                --print('[server] => PAYLOAD')
                --print(tostring2(G(tcp).tx.payload))
            ]];
            $tcp.buffer = $tcp.buffer - len;
        end

        // => POS: TODO
        do
            var ssize n = await UV_Stream_Read_N(&tcp, 1);
            _ceu_dbg_assert(n>=0 and $tcp.buffer>=1);
            var int pos_ = tcp.buffer[0];
            //_printf("[server] POS = %X\n", pos_);
            [[ G(tcp).tx.pos = @pos_ ]];
            //_printf("TODO: POS matches?\n");
            $tcp.buffer = $tcp.buffer - 1;
        end
    end

    escape _ERR_NONE;
end

[[
    G(outer.tcp) = {
        chain = nil,
    }
]];

///////////////////////////////////////////////////////////////////////////
// HEADER
///////////////////////////////////////////////////////////////////////////

// <= ACK-header
// bytes/reader received from message partially parsed
var int err = await Message10_header_recv(&outer.tcp);
_ceu_dbg_assert($outer.tcp.buffer == 0);

if err == _MESSAGE10_NOTSUB then
    outer.tcp.buffer = [err];
    await UV_Stream_Write_N(&outer.tcp,_);
    escape err;     // terminate if not subcribed
end

// LOCK: only one "receive" per chain
do
    var bool is_locked = [[ G(outer.tcp).chain.recv_is_locked ]];
    if is_locked then
        loop do
            par/or do
                await outer.shared.unlock;
            with
                await 1s;
            end
            is_locked = [[ G(outer.tcp).chain.recv_is_locked ]];
            if not is_locked then
                break;
            end
        end
    end
    [[ G(outer.tcp).chain.recv_is_locked = true ]];
    do finalize with
        [[ G(outer.tcp).chain.recv_is_locked = false ]];
        emit outer.shared.unlock;
    end

{SERVERS_ALIVE++;}
do finalize with
{SERVERS_ALIVE--;}
end

    do
        outer.tcp.buffer = [err];
        await UV_Stream_Write_N(&outer.tcp,_);
    end

    [[
        G(outer.tcp).remote_head = nil
        G(outer.tcp).remote_base = nil
    ]];

    ///////////////////////////////////////////////////////////////////////////
    // BLOCKS:
    ///////////////////////////////////////////////////////////////////////////

    err = _ERR_NONE;
    err = do
        var int i;
        loop i do
{BLOCKS_RECEIVED++;}
            [[
                G(outer.tcp).previous = G(outer.tcp).block
                G(outer.tcp).block = {
                    id        = '1.0',
                    chain_id  = G(outer.tcp).chain.id,
                    txs       = {},
                    hash      = nil,
                    up_hash   = nil,
                    tail_hash = nil,
                }
            ]];

            // <= ACK-block
            do/_
                var int err2 = await Message10_block_recv(&outer.tcp);

                // consolidate previous block
                var bool ok = [[ G(outer.tcp).previous ~= nil ]];
                if ok then
                    [[
                        G(outer.tcp).previous.tail_hash = assert(G(outer.tcp).block.hash)
                        ARGS = { block=G(outer.tcp).previous }
                    ]];
                    var int ret = await BlockHash(SourceBlockHash.Network());
                    if ret != _ERR_NONE then
#ifdef FREECHAINS_NO_MALICIOUS
                        _ceu_dbg_assert(0);
#endif
                        escape ret;
                    end
                end

                _ceu_dbg_assert($outer.tcp.buffer == 0);

                //[[ print('[server] => BLOCKS['..(@i)..'] : 
                //'..tostring2(G(outer.tcp).block.hash)) ]];

                do
                    _dbg_tcp(0, &&outer.tcp.handle, "server", "<= ACK-block[%d] = %d",
                            _ceu_uv_tcp_getsockport(&&outer.tcp.handle as _uv_tcp_t&&),
                            _ceu_uv_tcp_getpeerport(&&outer.tcp.handle as _uv_tcp_t&&),
                            i, err2);
                    outer.tcp.buffer = [err2];
                    await UV_Stream_Write_N(&outer.tcp,_);
                end

                // FOUND COMMON BLOCK?
                if err2 == _MESSAGE10_HAVE then
                    if i == 0 then
                        escape _MESSAGE10_HAVE;   // nothing new
                    else
                        escape _ERR_NONE;         // check/set new head
                    end
                end

                // received at least one new block
                [[
                    if (@i) == 0 then
                        G(outer.tcp).remote_head = G(outer.tcp).block
                    else
                        G(outer.tcp).remote_base.tail_hash = G(outer.tcp).block.hash
                        G(outer.tcp).block.up_hash = G(outer.tcp).remote_base.hash
                    end

                    G(outer.tcp).remote_base = G(outer.tcp).block
                ]];
            end

            ///////////////////////////////////////////////////////////////////////////
            // TXS
            ///////////////////////////////////////////////////////////////////////////

            do/_
                var int txs_n = [[ G(outer.tcp).block.txs_n ]];
                _dbg_tcp(0, &&outer.tcp.handle, "server", "=> %d txs (ini)", txs_n);
                var int j;
                loop j in [0 -> txs_n[ do
                    _dbg_tcp(0, &&outer.tcp.handle, "server", "=> %d txs[%d]", txs_n, j);
                    var int err2 = await Message10_tx_recv(&outer.tcp);
                    if err2 != _ERR_NONE then
                        escape err2;
                    end
                    [[
                        G(outer.tcp).block.txs[@j+1] = G(outer.tcp).tx.hash
                        G(outer.tcp).block.txs[G(outer.tcp).tx.hash] = G(outer.tcp).tx
                    ]];
                end
                _dbg_tcp(0, &&outer.tcp.handle, "server", "=> %d txs (end)", txs_n);
            end
        end
        //_ceu_dbg_assert(0);
        escape _ERR_NONE;
    end;
end

if err == _MESSAGE10_HAVE then
    escape _ERR_NONE;   // nothing new, but no error
else/if err != _ERR_NONE then
    escape err;         // some error
end

// BLOCK holds the COMMON node
[[
    common_hash = G(outer.tcp).block.hash
    assert(G(outer.tcp).remote_head and G(outer.tcp).remote_base, '1')
    G(outer.tcp).remote_base.tail_hash = common_hash
]];

///////////////////////////////////////////////////////////////////////////////
// CHECK/SET NEW HEAD
///////////////////////////////////////////////////////////////////////////////

/*
 * LOCAL:  gen <-> 1 <-> 2 <-> 3
 *                       | LOCAL
 *                       \BASE \HEAD
 * REMOTE:         | <-  4 <-> 5 <-> 6
 *                       \BASE       \HEAD
 * common_hash:   "1"
 * (COMMON "1" still ups to LOCAL, but REMOTE tails to "1")
 */

// compare chains, set longest, apply shortest
[[
    -- { base=?, head=?, size=? }
    local_ = GG.chain_head_base_size(G(outer.tcp).chain.head_hash)
    remote = GG.chain_head_base_size(G(outer.tcp).remote_head.hash)
    --print('[server] LOC='..local_.size..' vs REM='..remote.size)

    -- dst is the longest
    -- src is the shortest
    -- TODO-LEN:
    dst, src = nil, nil
    if remote.size > local_.size then
        dst, src = remote, local_
    elseif local_.size > remote.size then
        dst, src = local_, remote
    else
        -- break tie on hash value of head
        assert(remote.size == local_.size)
        if remote.head.hash > local_.head.hash then
            dst, src = remote, local_
        else
            dst, src = local_, remote
        end
    end

    -- relink current chain's head/common if longest is remote
    if dst == remote then
        APP.blocks[common_hash].up_hash = G(outer.tcp).remote_base.hash
        G(outer.tcp).chain.head_hash = dst.head.hash
    else
        --print('[server] local wins')
        -- already ok
    end

    -- apply shortest to new block with all missing txs
    block_new = {
        id        = '1.0',  -- TODO
        txs       = {},
        up_hash   = nil,
        chain_id  = G(outer.tcp).chain.id,
        -- set by Message10_block_parse_head
        --tail_hash = dst.head.hash,
        --hash      = error'TODO',
    }

    -- insert all src* txs into block_new.txs if non existent
    cur = src.head
    T = {}  -- txs in base->head order
fork = 0
    while cur.hash ~= common_hash do
fork = fork+1
        t = {}
        for _, tx in ipairs(cur.txs) do
            assert(type(tx) == 'string')
            if not GG.chain_tx_contains(dst.head.hash,tx) then
                t[#t+1] = tx
            end
        end
        cur = assert(APP.blocks[cur.tail_hash])
        table.insert(T, 1, t) -- inverse order
    end
    for _, t in ipairs(T) do
        for _, tx in ipairs(t) do
            block_new.txs[#block_new.txs+1] = tx
        end
    end

    ARGS = {
        block = block_new
    }
]];

var int txs = [[ #block_new.txs ]];
if txs>0 then
    [[
        ARGS = { block=block_new }
    ]];
    var int ret = await BlockHash(SourceBlockHash.Network());
    _ceu_dbg_assert(ret == _ERR_NONE);
    [[
        APP.blocks[G(outer.tcp).chain.head_hash].up_hash = ARGS.block.hash
        G(outer.tcp).chain.head_hash = ARGS.block.hash
    ]]
end

var int fork = [[fork]];
var bool is_remote = [[ dst == remote ]];
if fork>1 and is_remote and txs>0 then
    //_ceu_dbg_assert(has_txs);
    _dbg_tcp(3, &&outer.tcp.handle, "server", "recreated: %d", fork);
    {BLOCKS_RECREATED+=@fork;}
    {TXS_RECREATED+=@txs;}
end

///////////////////////////////////////////////////////////////////////////
// RETRANSMIT NEW HEAD
///////////////////////////////////////////////////////////////////////////

#ifndef OLD
emit outer.shared.retransmit;
#endif
par do
    await outer.shared.retransmit;
    escape _ERR_ABORTED;
    //_ceu_dbg_assert(0);
with
    //watching outer.shared.retransmit do
    do/_
        // TODO: conditions to not propagate changes
        var bool has = [[ block_new ~= dst.head ]];
        _ceu_dbg_assert(has);
        //if has then
            [[
                chain = assert(APP.chains[G(outer.tcp).chain.id])
                ARGS = {
                    block = assert(APP.blocks[chain.head_hash]),
                    chain = chain,
                }
            ]];
            await Client(&outer.shared);
            [[ ARGS = chain ]]
            escape _ERR_NONE;
        //end
    end
end

#endif
