#ifndef _MESSAGE70_CEU
#define _MESSAGE70_CEU

/*
 * CRYPTO:
 *
 *  msg = {
 *      create     = <string>, -- 'shared' or 'public-private'
 *      passphrase = <string>,
 *
 *      encrypt    = <string>, -- 'shared' or 'public-private'
 *      decrypt    = <string>, -- 'shared' or 'public-private'
 *      key        = <string>,
 *      payload    = <string>,
 *  }
 *
 *  -- create
 *  ret = {
 *      public  = <string>,
 *      private = <string>,
 *  }
 *
 *  -- encrypt/decrypt
 *  ret = <string>      -- payload
 */

// echo -n -e "PS\x07\x00\x00\x00\x00\x0F{passphrase=''}" | nc localhost 8500

// => LEN
await UV_Stream_Read_N(&outer.tcp, sizeof(u32));
var u32 len = GET_BE32TOH(outer.tcp.buffer,0);
$outer.tcp.buffer = $outer.tcp.buffer - sizeof(u32);
_dbg_tcp(2, &&outer.tcp.handle, "server", "LEN = %d", len);

// => MSG
await UV_Stream_Read_N(&outer.tcp, (len as usize));
//outer.tcp.buffer = outer.tcp.buffer..[0];
//_dbg(3, "server | MESSAGE 70 | %s", &&outer.tcp.buffer[0]);
[[
    assert(load('msg = '..@outer.tcp.buffer))()
    print('>>>', FC.tostring(msg,'plain'))
]]

var bool is_create  = [[ msg.create  ~= nil ]];
var bool is_encrypt = [[ msg.encrypt ~= nil ]];
var bool is_decrypt = [[ msg.decrypt ~= nil ]];

if is_create then
    var[] byte passphrase = []..[[ assert(msg.passphrase, 'TODO: omit passphrase / random key') ]];

    var bool is_shared = [[ msg.create == 'shared' ]];
    if is_shared then
        var[{crypto_secretbox_KEYBYTES}] byte ret;
        _ceu_vector_setlen(&&ret, {crypto_secretbox_KEYBYTES}, 1);
        _ceu_assert(_sodium_passphrase2pwhash(&&ret[0], {crypto_secretbox_KEYBYTES}, &&passphrase[0], $passphrase) == 0, "bug found");
        [[
            RET = FC.hash2hex(@ret)
        ]]
    else
        var[{crypto_sign_PUBLICKEYBYTES}] byte pk;
        var[{crypto_sign_SECRETKEYBYTES}] byte sk;
        _ceu_vector_setlen(&&pk, {crypto_sign_PUBLICKEYBYTES}, 1);
        _ceu_vector_setlen(&&sk, {crypto_sign_SECRETKEYBYTES}, 1);

        _ceu_assert(_sodium_passphrase2keys(&&passphrase[0], $passphrase, &&pk[0], &&sk[0]) == 0, "bug found");

        [[
            RET = {
                public  = FC.hash2hex(@pk),
                private = FC.hash2hex(@sk),
            }
        ]]
    end

else/if is_encrypt or is_decrypt then
    var bool is_shared = [[ msg.encrypt=='shared' or msg.decrypt=='shared' ]];
    var bool is_sealed = [[ msg.encrypt=='sealed' or msg.decrypt=='sealed' ]];
    if is_shared then
        var[] byte key = []..[[ FC.hex2hash(msg.key) ]];
        [[ assert(string.len(@key) == @({crypto_secretbox_KEYBYTES} as int), 'invalid shared key length') ]];
        if is_encrypt then
            var[] byte  buf;
            var   usize len = [[ string.len(msg.payload) ]];
            _ceu_vector_setlen(&&buf, {crypto_secretbox_NONCEBYTES+crypto_secretbox_MACBYTES}, 1);
            buf = buf .. [[ msg.payload ]];
            _ceu_assert(_sodium_shared_encrypt(&&buf[0], len, &&key[0]) == 0, "bug found");
            [[
                RET = @buf
            ]]
        else
            var[] byte buf = []..[[ msg.payload ]];
            _ceu_assert(_sodium_shared_decrypt(&&buf[0], $buf, &&key[0]) == 0, "bug found");
            [[
                RET = string.sub(@buf,@({1+crypto_secretbox_NONCEBYTES+crypto_secretbox_MACBYTES} as usize))
            ]];
        end
    else/if is_sealed then
        var[] byte pub = []..[[ FC.hex2hash(msg.pub) ]];
        if is_encrypt then
            [[ assert(string.len(@pub) == @({crypto_sign_PUBLICKEYBYTES} as int), 'invalid public key length') ]];
            var[] byte  buf;
            var   usize len = [[ string.len(msg.payload) ]];
            _ceu_vector_setlen(&&buf, {crypto_box_SEALBYTES}, 1);
            buf = buf .. [[ msg.payload ]];
            _ceu_assert(_sodium_sealed_encrypt(&&buf[0], len, &&pub[0]) == 0, "bug found");
            [[
                RET = @buf
            ]]
        else
            var[] byte pub = []..[[ FC.hex2hash(msg.pub) ]];
            var[] byte pvt = []..[[ FC.hex2hash(msg.pvt) ]];
            [[ assert(string.len(@pub) == @({crypto_sign_PUBLICKEYBYTES} as int), 'invalid public key length') ]];
            [[ assert(string.len(@pvt)  == @({crypto_sign_SECRETKEYBYTES} as int), 'invalid private key length') ]];
            var[] byte buf = []..[[ msg.payload ]];
            _ceu_assert(_sodium_sealed_decrypt(&&buf[0], $buf, &&pub[0], &&pvt[0]) == 0, "bug found");
            [[
                RET = string.sub(@buf,@({1+crypto_box_SEALBYTES} as usize))
            ]];
        end
    else
#if 0
        [[ assert(string.len(@key) == @({crypto_box_KEYBYTES} as int), 'invalid shared key length') ]];
        if is_encrypt then
            var[] byte  buf;
            var   usize len = [[ string.len(msg.payload) ]];
            _ceu_vector_setlen(&&buf, {crypto_box_NONCEBYTES+crypto_box_MACBYTES}, 1);
            buf = buf .. [[ msg.payload ]];
            _ceu_assert(_sodium_symetric_encrypt(&&buf[0], len, &&key[0]) == 0, "bug found");
            [[
                RET = @buf
            ]]
        else
            var[] byte buf = []..[[ msg.payload ]];
            _ceu_assert(_sodium_symetric_decrypt(&&buf[0], $buf, &&key[0]) == 0, "bug found");
            [[
                RET = string.sub(@buf,@({1+crypto_box_NONCEBYTES+crypto_box_MACBYTES} as usize))
            ]];
        end
#endif
    end

end

// <= MSG
[[ print('RET', FC.tostring(RET,'plain')) ]];
outer.tcp.buffer = []..[[ FC.tostring(RET,'plain') ]];
await UV_Stream_Write_N(&outer.tcp,_);

#endif
