#ifndef _MESSAGE40_CEU
#define _MESSAGE40_CEU

/*
 * SUBSCRIBE:
 *
 *  msg = {
 *      chain = {
 *          key   = <string>,
 *          zeros = <number>,
 *          peers = {
 *              { address=<string>, port=<number> },
 *              ...
 *              { address=<string>, port=<number> },
 *          },
 *      }
 *      // TODO
 *      peer = { address=<string>, port=<number> },
 *  }
 *
 *  // TODO
 *  ret = {
 *  }
 */

// => LEN
await UV_Stream_Read_N(&outer.tcp, sizeof(u32));
var u32 len = GET_BE32TOH(outer.tcp.buffer,0);
$outer.tcp.buffer = $outer.tcp.buffer - sizeof(u32);
_dbg_tcp(2, &&outer.tcp.handle, "server", "LEN = %d", len);

// => MSG
await UV_Stream_Read_N(&outer.tcp, (len as usize));
outer.tcp.buffer = outer.tcp.buffer..[0];
//_dbg(3, "server | MESSAGE 40 | %s", &&outer.tcp.buffer[0]);
outer.tcp.buffer[$outer.tcp.buffer-1] = {' '};
[[
    assert(load('msg = '..@outer.tcp.buffer))()
    msg.chain.last = {
        output = {},
        atom   = {},
    }
    --print('>>>', FC.tostring(msg,'plain'))

    OLD = CFG.chains[msg.chain.key]
    if OLD then
        -- change zeros
        OLD.zeros = (msg.chain.zeros or OLD.zeros)

        -- include all new peers
        for _, new in ipairs(msg.chain.peers) do
            has = false
            for _, old in ipairs(OLD.peers) do
                if new.address==old.address and new.port==old.port then
                    has = true
                    break
                end
            end
            if not has then
                OLD.peers[#OLD.peers+1] = new
            end
        end
    else
        CFG.chains[msg.chain.key] = msg.chain
    end
    FC.cfg_write()
]]
await Subscribe();
await Broadcast(&outer.shared);

#endif
