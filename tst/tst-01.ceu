#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1
///////////////////////////////////////////////////////////////////////////////

vector[] byte chain1;
vector[] byte chain2;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [=[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'
            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                    },
                },
            }

            MESSAGE {
                id = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = [[
Ola Mundo!
]],
            }
        ]=];

        var UV_TCP_Server_Data shared = _;
        await Init();
        await ClientMessages(&shared);

        [[
            chain1 = GG.chain_flatten('||0|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        chain1 = []..[[tostring2(chain1)]];
    end
with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8331' },
            }
        ]];

        var UV_TCP_Server_Data shared = _;
        await Init();

        vector[] byte ip      = [] .. [[ APP.server.host[1] ]];
        var      int  port    = [[ APP.server.host[2] ]];
        var      int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&shared, &&ip[0], port, backlog);

        await shared.ok;
        [[
            chain2 = GG.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        chain2 = []..[[tostring2(chain2)]];
    end
end

[[
    assert(@chain1 == @chain2)
    print'OK!'
]]

escape 0;
