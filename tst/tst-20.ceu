#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1
//  - channel 'hello'
///////////////////////////////////////////////////////////////////////////////

var[] byte chain1;
var[] byte chain2;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = 'hello',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8331 },
                        },
                    },
                },
            }
        ]]

        await Init();
        await 100ms;

        [=[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = 'hello',
                        zeros = 0,
                    },
                    payload = [[
Ola Mundo!
]],
                }
            }
        ]=];
        await Client(&shared);

        [[
            chain1 = FC.chain_flatten('|hello|0|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('|hello|0|'))
            print('<'..string.rep('=',78))
        ]];
        chain1 = []..[[tostring2(chain1)]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8331',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await shared.ok;
        [[
            chain2 = FC.chain_flatten('|hello|0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('|hello|0|'))
            print('<'..string.rep('=',78))
        ]];
        chain2 = []..[[tostring2(chain2)]];
    end

end

[[
    assert(@chain1 == @chain2)
    print'OK!'
]]

escape 0;
