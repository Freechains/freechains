#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->2
//  - close the connection "2" during second message
//      - 0.2 is not received by "2", but 0.3 is, and then 0.2
///////////////////////////////////////////////////////////////////////////////

event none ok;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                not_persistency = true,
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [''] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8342 },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await 100ms;

        native/plain _uv_stream_t_ptr;
        native/pre do
            typedef uv_stream_t* uv_stream_t_ptr;
        end

        par/and do
            await ok;
        with
            // close 2nd connection for 2nd message
            await UV_STREAM_CONNECT;
            do
                var _uv_connect_t&& c;
                (c,_) = await UV_STREAM_CONNECT;
                var _uv_stream_t_ptr s = c:handle;
                await async (s) do
[[print'-=-=-=-=-=-=-=-=-=-=-=-']];
                    emit UV_STREAM_ERROR(s, -_ECONNRESET);
[[print'=-=-=-=-=-=-=-=-=-=-=-=']];
                end
            end
        with
            var int i;
            loop i in [1 -> 3] do

                [[
                    ARGS = {
                        message = {
                            version = '1.0',
                            chain = {
                                key   = '',
                                zeros = 0,
                            },
                            payload = '0.'..@i
                        }
                    }
                ]];
                await Client(&init.shared);
            end
        end
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8342',
                    backlog = 128,
                },
                not_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        AWAIT_CHAIN_LENGTH(init.shared, '', 0, 3);

        [[
            CHAIN2 = FC.chain_flatten('||0|')
            print'===> SERVER-2'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN2==4 and
                    CHAIN2[4].pub.payload==[[0.3]])
            print'OK 2/2!'
        ]=];

        emit ok;
    end

end

escape 0;
