#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1
//  - zeros = 22
//  - error on nonce => MALICIOUS
///////////////////////////////////////////////////////////////////////////////

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await 200ms;

        par/and do
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 22,
                        },
                        payload = '22.1',
                    },
                }
            ]];
            await Client_10(&init.shared);
        with
            // inject error on nonce
            await init.shared.ok_client_10_pre;
            [[
                _,node = next(FC.chains[''][22].head)
                node.nonce = node.nonce + 1
            ]]
        end

        [[
            FC.dot( FC.chains[''][22].head, '/tmp/tst-23-00.dot' )
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 22,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        var int err;
        (_,err) = await init.shared.err_server until (err == {CEU_DATA_Exception__dot__Freechains__dot__Malformed});
        [[
            FC.dot( FC.chains[''][22].head, '/tmp/tst-23-01.dot' )
            --assert(#FC.errs==1 and FC.errs[1]==FC['Exception.Freechains.Malformed'], #FC.errs)
            print'OK!'
        ]];
    end

end

[[
    local tst00 = assert(io.open('tst/dots/tst-23-00.dot')):read'*a'
    local tst01 = assert(io.open('tst/dots/tst-23-01.dot')):read'*a'
    local tmp00 = assert(io.open('/tmp/tst-23-00.dot')):read'*a'
    local tmp01 = assert(io.open('/tmp/tst-23-01.dot')):read'*a'
    assert(tst00==tmp00 and tst01==tmp01)

    print'OK 3/3!'
]]

escape 0;
