#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1
//  - zeros = 22
//  - error on nonce => MALICIOUS
///////////////////////////////////////////////////////////////////////////////

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8331 },
                        },
                    },
                },
            }
        ]];

        await Init();
        await 100ms;

        par/and do
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 22,
                        },
                        payload = '22.1',
                    },
                }
            ]];
            await Client(&shared);
        with
            // inject error on nonce
            await UV_STREAM_CONNECT;
            [[
                FC.chains['||22|'].head.nonce = FC.chains['||22|'].head.nonce + 1
            ]]
        end

        [[
            CHAIN0 = FC.chain_flatten('||22|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8331',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 22,
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await shared.ok;
        [[
            CHAIN1 = FC.chain_flatten('||22|')
            print'===> SERVER-1'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
            assert(#FC.errs==1 and FC.errs[1]==FC['Exception.Freechains.Malformed'], #FC.errs)
        ]];
        [[
            assert(#CHAIN1==1)
            print'OK!'
        ]];
    end

end

escape 0;
