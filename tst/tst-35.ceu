#include "common.ceu"

_srand(_time(null));

///////////////////////////////////////////////////////////////////////////////
// 0<->1<->...<->N<->0
// - all to all
///////////////////////////////////////////////////////////////////////////////

#define N 10

input void ANY;

class Node with
    var int i;
do
    var App _;

    var int local = 8330+i;

    [=[
        dofile 'cfg/config.lua'

        SERVER {
            host = { '127.0.0.1', @local },
        }

        peers = {}
        for j=0, N-1 do
            if j ~= @this.i then
                peers[#peers+1] = {
                    host = { '127.0.0.1', (8330+j) },
                }
            end
        end
        CLIENT {
            peers = peers,
        }
    ]=]

    do Init;

    do
        var char[] ip      = [[ APP.server.host[1] ]];
        var int    port    = [[ APP.server.host[2] ]];
        var int    backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
        var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

        loop j in N do
            // how much time between each message?
            await (N*1000/2 + _rand()%1000)ms;
_printf(">>> I=%d j=%d\n", this.i, j);
            [[
                APP.messages = {}
                MESSAGE {
                    id = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = string.format('%03d',@this.i)..'.'..string.format('%03d',@j),
                }
            ]];
            do ClientMessages;
        end
_printf("\t\t<<< I=%d\n", this.i);

        // wait all messages to be received
        loop do
            await 1s;   // periodic check (any number is ok)
            [[
                t = GG.chain_head_base_size(APP.chains['||0|'].head_hash)
            ]]
#if 0
[[
print(@this.i, '>'..string.rep('=',70))
print(GG.chain_tostring('||0|'))
print(@this.i, '<'..string.rep('=',70))
]];
#endif
            var int size = [[ t.size ]];
//_printf("<<< I=%d n=%d\n", this.i, size);
            if size == N*N+1 then
                break;
            end
        end

        // how much time to wait for consensus???
        await (2*N) s;
_printf("<<< out=%d\n", this.i);
    end

#if 0
[[
print(@this.i, '>'..string.rep('=',70))
print(GG.chain_tostring('||0|'))
print(@this.i, '<'..string.rep('=',70))
]];
#endif
    var char[] path = [[ '/tmp/'..string.format('%03d',@this.i)..'.chain' ]];
    [[ ARGS = { chain_id='||0|' } ]];
    var int ret = do FS_write_10.run(&path);
    _assert(ret == _ERR_NONE);
end

pool Node[N] nodes;

loop i in N do
    spawn Node in nodes with
        this.i = i;
    end;
end

// wait all nodes to terminate
loop do
    await 5s;
    var bool ok = true;
    loop n in nodes do
        ok = false;
    end
    if ok then
        break;
    end
end

// assert consensus
[[ file1 = io.open('/tmp/000.chain'):read'*a' ]]
loop i in N do
    [[
        file2 = io.open('/tmp/'..string.format('%03d',@i)..'.chain'):read'*a'
        assert(file1 == file2)
    ]]
end

[[ print'OK!' ]];

escape 0;
