#include "common.ceu"

_srand(_time(null));

///////////////////////////////////////////////////////////////////////////////
// 0->1->...->N->0
///////////////////////////////////////////////////////////////////////////////

#define N 20

code/await Node (var int i) -> none
    throws Exception.Lua
do
    lua[] do
        var UV_TCP_Server_Data shared = _;
        shared.port = i;

        var int local  = 8330+i;
        var int remote = 8331+i;
        if i == (N-1) then
            remote = 8330;
        end

        [=[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'

            SERVER {
                host = { '127.0.0.1', @local },
            }

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', @remote },
                    },
                },
            }
        ]=]

        await Init();
        await 100ms;

        do
            var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
            var   int  port    = [[ APP.server.host[2] ]];
            var   int  backlog = [[ APP.server.backlog ]];
            _dbg(3, "server | listening in %s:%d", &&ip[0], port);
            spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

            spawn do
                var int  a;
                var bool err;
                var int  c;
                every (a,err,c) in shared.ok do
#if 0
[[
print(@i, '>'..string.rep('=',70))
print(GG.chain_tostring('||0|'))
print(@i, '<'..string.rep('=',70))
]];
#endif

                    if err then
                        _printf("server | err | %d %d %d\n", a,err,c);
                    end
                end
            end

            var int j;
            loop j in [1 -> N] do
                // how much time between each message?
                await (_rand() % (100*N*N)) ms;
                [[
                    APP.messages = {}
                    MESSAGE {
                        version = '1.0',
                        chain = {
                            key   = 'tst-35',
                            zeros = 0,
                        },
                        payload = string.format('%03d',@i)..'.'..string.format('%03d',@j),
                    }
                ]];
                await ClientMessages(&shared);
//[[print(@i,@j, "clients") ]];
            end
//[[print(@i, "CLIENTS") ]];

            // wait all messages to be received
            loop do
                await shared.ok;
                var int length = [[ APP.chains['||0|'].head.length ]];
                if length == N*N then
                    break;
                end
            end

            // wait for consensus
            loop do
                watching shared.ok do
                    await (N)s;
                    break;
                end
_dbg(0, "server | shared.ok | %s:%d", &&ip[0], port);
            end
_dbg(0, "server | END | %s:%d", &&ip[0], port);
#if 0
[[
print(@i, '>'..string.rep('=',70))
print(GG.chain_tostring('||0|'))
print(@i, '<'..string.rep('=',70))
]];
#endif
//[[print(@i, "END") ]];
        end

        [[ ARGS = { chain=APP.chains['|tst-35|0|'] } ]];
        await FS_write_10();
        [[
            os.execute('cp /tmp/freechains/@(local)/chains/\\|tst-35\\|0\\|.chain /tmp/'..string.format('%03d',@i)..'.chain')
        ]]
    end
end

pool[N] Node nodes;

var int i;
loop i in [0 -> N[ do
    spawn Node(i) in nodes;
end

// wait all nodes to terminate
var&? Node n;
loop n in nodes do
    await n;
end

//_ceu_dbg_assert({BLOCKS_RECEIVED} == N*N);

// assert consensus
[[ file1 = io.open('/tmp/000.chain'):read'*a' ]]
var int i;
loop i in [0 -> N[ do
    [[
        file2 = io.open('/tmp/'..string.format('%03d',@i)..'.chain'):read'*a'
        assert(file1 == file2)
    ]]
end

[[ print'OK!' ]];

escape 0;
