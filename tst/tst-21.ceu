#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1,2,3,4
//  - 1 msg to chain=''
//  - 1 msg to chain='hello'
//  - "1" ok, receives both
//  - "2" is not in "0" peers, receives none
//  - "3" does not receive '||0|' from "0", only receives 'hello'
//  - "4" is not in not sub'ed to '', only receives 'hello'
///////////////////////////////////////////////////////////////////////////////

input void ANY;

[[
    dofile'src/common.lua'
    function C1 ()
        return {
            key   = '',
            zeros = 0,
        }
    end
    function C2 ()
        return {
            key   = 'hello',
            zeros = 0,
        }
    end
]];

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [=[
        dofile 'cfg/config.lua'

        CHAINS {
            C1(), C2(),
        }

        CLIENT {
            peers = {
                {
                    host = { '127.0.0.1', '8331' },
                },
                --{
                    --host = { '127.0.0.1', '8332' },
                --},
                {
                    host = { '127.0.0.1', '8333' },
                    chains = { C2() }, -- 3 does not receive '||0|'
                },
                {
                    host = { '127.0.0.1', '8334' },
                },
            },
        }
    ]=];

    [=[
        MESSAGE {
            id = '1.0',
            chain = {
                key   = '',
                zeros = 0,
            },
            payload = [['']],
        }
    ]=];
    async do end;
    do ClientMessages;

    [=[
        MESSAGE {
            id = '1.0',
            chain = {
                key   = 'hello',
                zeros = 0,
            },
            payload = [['hello']],
        }
    ]=];
    async do end;
    do ClientMessages;

    await 1s;

    [[
        CHAIN0_1 = GG.chain_flatten('||0|')
        CHAIN0_2 = GG.chain_flatten('|hello|0|')
        print'===> CLIENT'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print(GG.chain_tostring('|hello|0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        CHAINS {
            C1(), C2(),
        }
        SERVER {
            host = { '127.0.0.1', '8331' },
        }
    ]];
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        CHAIN1_1 = GG.chain_flatten('||0|')
        CHAIN1_2 = GG.chain_flatten('|hello|0|')
        print'===> SERVER-1'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print(GG.chain_tostring('|hello|0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        CHAINS {
            C1(), C2(),
        }
        SERVER {
            host = { '127.0.0.1', '8332' },
        }
    ]];
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        CHAIN2_1 = GG.chain_flatten('||0|')
        CHAIN2_2 = GG.chain_flatten('|hello|0|')
        print'===> SERVER-2'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print(GG.chain_tostring('|hello|0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 3
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        CHAINS {
            C1(), C2(),
        }
        SERVER {
            host = { '127.0.0.1', '8333' },
        }
    ]];
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        CHAIN3_1 = GG.chain_flatten('||0|')
        CHAIN3_2 = GG.chain_flatten('|hello|0|')
        print'===> SERVER-3'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print(GG.chain_tostring('|hello|0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 4
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        CHAINS {
            C2(),    -- not sub'ed to ''
        }
        SERVER {
            host = { '127.0.0.1', '8334' },
        }
    ]];
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        assert(not APP.chains['||0|'])
        CHAIN4_2 = GG.chain_flatten('|hello|0|')
        print'===> SERVER-4'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('|hello|0|'))
        print('<'..string.rep('=',78))
    ]];
end

[=[
    assert(#CHAIN0_1==2 and #CHAIN0_2==2 and
           CHAIN0_1[2].txs[1]==[['']] and
           CHAIN0_2[2].txs[1]==[['hello']])

    assert(#CHAIN1_1==2 and #CHAIN1_2==2 and
           CHAIN1_1[2].txs[1]==[['']] and
           CHAIN1_2[2].txs[1]==[['hello']])

    assert(#CHAIN2_1==1 and #CHAIN2_2==1)

    assert(#CHAIN3_1==1 and #CHAIN3_2==2 and
           CHAIN3_2[2].txs[1]==[['hello']])

    assert(#CHAIN4_2==2 and
           CHAIN4_2[2].txs[1]==[['hello']])

    print'OK!'
]=];

escape 0;
