#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1,2,3,4
//  - 1 msg to chain=''
//  - 1 msg to chain='hello'
//  - "1" ok, receives both
//  - "2" is not in "0" peers, receives none
//  - "3" does not receive '||0|' from "0", only receives 'hello'
//  - "4" is not in not sub'ed to '', only receives 'hello'
///////////////////////////////////////////////////////////////////////////////

event none ok;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                            { address='127.0.0.1', port=8344 },
                        },
                    },
                    hello = {
                        key   = 'hello',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                            { address='127.0.0.1', port=8343 },
                            { address='127.0.0.1', port=8344 },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await 100ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = "''",
                }
            }
        ]];
        await Client_10(&init.shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = 'hello',
                        zeros = 0,
                    },
                    payload = "'hello'",
                }
            }
        ]];
        await Client_10(&init.shared);

        emit ok;

        [[
            FC.dot( FC.chains[''][0].head,      '/tmp/tst-21-a00.dot' )
            FC.dot( FC.chains['hello'][0].head, '/tmp/tst-21-b00.dot' )
            print'OK 0/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                    },
                    hello = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        par/and do
            AWAIT_CHAIN_N(init.shared, '', 0, 2);
        with
            AWAIT_CHAIN_N(init.shared, 'hello', 0, 2);
        end

        [[
            FC.dot( FC.chains[''][0].head,      '/tmp/tst-21-a01.dot' )
            FC.dot( FC.chains['hello'][0].head, '/tmp/tst-21-b01.dot' )
            print'OK 1/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8342',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                    },
                    hello = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;

        await ok;

        [[
            FC.dot( FC.chains[''][0].head,      '/tmp/tst-21-a02.dot' )
            FC.dot( FC.chains['hello'][0].head, '/tmp/tst-21-b02.dot' )
            print'OK 2/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 3
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8343',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                    },
                    hello = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        AWAIT_CHAIN_N(init.shared, 'hello', 0, 2);

        [[
            FC.dot( FC.chains[''][0].head,      '/tmp/tst-21-a03.dot' )
            FC.dot( FC.chains['hello'][0].head, '/tmp/tst-21-b03.dot' )
            print'OK 3/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 4
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8344',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    hello = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        AWAIT_CHAIN_N(init.shared, 'hello', 0, 2);

        [[
            FC.dot( FC.chains['hello'][0].head, '/tmp/tst-21-b04.dot' )
            print'OK 4/4!'
        ]];
    end

end

[[
    local tst_a00 = assert(io.open('tst/dots/tst-21-a00.dot')):read'*a'
    local tst_b00 = assert(io.open('tst/dots/tst-21-b00.dot')):read'*a'
    local tst_a02 = assert(io.open('tst/dots/tst-21-a02.dot')):read'*a'
    local tst_b02 = assert(io.open('tst/dots/tst-21-b02.dot')):read'*a'

    local tmp_a00 = assert(io.open('/tmp/tst-21-a00.dot')):read'*a'
    local tmp_b00 = assert(io.open('/tmp/tst-21-b00.dot')):read'*a'

    local tmp_a01 = assert(io.open('/tmp/tst-21-a01.dot')):read'*a'
    local tmp_b01 = assert(io.open('/tmp/tst-21-b01.dot')):read'*a'

    local tmp_a02 = assert(io.open('/tmp/tst-21-a02.dot')):read'*a'
    local tmp_b02 = assert(io.open('/tmp/tst-21-b02.dot')):read'*a'

    local tmp_a03 = assert(io.open('/tmp/tst-21-a03.dot')):read'*a'
    local tmp_b03 = assert(io.open('/tmp/tst-21-b03.dot')):read'*a'

    local tmp_a04 = assert(not io.open('/tmp/tst-21-a04.dot'))
    local tmp_b04 = assert(io.open('/tmp/tst-21-b04.dot')):read'*a'

    assert(tst_a00==tmp_a00 and tst_a00==tmp_a01)
    assert(tst_b00==tmp_b00 and tst_b00==tmp_b01 and tst_b00==tmp_b03 and tst_b00==tmp_b04)
    assert(tst_a02==tmp_a02 and tst_a02==tmp_a03)
    assert(tst_b02==tmp_b02)

    print'OK!'
]]

escape 0;
