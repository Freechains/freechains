#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1,2,3,4
//  - 1 msg to chain=''
//  - 1 msg to chain='hello'
//  - "1" ok, receives both
//  - "2" is not in "0" peers, receives none
//  - "3" does not receive '||0|' from "0", only receives 'hello'
//  - "4" is not in not sub'ed to '', only receives 'hello'
///////////////////////////////////////////////////////////////////////////////

event none ok;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8331 },
                            { address='127.0.0.1', port=8334 },
                        },
                    },
                    [2] = {
                        key   = 'hello',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8331 },
                            { address='127.0.0.1', port=8333 },
                            { address='127.0.0.1', port=8334 },
                        },
                    },
                },
            }
        ]];

        await Init();
        await 100ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = "''",
                }
            }
        ]];
        await Client(&shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = 'hello',
                        zeros = 0,
                    },
                    payload = "'hello'",
                }
            }
        ]];
        await Client(&shared);

        emit ok;

        [[
            CHAIN0_1 = FC.chain_flatten('||0|')
            CHAIN0_2 = FC.chain_flatten('|hello|0|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print(FC.chain_tostring('|hello|0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert(#CHAIN0_1==2 and #CHAIN0_2==2 and
                   CHAIN0_1[2].publication.payload==[['']] and
                   CHAIN0_2[2].publication.payload==[['hello']])
            print'OK 0/4!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8331',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                    [2] = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        loop do
            var bool ok1 = [[ FC.chains[''][0].head.length == 1 ]];
            var bool ok2 = [[ FC.chains['hello'][0].head.length == 1 ]];
            if ok1 and ok2 then
                break;
            end
            await shared.ok;
        end

        [[
            CHAIN1_1 = FC.chain_flatten('||0|')
            CHAIN1_2 = FC.chain_flatten('|hello|0|')
            print'===> SERVER-1'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print(FC.chain_tostring('|hello|0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert(#CHAIN1_1==2 and #CHAIN1_2==2 and
                   CHAIN1_1[2].publication.payload==[['']] and
                   CHAIN1_2[2].publication.payload==[['hello']])
            print'OK 1/4!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8332',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                    [2] = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await ok;
        [[
            CHAIN2_1 = FC.chain_flatten('||0|')
            CHAIN2_2 = FC.chain_flatten('|hello|0|')
            print'===> SERVER-2'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print(FC.chain_tostring('|hello|0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert(#CHAIN2_1==1 and #CHAIN2_2==1)
            print'OK 2/4!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 3
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8333',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                    [2] = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await shared.ok;
        [[
            CHAIN3_1 = FC.chain_flatten('||0|')
            CHAIN3_2 = FC.chain_flatten('|hello|0|')
            print'===> SERVER-3'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print(FC.chain_tostring('|hello|0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert(#CHAIN3_1==1 and #CHAIN3_2==2 and
                   CHAIN3_2[2].publication.payload==[['hello']])
            print'OK 3/4!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 4
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8334',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = 'hello',
                        zeros = 0,
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await shared.ok;
        await shared.ok;
        [[
            assert(not FC.chains['||0|'])
            CHAIN4_2 = FC.chain_flatten('|hello|0|')
            print'===> SERVER-4'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('|hello|0|'))
            print('<'..string.rep('=',78))

            assert(#FC.errs==1 and FC.errs[1]==FC.MESSAGE10_NOTSUB)
        ]];
        [=[
            assert(#CHAIN4_2==2 and
                   CHAIN4_2[2].publication.payload==[['hello']])
            print'OK 4/4!'
        ]=];
    end

end

escape 0;
