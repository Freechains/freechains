#define DETERMINISTIC
#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1
///////////////////////////////////////////////////////////////////////////////

var[] byte chain0;
var[] byte chain1;

var int chain0_len = _;
var int chain1_len = _;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                    },
                },
            }

            MESSAGE {
                version = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = '1.1',
            }
        ]]

        await Init();
        await 100ms;
        await ClientMessages(&shared);
        await 100ms;

        [[
            MESSAGE {
                version = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = '1.2',
            }
        ]];
        await ClientMessages(&shared);

        [[
            chain0 = GG.chain_flatten('||0|')
            print('===> 0, #'..#chain0)
            print('>'..string.rep('=',78))
            print(tostring2(chain0))
            print('<'..string.rep('=',78))
        ]];
        chain0 = []..[[tostring2(chain0)]];
        chain0_len = [[#chain0]];
    end
with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'

            SERVER {
                host = { '127.0.0.1', '8331' },
            }

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8332' },
                    },
                },
            }

            MESSAGE {
                version = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = '2.1',
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
        var   int  port    = [[ APP.server.host[2] ]];
        var   int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await shared.ok;
        par/and do
            await shared.ok;
            await shared.ok;
            await shared.ok;
        with
            await ClientMessages(&shared);
            await 200ms;
            [[
                MESSAGE {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '2.2',
                }
            ]];
            await ClientMessages(&shared);
        end

        [[
            chain1 = GG.chain_flatten('||0|')
            print('===> 1, #'..#chain1)
            print('>'..string.rep('=',78))
            print(tostring2(chain1))
            print('<'..string.rep('=',78))
            assert(chain1[4] and chain1[4].publication.payload == '2.1', #chain1)
            assert(chain1[5] and chain1[5].publication.payload == '2.2', #chain1)
        ]];
        chain1 = []..[[tostring2(chain1)]];
        chain1_len = [[#chain1]];
    end

end

[[
    assert(@chain0_len==3 and @chain1_len==5)
    print'OK!'
]]

escape 0;
