#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 1<-0->2->1
//  - close the connection "1" during last message
//      - 0.3 is not received by "1" from "0", but from "2"
///////////////////////////////////////////////////////////////////////////////

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [=[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                    },
                    {
                        host = { '127.0.0.1', '8332' },
                    },
                },
            }
        ]=];

        await Init();

        native/plain _uv_stream_t_ptr;
        native/pre do
            typedef uv_stream_t* uv_stream_t_ptr;
        end
        code/await Disconnect (var _uv_stream_t_ptr h) -> void do
            await async (h) do
                emit UV_STREAM_ERROR(h,-_ECONNRESET);
            end
        end
        pool[1] Disconnect ds;

        var int i;
        loop i in [1 -> 3] do
            [=[
                APP.messages = {}
                MESSAGE {
                    id = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '0.'..@i
                }
            ]=];
            var&? ClientMessages c = spawn ClientMessages(&shared);

            // close 1st connection for 3rd message
            if i == 3 then
                // 2nd message
                var int j;
                loop j in [1 -> 2] do
                    // 4 connections
                    //  client -> server = 2
                    //  client -> server = 2
                    var _uv_connect_t&& c;
                    var int err;
                    (c,err) = await UV_STREAM_CONNECT;
                    if j == 1 then
                        spawn Disconnect(_ID(c:handle)) in ds;
                    end
                end
            end
            await c;
        end
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8331' },
            }
        ]];

        await Init();

        vector[] byte ip      = [] .. [[ APP.server.host[1] ]];
        var      int  port    = [[ APP.server.host[2] ]];
        var      int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&shared, &&ip[0], port, backlog);

        await shared.ok;
        await shared.ok;
        await shared.ok;
        await shared.ok;
        await shared.ok;
        [[
            CHAIN1 = GG.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN1==4 and
                    CHAIN1[4].txs[1]==[[0.3]])
            print'OK 1/2!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8332' },
            }
            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                    },
                },
            }
        ]];

        await Init();

        vector[] byte ip      = [] .. [[ APP.server.host[1] ]];
        var      int  port    = [[ APP.server.host[2] ]];
        var      int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&shared, &&ip[0], port, backlog);

        await shared.ok;
        await shared.ok;
        await shared.ok;
        [[
            CHAIN2 = GG.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN2==4 and
                    CHAIN2[4].txs[1]==[[0.3]])
            print'OK 2/2!'
        ]=];
    end

end

escape 0;
