#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1 ("same")
// 0->1 ("same")
//  - duplicated content
//  - results in two blocks
//      - both performed work
///////////////////////////////////////////////////////////////////////////////

input void ANY;

[[ dofile'src/common.lua' ]];

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [=[
        dofile 'cfg/config.lua'

        CLIENT {
            peers = {
                {
                    host = { '127.0.0.1', '8331' },
                },
            },
        }

        MESSAGE {
            id = '1.0',
            chain = {
                key   = '',
                zeros = 0,
            },
            payload = [[same]],
        }
    ]=];

    async do end;
    do ClientMessages;

    [=[
        APP.messages = {}
        MESSAGE {
            id = '1.0',
            chain = {
                key   = '',
                zeros = 0,
            },
            payload = [[same]],
        }
    ]=];

    do ClientMessages;
with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        SERVER {
            host = { '127.0.0.1', '8331' },
        }
    ]];
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 100ms;
    [[
        CHAIN1 = GG.chain_flatten('||0|')
        print'===> SERVER'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print('<'..string.rep('=',78))
    ]];

end

[=[
    assert( #CHAIN1==3 and
            CHAIN1[2].txs[1]==[[same]] and
            CHAIN1[3].txs[1]==[[same]] )
    print'OK!'
]=];

escape 0;
