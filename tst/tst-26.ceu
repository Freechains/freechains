#define DETERMINISTIC
#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// Read from "x.chain"
//  - 111,222
//  - 333,444
///////////////////////////////////////////////////////////////////////////////

[=[
    dofile 'src/common.lua'
    dofile 'cfg/config.lua'

    CHAINS {
        files = 'tst/files/',
        {
            key   = '',     -- global chain (cannot be signed)
            zeros = 0,      -- receive messages with 0 leading zeros in the hash
            id    = nil,    -- concat of key..zeros
            head  = nil,
            -- TODO: mode 'pub,sub,pub/sub'
        },
    }
    CLIENT {
        peers = {
            {
                host = { '127.0.0.1', '8331' },
            },
        },
    }
]=];

var UV_TCP_Server_Data shared = _;

await Init();

[=[
    MESSAGE {
        version = '1.0',
        chain = {
            key   = '',
            zeros = 0,
        },
        payload = [[111]],
    }

    MESSAGE {
        version = '1.0',
        chain = {
            key   = '',
            zeros = 0,
        },
        payload = [[222]],
    }
    MESSAGE {
        version = '1.0',
        chain = {
            key   = '',
            zeros = 0,
        },
        payload = [[333]],
    }

    MESSAGE {
        version = '1.0',
        chain = {
            key   = '',
            zeros = 0,
        },
        payload = [[444]],
    }
]=];
await ClientMessages(&shared);

[[
    head1 = APP.chains['||0|'].head
]]

var[] byte path = [].."x.chain";
await FS_read_10(&path);
[[
    head2 = ARGS.chain.head
    --old = APP.chains['||0|'].head_hash
    --APP.chains['||0|'].head_hash = ARGS.head_hash
    --print('>'..string.rep('=',78))
    --print(GG.chain_tostring('||0|'))
    --print('<'..string.rep('=',78))
    --APP.chains['||0|'].head_hash = old
]];

#if 0
[[
    print('>'..string.rep('=',78))
    print(GG.chain_tostring('||0|'))
    print('<'..string.rep('=',78))
]];

[[
    chain     = APP.chains['||0|']
    head_hash = chain.head_hash
    base      = GG.chain_head_base_size(head_hash).base
]];
#endif

[[
while head1.prv do
    assert(head2)

    local pub1 = head1.publication
    local pub2 = head2.publication
    assert(pub1.nonce   == pub2.nonce)
    assert(pub1.payload == pub2.payload)

    head1 = head1.prv
    head2 = head2.prv
end
print 'OK!'
]];

escape 0;
