#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 1<-0->2
//  - close the connection "2" during second message
//      - 0.2 is not received by "2", but 0.3 is, and then 0.2
///////////////////////////////////////////////////////////////////////////////

input void ANY;

[[ dofile'src/common.lua' ]];
native do
    uv_handle_t* XXX;
end

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [=[
        dofile 'cfg/config.lua'

        CLIENT {
            peers = {
                {
                    host = { '127.0.0.1', '8331' },
                },
                {
                    host = { '127.0.0.1', '8332' },
                },
            },
        }
    ]=];

    class Disconnect with
        var _uv_stream_t& h;
    do
        async (h) do
            emit UV_ERROR => (&&h,-_ECONNRESET);
        end
    end
    pool Disconnect[1] ds;

    async do end
    loop i in 3 do
        [=[
            APP.messages = {}
            MESSAGE {
                id = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = '0.'..@(i+1)
            }
        ]=];
        var ClientMessages c;

        // close 2nd connection for 2nd message
        if i == 1 then
            // 2nd message
            loop j in 2 do
                // 4 connections
                //  client -> server = 2
                //  client -> server = 2
                var _uv_connect_t&& c;
                var int err;
                (c,err) = await UV_CONNECT;
                if j == 0 then
                    spawn Disconnect in ds with
                        this.h = &_UNSAFE_POINTER_TO_ALIAS(c:handle);
                    end;
                end
            end
        end
        await c;
    end
with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        SERVER {
            host = { '127.0.0.1', '8331' },
        }
    ]];
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        CHAIN1 = GG.chain_flatten('||0|')
        print'===> SERVER'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        SERVER {
            host = { '127.0.0.1', '8332' },
        }
    ]];
    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        CHAIN2 = GG.chain_flatten('||0|')
        print'===> SERVER'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print('<'..string.rep('=',78))
    ]];
end

[=[
    assert( #CHAIN1==4 and
            CHAIN1[4].txs[1]==[[0.3]])
    assert( #CHAIN2==4 and
            CHAIN2[4].txs[1]==[[0.3]])
    print'OK!'
]=];


escape 0;
