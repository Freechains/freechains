#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 1<-0->2
//  - close the connection "2" during second message
//      - 0.2 is not received by "2", but 0.3 is, and then 0.2
///////////////////////////////////////////////////////////////////////////////

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [=[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                    },
                    {
                        host = { '127.0.0.1', '8332' },
                    },
                },
            }
        ]=];

        await Init();
        await 100ms;

        native/plain _uv_stream_t_ptr;
        native/pre do
            typedef uv_stream_t* uv_stream_t_ptr;
        end

        par/and do
            // close 2nd connection for 2nd message
            await UV_STREAM_CONNECT;
            await UV_STREAM_CONNECT;
            await UV_STREAM_CONNECT;
            do
                var _uv_connect_t&& c;
                (c,_) = await UV_STREAM_CONNECT;
                var _uv_stream_t_ptr s = c:handle;
                await async (s) do
                    emit UV_STREAM_ERROR(s, -_ECONNRESET);
                end
            end
        with
            var int i;
            loop i in [1 -> 3] do

                [=[
                    APP.messages = {}
                    MESSAGE {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '0.'..@i
                    }
                ]=];
                await ClientMessages(&shared);
            end
        end
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8331' },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
        var   int  port    = [[ APP.server.host[2] ]];
        var   int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        loop do
            var bool ok = [[ APP.chains['||0|'].head.length == 3 ]];
            if ok then
                break;
            end
            await shared.ok;
        end

        [[
            CHAIN1 = GG.chain_flatten('||0|')
            print'===> SERVER-1'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN1==4 and
                    CHAIN1[4].publication.payload==[[0.3]])
            print'OK 1/2!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8332' },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
        var   int  port    = [[ APP.server.host[2] ]];
        var   int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        loop do
            var bool ok = [[ APP.chains['||0|'].head.length == 2 ]];
            if ok then
                break;
            end
            await shared.ok;
        end

        [[
            CHAIN2 = GG.chain_flatten('||0|')
            print'===> SERVER-2'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN2==3 and
                    CHAIN2[3].publication.payload==[[0.3]])
            print'OK 2/2!'
        ]=];
    end

end

escape 0;
