#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1->0
///////////////////////////////////////////////////////////////////////////////

event none ok;

var[] byte chain0;
var[] byte chain1;

var int chain0_len = _;
var int chain1_len = _;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        shared.port = 0;
        [=[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'

            SERVER {
                host = { '127.0.0.1', '8330' },
            }

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                    },
                },
            }

            MESSAGE {
                version = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = [[0.1]],
            }
            MESSAGE {
                version = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = [[0.2]],
            }
        ]=];

        await Init();

        var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
        var   int  port    = [[ APP.server.host[2] ]];
        var   int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await 100ms;
        spawn ClientMessages(&shared);

        par/and do
            loop do
                [[
                    chain0 = GG.chain_flatten('||0|')
                    print'===> 0'
                    print('>'..string.rep('=',78))
                    print(tostring2(chain0))
                    print('<'..string.rep('=',78))
                ]];
                var bool ok = [[ APP.chains['||0|'].head.length == 4 ]];
                if ok then
                    break;
                end
                await shared.ok;
            end
            emit ok;
        with
            await ok;
            await ok;
        end

        chain0 = []..[[tostring2(chain0)]];
        chain0_len = [[#chain0]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        shared.port = 1;
        [=[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'

            SERVER {
                host = { '127.0.0.1', '8331' },
            }

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8330' },
                    },
                },
            }

            MESSAGE {
                version = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = [[1.1]],
            }
            MESSAGE {
                version = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = [[1.2]],
            }
        ]=];

        await Init();

        var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
        var   int  port    = [[ APP.server.host[2] ]];
        var   int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await shared.ok;
        spawn ClientMessages(&shared);

        par/and do
            loop do
                [[
                    chain1 = GG.chain_flatten('||0|')
                    print'===> 1'
                    print('>'..string.rep('=',78))
                    print(tostring2(chain1))
                    print('<'..string.rep('=',78))
                ]];
                var bool ok = [[ APP.chains['||0|'].head.length == 4 ]];
                if ok then
                    break;
                end
                await shared.ok;
            end
            emit ok;
        with
            await ok;
            await ok;
        end

        chain1 = []..[[tostring2(chain1)]];
        chain1_len = [[#chain1]];
    end

end

[[
    assert(@chain0_len==5 and @chain1_len==5, 'length')
    assert(@chain0 == @chain1, 'contents')
    print'OK!'
]]

escape 0;
