#define NO_PIGGYBACK
#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1->0
///////////////////////////////////////////////////////////////////////////////

event none ok;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            FC = require 'freechains'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8340',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                        },
                    },
                },
            }
        ]]

        var& Init init = spawn Init();
        await 100ms;

        spawn do
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '0.1',
                    }
                }
            ]]
            await Client(&init.shared);
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '0.2',
                    }
                }
            ]];
            await Client(&init.shared);
        end

        par/and do
            AWAIT_CHAIN_N(init.shared, '', 0, 5);
            await async do end;
            emit ok;
        with
            await ok;
            await ok;
        end

        [[
            FC.dot( FC.chains[''][0].head, '/tmp/tst-ah-00.dot' )
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            FC = require 'freechains'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8340 },
                        },
                    },
                },
            }
        ]]

        var& Init init = spawn Init();
        AWAIT_CHAIN_N(init.shared, '', 0, 2);
        await async do end;

        spawn do
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '1.1',
                    }
                }
            ]]
            await Client(&init.shared);
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '1.2',
                    }
                }
            ]];
            await Client(&init.shared);
        end

        par/and do
            AWAIT_CHAIN_N(init.shared, '', 0, 5);
            await async do end;
#if 0
            loop do
                var bool ok = [[ FC.chains[''][0].head.length == 4 ]];
                if ok then
                    break;
                end
                await shared.ok;
            end
#endif
            emit ok;
        with
            await ok;
            await ok;
        end

        [[
            FC.dot( FC.chains[''][0].head, '/tmp/tst-ah-01.dot' )
        ]];
    end

end

[[
    local tst   = assert(io.open('tst/dots/tst-ah.dot')):read'*a'
    local tmp00 = assert(io.open('/tmp/tst-ah-00.dot')):read'*a'
    local tmp01 = assert(io.open('/tmp/tst-ah-01.dot')):read'*a'
    assert(tst==tmp00 and tst==tmp01)

    print'OK!'
]]

escape 0;
