#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1<-2
//  - different blocks
//      - 0 sends xxx
//      - 2 sends 2.1+xxx+2.2
//  - 2.1+xxx+2.2 -> ''
///////////////////////////////////////////////////////////////////////////////

event none e;
event none ok;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8331 },
                        },
                    },
                },
            }
        ]]

        par/and do
            await Init();
            await 100ms;
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = 'xxx',
                    }
                }
            ]];
            await Client(&shared);
            emit e;
            emit ok;
        with
            await ok;
            await ok;
            await ok;
        end
        [[
            print'===> 000'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8331',
                    backlog = 128,
                },
                chains = {
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await ok;
        await ok;
        loop do
            var bool ok = [[ FC.chains['||0|'].head.length == 3 ]];
            if ok then
                break;
            end
            await shared.ok;
        end
        emit ok;
        [[
            CHAIN1 = FC.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN1==4 and
                    CHAIN1[4].publication.payload==[[2.2]])
            print'OK!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8331 },
                        },
                    },
                },
            }
        ]]

        par/and do
            await Init();
            await e;

            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '2.1',
                    }
                }
            ]]
            await Client(&shared);
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = 'xxx',
                    }
                }
            ]]
            await Client(&shared);
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '2.2',
                    }
                }
            ]];
            await Client(&shared);

            [[
                print'===> 222'
                print('>'..string.rep('=',78))
                print(FC.chain_tostring('||0|'))
                print('<'..string.rep('=',78))
            ]];
            emit ok;
        with
            await ok;
            await ok;
            await ok;
        end
    end

end

escape 0;
