#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1->2->0
///////////////////////////////////////////////////////////////////////////////

var[] byte chain0;
var[] byte chain1;
var[] byte chain2;

var int chain0_len = _;
var int chain1_len = _;
var int chain2_len = _;

event none ok;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        shared.port = 0;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8330',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            {
                                address = '127.0.0.1',
                                port    = '8331'
                            },
                        },
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await 100ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '0.1',
                }
            }
        ]]
        await Client(&shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '0.2',
                }
            }
        ]]
        await Client(&shared);

        loop do
            var bool ok = [[ FC.chains['||0|'].head.length == 4 ]];
            if ok then
                break;
            end
            await shared.ok;
        end

        [[
            chain0 = FC.chain_flatten('||0|')
            print'===> 0'
            print('>'..string.rep('=',78))
            print(tostring2(chain0))
            print('<'..string.rep('=',78))
        ]];
        chain0 = []..[[tostring2(chain0)]];
        chain0_len = [[#chain0]];

        emit ok;
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        shared.port = 1;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8331'
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            {
                                address = '127.0.0.1',
                                port    = '8332'
                            },
                        },
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog or 128 ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await shared.ok;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '1.1',
                }
            }
        ]]
        await Client(&shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '1.2',
                }
            }
        ]]
        await Client(&shared);

        loop do
            var bool ok = [[ FC.chains['||0|'].head.length == 4 ]];
            if ok then
                break;
            end
            await shared.ok;
        end

        [[
            chain1 = FC.chain_flatten('||0|')
            print'===> 1'
            print('>'..string.rep('=',78))
            print(tostring2(chain1))
            print('<'..string.rep('=',78))
        ]];
        chain1 = []..[[tostring2(chain1)]];
        chain1_len = [[#chain1]];

        emit ok;
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        shared.port = 2;
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8332',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            {
                                address = '127.0.0.1',
                                port    = '8330'
                            },
                        },
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        par/and do
            loop do
                var bool ok = [[ FC.chains['||0|'].head.length == 4 ]];
                if ok then
                    break;
                end
                await shared.ok;
            end

            [[
                chain2 = FC.chain_flatten('||0|')
                print'===> 2'
                print('>'..string.rep('=',78))
                print(tostring2(chain2))
                print('<'..string.rep('=',78))
            ]];
            chain2 = []..[[tostring2(chain2)]];
            chain2_len = [[#chain2]];
            emit ok;
        with
            var int i;
            loop i in [1 -> 3] do
                await ok;
            end
        end
    end

end

[[
    assert(@chain0_len==5 and @chain1_len==5 and @chain2_len==5)
    assert(@chain0 == @chain1)
    assert(@chain1 == @chain2)
    print'OK!'
]]

escape 0;
