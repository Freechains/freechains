#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1,2,3,4
//  - "1" ok
//  - "2" is not in "0" peers
//  - "3" does not receive '||0|' from "0"
//  - "4" is not sub'ed to '||0|'
///////////////////////////////////////////////////////////////////////////////

input void ANY;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [=[
        dofile 'cfg/config.lua'

        CLIENT {
            peers = {
                {
                    host = { '127.0.0.1', '8331' },
                },
                --{
                    --host = { '127.0.0.1', '8332' },
                --},
                {
                    host = { '127.0.0.1', '8333' },
                    chains = {},    -- 3 does not receive '||0|'
                },
                {
                    host = { '127.0.0.1', '8334' },
                },
            },
        }

        MESSAGE {
            id = '1.0',
            chain = {
                key   = '',
                zeros = 0,
            },
            payload = [[
Ola Mundo!
]],
        }
    ]=];

    do Init;

    async do end;
    do ClientMessages;
    await 1s;

    [[
        CHAIN0 = GG.chain_flatten('||0|')
        print'===> CLIENT'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        SERVER {
            host = { '127.0.0.1', '8331' },
        }
    ]];

    do Init;

    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        CHAIN1 = GG.chain_flatten('||0|')
        print'===> SERVER'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        SERVER {
            host = { '127.0.0.1', '8332' },
        }
    ]];

    do Init;

    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        CHAIN2 = GG.chain_flatten('||0|')
        print'===> SERVER'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 3
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        SERVER {
            host = { '127.0.0.1', '8333' },
        }
    ]];

    do Init;

    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        CHAIN3 = GG.chain_flatten('||0|')
        print'===> SERVER'
        print('>'..string.rep('=',78))
        print(GG.chain_tostring('||0|'))
        print('<'..string.rep('=',78))
    ]];
with

///////////////////////////////////////////////////////////////////////////////
// 4
///////////////////////////////////////////////////////////////////////////////

    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    ///////////////////////////////////////////////////////////////////////////

    [[
        dofile 'cfg/config.lua'
        CHAINS {
            -- not sub'ed
        }
        SERVER {
            host = { '127.0.0.1', '8334' },
        }
    ]];

    do Init;

    var char[] ip      = [[ APP.server.host[1] ]];
    var int    port    = [[ APP.server.host[2] ]];
    var int    backlog = [[ APP.server.backlog ]];
    _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
    var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

    await 1s;
    [[
        assert(not APP.chains['||0|'])
        assert(#APP.errs==1 and APP.errs[1]==GG.MESSAGE10_NOTSUB)
    ]];
end

[[
    assert(#CHAIN1==2 and #CHAIN2==1 and #CHAIN3==1 and CHAIN4==nil)
    print'OK!'
]]

escape 0;
