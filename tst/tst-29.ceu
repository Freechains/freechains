#include "common.ceu"

_srand(_time(null));

///////////////////////////////////////////////////////////////////////////////
// 0->1->...->N->0
///////////////////////////////////////////////////////////////////////////////

#define N 2

code/await Node (var int i) -> none
    throws Exception.Lua
do
    lua[] do
        var int local  = 8330+i;
        var int remote = 8331+i;
        if i == (N-1) then
            remote = 8330;
        end

        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = @local,
                },
                chains = {
                    not_persistency = true,
                    [1] = {
                        key   = 'tst-29',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=@remote },
                        },
                    },
                },
            }
        ]]

        var& Init init = spawn Init();
        await 100ms;

        do
#if 0
            spawn do
                var int  a;
                var bool err;
                var int  c;
                every (a,err,c) in init.shared.ok do
#if 0
[[
print(@i, '>'..string.rep('=',70))
print(FC.chain_tostring('|tst-29|0|'))
print(@i, '<'..string.rep('=',70))
]];
#endif

                    if err then
                        _printf("server | err | %d %d %d\n", a,err,c);
                    end
                end
            end
#endif

            var int j;
            loop j in [0 -> N[ do
                // how much time between each message?
                await (_rand()%100) ms;
                [[
                    ARGS = {
                        message = {
                            version = '1.0',
                            chain = {
                                key   = 'tst-29',
                                zeros = 0,
                            },
                            payload = string.format('%03d',@i)..'.'..string.format('%03d',@j),
                        }
                    }
                ]];
                await Client(&init.shared);
//[[print(@i,@j, "clients") ]];
            end

            // wait all messages to be received
            AWAIT_CHAIN_LENGTH(init.shared, 'tst-29', 0, N*N);

            // wait for consensus
            loop do
                watching init.shared.ok_server do
                    await (N*N)s;
                    break;
                end
            end
        end

#if 1
[[
print(@i, '>'..string.rep('=',70))
print(FC.chain_tostring('|tst-29|0|'))
print(@i, '<'..string.rep('=',70))
]];
#endif
        [[ ARGS = { chain=FC.chains['tst-29'][0] } ]];
        await FS_write_10();
    end
end

pool[N] Node nodes;

var int i;
loop i in [0 -> N[ do
    spawn Node(i) in nodes;
end

// wait all nodes to terminate
var&? Node n;
loop n in nodes do
    await n;
end

_printf("BLOCKS_RECEIVED  = %d\n", {BLOCKS_RECEIVED});
//_ceu_dbg_assert({BLOCKS_RECEIVED} == N*N);

// assert consensus
[[ file1 = io.open('/tmp/freechains/8330/chains/|tst-29|0|.chain'):read'*a' ]]
var int i;
loop i in [0 -> N[ do
    [[
        file2 = io.open('/tmp/freechains/'..@(8330+i)..'/chains/|tst-29|0|.chain'):read'*a'
        assert(file1 == file2, 'differ')
    ]]
end

[[ print'OK!' ]];

escape 0;
