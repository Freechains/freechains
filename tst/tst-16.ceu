#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 1<-0->2
//  - close the connection "1" during last message
//      - 0.3 is not received by "1"
///////////////////////////////////////////////////////////////////////////////

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                            { address='127.0.0.1', port=8342 },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await 100ms;

        native/plain _uv_stream_t_ptr;
        native/pre do
            typedef uv_stream_t* uv_stream_t_ptr;
        end
        code/await Disconnect (var _uv_stream_t_ptr h) -> none do
            await async (h) do
                emit UV_STREAM_ERROR(h,-_ECONNRESET);
            end
        end
        pool[1] Disconnect ds;

        var int i;
        loop i in [1 -> 3] do
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '0.'..@i
                    }
                }
            ]];
            var&? Client c = spawn Client(&init.shared);

            // close 1st connection for 3rd message
            if i == 3 then
                // 2nd message
                var int j;
                loop j in [1 -> 1] do
                    // 4 connections
                    //  client -> server = 2
                    //  client -> server = 2
                    var _uv_connect_t&& c;
                    var int err;
                    (c,err) = await UV_STREAM_CONNECT;
                    if j == 1 then
                        spawn Disconnect(_ID(c:handle)) in ds;
                    end
                end
            end
            await c;
        end
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        AWAIT_CHAIN_LENGTH(init.shared, '', 0, 2);
        [[
            CHAIN1 = FC.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN1==3 and
                    CHAIN1[3].pub.payload==[[0.2]])
            print'OK 1/2!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8342',
                    backlog = 128,
                },
                chains = {
                    not_persistency = true,
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        AWAIT_CHAIN_LENGTH(init.shared, '', 0, 3);
        [[
            CHAIN2 = FC.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN2==4 and
                    CHAIN2[4].pub.payload==[[0.3]])
            print'OK 2/2!'
        ]=];
    end

end

escape 0;
