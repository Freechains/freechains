#define DETERMINISTIC

#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1<-2
//  - different blocks
//      - 0 sends 0.1 first
//      - 2 sends 2.1+2.2 second
//  - 2 wins
//  - 0.1 -> 2.1+2.2 -> ''
///////////////////////////////////////////////////////////////////////////////

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = val UV_TCP_Server_Data(_,_,_,0);
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8330',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8331 },
                        },
                    },
                },
            }
        ]]

        await Init();
        await 100ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '0.1',
                }
            }
        ]];
        await Client(&shared);
    end
with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = val UV_TCP_Server_Data(_,_,_,1);
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8331',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        await Init();

        var[] byte ip      = [] .. [[ CFG.server.address ]] .. [0];
        var   int  port    = [[ CFG.server.port ]];
        var   int  backlog = [[ CFG.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

spawn do
    every 1s do
        [[ print('>>>', @shared.port, FC.chains[''][0].head.length, tostring2(FC.chains[''][0].head.hash)) ]];
    end
end

        loop do
            var bool ok = [[ FC.chains[''][0].head.length == 2 ]];
            if ok then
                break;
            end
            await shared.ok;
        end
        await shared.ok;

        [[
            CHAIN1 = FC.chain_flatten('||0|')
            print'===> 1'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))

            assert( #CHAIN1==3 and
                    CHAIN1[2].publication.payload=='2.1' and
                    CHAIN1[3].publication.payload=='0.1' )
            print'OK!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = val UV_TCP_Server_Data(_,_,_,2);
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8332',
                    backlog = 128,
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8331 },
                        },
                    },
                },
            }
        ]];

        await Init();
        await 200ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '2.1',
                }
            }
        ]];
        await Client(&shared);
        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '2.2',
                }
            }
        ]];
        await Client(&shared);

        [[
            CHAIN2 = FC.chain_flatten('||0|')
            print'===> 2'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
    end

end

escape 0;
