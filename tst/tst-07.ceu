#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1
//  - send the same head twice
//  - results in only one block
///////////////////////////////////////////////////////////////////////////////

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [=[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                    },
                },
            }

            MESSAGE {
                version = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = [[same]],
            }
        ]=];

        await Init();
        await 100ms;
        await ClientMessages(&shared);

        var int i;
        loop i in [0 -> 10[ do
            [[
                APP.messages = {}
                ARGS = {
                    chain = assert(APP.chains['||0|'].head.chain),
                }
            ]];
            await Client_10(&shared);
        end
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        [[
            dofile 'src/common.lua'
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8331' },
            }
        ]];
        var[] byte ip      = [] .. [[ APP.server.host[1] ]] .. [0];
        var   int  port    = [[ APP.server.host[2] ]];
        var   int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&&ip[0], port, backlog, _, &shared);

        await Init();
        await shared.ok;
        await shared.ok;
        [[
            CHAIN1 = GG.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN1==2 and CHAIN1[2].publication.payload==[[same]] )
            print'OK!'
        ]=];
    end

end

escape 0;
