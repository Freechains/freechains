#define DETERMINISTIC
#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0,0->1<-2
//  - different blocks
//      - 0 sends 0.1
//      - 2 sends 2.1+2.2
//      - 0 sends 0.2
///////////////////////////////////////////////////////////////////////////////

event int e;
event none ok;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                not_persistency = true,
                zeros_raise = TODO,     -- global and per-chain
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                        },
                    },
                },
            }
        ]]

        var& Init init = spawn Init();
        await 100ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '0.1',
                }
            }
        ]];
        await Client(&init.shared);

        emit e(1);
        var int v = await e until v==2;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '0.2',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            print'===> 000'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        emit ok;
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                not_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];
        spawn Init();
        await ok;
        await ok;
        [[
            CHAIN1 = FC.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN1==3 and
                    CHAIN1[2].pub.payload==[[2.1]] and
                    CHAIN1[3].pub.payload==[[0.1]] )
            print'OK!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                not_persistency = true,
                zeros_raise = TODO,     -- global and per-chain
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                        },
                    },
                },
            }
        ]]
        var& Init init = spawn Init();
        var int v = await e until v==1;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '2.1',
                }
            }
        ]]
        await Client(&init.shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = '2.2',
                }
            }
        ]];
        await Client(&init.shared);

        emit e(2);
        emit ok;
        [[
            print'===> 111'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
    end

end

escape 0;
