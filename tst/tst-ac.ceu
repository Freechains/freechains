#include "common.ceu"

[[
    dofile 'src/common.lua'
    CHAINS {
        files = 'tst/files/',
        {
            key   = '',     -- global chain (cannot be signed)
            zeros = 36,      -- receive messages with 0 leading zeros in the hash
            id    = nil,    -- concat of key..zeros
            head  = nil,    -- hash of newest block
            -- TODO: mode 'pub,sub,pub/sub'
        },
    }
]]

do
    var[HASH_BYTES] byte chain_hash;
    _ceu_vector_setlen(&&chain_hash, HASH_BYTES, 1);
    var[] byte chain_id = [] .. [[ APP.chains[1].id ]];
    _crypto_generichash(&&chain_hash[0],HASH_BYTES, &&chain_id[0],$chain_id, null,0);
    [[
        APP.chains[1].hash = @chain_hash
    ]]
end

// PUBLICATION //

[[
    THIS = {
        publication = {
            chain     = APP.chains[1],
            timestamp = 0,
            nonce     = 0,
            payload   = '111',
            hash      = nil,
        },
    }
    ARGS = THIS
]]
await Publication_New();
[[
    print('>>>', THIS.publication.timestamp, THIS.publication.nonce, tostring2(THIS.publication.hash,true))
    assert(THIS.publication.hash == '\x00\x00\x00\x00\x1F\x4C\x36\xF2\xDE\xE3\x30\xEF\x6E\x81\xDA\x25\x96\xD2\x85\xF7\x52\x95\xF7\xB6\x2B\xDE\xFB\x01\x19\x19\x24\x8A')
    assert(THIS.publication.timestamp == 0)
    assert(THIS.publication.nonce == 0)
]]

do
    [[ THIS.publication.payload = '222' ]]
    var Exception.Freechains.Malformed? e;
    catch e do
        await Publication_Check();
    end
    _ceu_assert(e?, "bug found");

    [[ THIS.publication.payload = '111' ]]
    var Exception.Freechains.Malformed? f;
    catch f do
        await Publication_Check();
    end
    _ceu_assert(not f?, "bug found");
end

// BLOCK //

[[
    THIS.block = {
        version = '1.0',
        timestamp   = 0,
        nonce       = 0,
        chain       = THIS.publication.chain,
        publication = THIS.publication,
        hash        = nil,
        prv         = nil,
        nxt         = nil,
    }
    FIRST = THIS.block
]]
await Block_Hash_Link();
[[
    print('>>>', THIS.block.timestamp, THIS.block.nonce, tostring2(THIS.block.hash,true))
    assert(THIS.block.hash == '\x6F\xD2\xCC\xE9\x82\xAF\x49\xAB\xB5\xDD\x6B\x6A\x06\x76\x83\x57\x1C\x9E\xB0\x83\x37\x98\x87\xC6\xC4\x91\xB0\xA7\x24\x36\x7C\x91')
    assert(THIS.block.timestamp == 0)
    assert(THIS.block.nonce == 2)
    assert(THIS.block.prv == nil)
    assert(THIS.block.nxt == nil)
    assert(THIS.block.chain.head == THIS.block)
]]

do
    [[ THIS.block.prv = THIS.block ]]
    var Exception.Freechains.Malformed? e;
    catch e do
        [[ ARGS = THIS ]]
        await Block_Check();
    end
    _ceu_assert(e?, "bug found");

    [[ THIS.block.prv = nil ]]
    var Exception.Freechains.Malformed? f;
    catch f do
        [[ ARGS = THIS ]]
        await Block_Check();
    end
    _ceu_assert(not f?, "bug found");
end

// MESSAGES //

[[
    MESSAGE {
        id = '1.0',
        chain = {
            key   = '',
            zeros = 36,
        },
        payload = '222',
    }
    MESSAGE {
        id = '1.0',
        chain = {
            key   = '',
            zeros = 36,
        },
        payload = '333',
    }
]];

var int ms = [[ #APP.messages ]];
var int i;
loop i in [1 -> ms] do
    [[
        THIS = {}
        msg = APP.messages[@i]
        THIS.publication = {
            chain     = assert(GG.chain_parse_get(msg.chain), msg.chain.id),
            timestamp = 0,    -- TODO: 64-bit timestamp
            nonce     = 0,
            payload   = msg.payload,
            hash      = nil,
        }
        ARGS = THIS
    ]]
    await Publication_New();
    [[
        THIS.block = {
            version = '1.0',
            timestamp   = 0,    -- TODO: 64-bit timestamp
            nonce       = 0,
            chain       = THIS.publication.chain,
            publication = THIS.publication,
            hash        = nil,
            prv         = nil,
            nxt         = nil,
        }
        ARGS = THIS
    ]]
    await Block_Hash_Link();
end

[[
    assert(FIRST.publication.payload == '111')
    assert(FIRST.nxt.publication.payload == '222')
    assert(FIRST.nxt.nxt.publication.payload == '333')
]]

escape 0;
