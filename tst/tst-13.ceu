/*
12 um fork grande que acumula o passado em um unico bloco
*/

#define DETERMINISTIC
#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1<-2
//  - 0 sends 0.1
//  - 0 sends 0.2
//  - ...     0.8
//  - 2 sends 2.1,2.2,...,2.9
//  - (2.1,...,2.9) -> (0.1,...,0.8) -> ''
///////////////////////////////////////////////////////////////////////////////

event none e;

par/or do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await 100ms;

        var int i;
        loop i in [1 -> 8] do
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '0.'..@i
                    }
                }
            ]];
            await Client(&init.shared);
        end
        emit e;
        await FOREVER;
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                server = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                chains = {
                    not_persistency = true,
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        AWAIT_CHAIN_LENGTH(init.shared, '', 0, 17);

        [[
            CHAIN1 = FC.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        [=[
            assert( #CHAIN1==18 and
                    CHAIN1[2].pub.payload==[[2.1]] and
                    CHAIN1[18].pub.payload==[[0.8]])
            print'OK!'
        ]=];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341 },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await e;

        var int i;
        loop i in [1 -> 9] do
            [[
                ARGS = {
                    message = {
                        version = '1.0',
                        chain = {
                            key   = '',
                            zeros = 0,
                        },
                        payload = '2.'..@i
                    }
                }
            ]];
            await Client(&init.shared);
        end
        await FOREVER;
    end

end

escape 0;
