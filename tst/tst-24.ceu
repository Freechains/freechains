#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1,2
//  - zeros = 21,22
//  - "1" receives 22, "0" doesn't send lower
//  - "2" receives 22, "0" sends all
//  - "3" receives any, "0" sends all
//  - "4" receives any, "0" sends 22
//  - send 21, 22
///////////////////////////////////////////////////////////////////////////////

vector[] byte chain1_2;
vector[] byte chain2_2;
vector[] byte chain3_2;
vector[] byte chain4_2;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        spawn App(&shared);
        [=[
            dofile 'cfg/config.lua'

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                        chains = { APP.chains['||22|'] },
                    },
                    {
                        host = { '127.0.0.1', '8332' },
                    },
                    {
                        host = { '127.0.0.1', '8333' },
                    },
                    {
                        host = { '127.0.0.1', '8334' },
                        chains = { APP.chains['||22|'] },
                    },
                },
            }
        ]=];

        [=[
            MESSAGE {
                id = '1.0',
                chain = {
                    key   = '',
                    zeros = 22,
                },
                payload = [[22.1]],
            }
        ]=];

        await Init();

        await ClientMessages(&shared);

        [=[
            MESSAGE {
                id = '1.0',
                chain = {
                    key   = '',
                    zeros = 21,
                },
                payload = [[21.1]],
            }
        ]=];
        await ClientMessages(&shared);

        [=[
            MESSAGE {
                id = '1.0',
                chain = {
                    key   = '',
                    zeros = 22,
                },
                payload = [[22.2]],
            }
        ]=];
        await ClientMessages(&shared);

        [=[
            MESSAGE {
                id = '1.0',
                chain = {
                    key   = '',
                    zeros = 21,
                },
                payload = [[21.2]],
            }
        ]=];
        await ClientMessages(&shared);

        await 1s;

        [[
            CHAIN0_1 = GG.chain_flatten('||21|')
            CHAIN0_2 = GG.chain_flatten('||22|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||21|'))
            print(GG.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        spawn App(&shared);
        [[
            dofile 'cfg/config.lua'

            CHAINS {
                {
                    key   = '',
                    zeros = 22,
                },
            }

            SERVER {
                host = { '127.0.0.1', '8331' },
            }
        ]];

        await Init();

        vector[] byte ip      = [] .. [[ APP.server.host[1] ]];
        var      int  port    = [[ APP.server.host[2] ]];
        var      int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&shared, &&ip[0], port, backlog);

        await 20s;
        [[
            CHAIN1_2 = GG.chain_flatten('||22|')
            print'===> SERVER-1'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
            assert(#APP.errs==0)
        ]];
        chain1_2 = []..[[tostring2(CHAIN1_2)]];
        [[
            assert(#CHAIN1_2==3 and CHAIN1_2[3].txs[1]=='22.2')
            print'OK 1/3!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        spawn App(&shared);
        [[
            dofile 'cfg/config.lua'

            CHAINS {
                {
                    key   = '',
                    zeros = 22,
                },
            }

            SERVER {
                host = { '127.0.0.1', '8332' },
            }
        ]];

        await Init();

        vector[] byte ip      = [] .. [[ APP.server.host[1] ]];
        var      int  port    = [[ APP.server.host[2] ]];
        var      int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&shared, &&ip[0], port, backlog);

        await 20s;
        [[
            CHAIN2_2 = GG.chain_flatten('||22|')
            print'===> SERVER-2'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
            assert(#APP.errs==2 and APP.errs[1]==GG.MESSAGE10_NOTSUB)
        ]];
        chain2_2 = []..[[tostring2(CHAIN2_2)]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 3
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        spawn App(&shared);
        [[
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8333' },
            }
        ]];

        await Init();

        vector[] byte ip      = [] .. [[ APP.server.host[1] ]];
        var      int  port    = [[ APP.server.host[2] ]];
        var      int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&shared, &&ip[0], port, backlog);

        await 20s;
        [[
            CHAIN3_1 = GG.chain_flatten('||21|')
            CHAIN3_2 = GG.chain_flatten('||22|')
            print'===> SERVER-3'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||21|'))
            print(GG.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
        ]];
        chain3_2 = []..[[tostring2(CHAIN3_2)]];
        [[
            assert(#CHAIN3_1==3 and CHAIN3_1[3].txs[1]=='21.2')
            print'OK 2/3!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 4
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        spawn App(&shared);
        [[
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8334' },
            }
        ]];

        await Init();

        vector[] byte ip      = [] .. [[ APP.server.host[1] ]];
        var      int  port    = [[ APP.server.host[2] ]];
        var      int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&shared, &&ip[0], port, backlog);

        await 20s;
        [[
            CHAIN4_1 = GG.chain_flatten('||21|')
            CHAIN4_2 = GG.chain_flatten('||22|')
            print'===> SERVER-4'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||21|'))
            print(GG.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
        ]];
        chain4_2 = []..[[tostring2(CHAIN4_2)]];
    end

end

[[
    assert(@chain1_2 == @chain2_2)
    assert(@chain1_2 == @chain3_2)
    assert(@chain1_2 == @chain4_2)
    print'OK 3/3!'
]];

escape 0;
