#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1,2
//  - zeros = 21,22
//  - "1" receives 22, "0" doesn't send lower
//  - "2" receives 22, "0" sends all
//  - "3" receives any, "0" sends all
//  - "4" receives any, "0" sends 22
//  - send 21, 22
///////////////////////////////////////////////////////////////////////////////

var[] byte chain1_2;
var[] byte chain2_2;
var[] byte chain3_2;
var[] byte chain4_2;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341, zeros=22, },
                            { address='127.0.0.1', port=8342 },
                            { address='127.0.0.1', port=8343 },
                            { address='127.0.0.1', port=8344, zeros=22, },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await 100ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 22,
                    },
                    payload = '22.1',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 21,
                    },
                    payload = '21.1',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 22,
                    },
                    payload = '22.2',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 21,
                    },
                    payload = '21.2',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            CHAIN0_1 = FC.chain_flatten('||21|')
            CHAIN0_2 = FC.chain_flatten('||22|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||21|'))
            print(FC.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 22,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        AWAIT_CHAIN_LENGTH(init.shared, '', 22, 2);
        [[
            CHAIN1_2 = FC.chain_flatten('||22|')
            print'===> SERVER-1'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
            assert(#FC.errs==0, FC.errs[1])
        ]];
        chain1_2 = []..[[tostring2(CHAIN1_2)]];
        [[
            assert(#CHAIN1_2==3 and CHAIN1_2[3].pub.payload=='22.2')
            print'OK 1/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8342',
                    backlog = 128,
                },
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 22,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        AWAIT_CHAIN_LENGTH(init.shared, '', 22, 2);
        [[
            CHAIN2_2 = FC.chain_flatten('||22|')
            print'===> SERVER-2'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
            print('>>>', #FC.errs, FC.errs[1], FC.MESSAGE10_NOTSUB)
            assert(#FC.errs==2 and FC.errs[1]==FC.MESSAGE10_NOTSUB)
        ]];
        chain2_2 = []..[[tostring2(CHAIN2_2)]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 3
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8343',
                    backlog = 128,
                },
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        par/and do
            AWAIT_CHAIN_LENGTH(init.shared, '', 21, 2);
        with
            AWAIT_CHAIN_LENGTH(init.shared, '', 22, 2);
        end
        [[
            CHAIN3_1 = FC.chain_flatten('||21|')
            CHAIN3_2 = FC.chain_flatten('||22|')
            print'===> SERVER-3'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||21|'))
            print(FC.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
        ]];
        chain3_2 = []..[[tostring2(CHAIN3_2)]];
        [[
            assert(#CHAIN3_1==3 and CHAIN3_1[3].pub.payload=='21.2')
            print'OK 2/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 4
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8344',
                    backlog = 128,
                },
                chains = {
                    not_persistency = true,
                    zeros_raise = TODO,     -- global and per-chain
                    [1] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        AWAIT_CHAIN_LENGTH(init.shared, '', 22, 2);
        [[
            CHAIN4_1 = FC.chain_flatten('||21|')
            CHAIN4_2 = FC.chain_flatten('||22|')
            print'===> SERVER-4'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('||21|'))
            print(FC.chain_tostring('||22|'))
            print('<'..string.rep('=',78))
        ]];
        chain4_2 = []..[[tostring2(CHAIN4_2)]];
        [[
            print'OK 3/4!'
        ]];
    end

end

[[
    assert(@chain1_2 == @chain2_2)
    assert(@chain1_2 == @chain3_2)
    assert(@chain1_2 == @chain4_2)
    print'OK 4/4!'
]];

escape 0;
