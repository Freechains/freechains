#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1,2
//  - zeros = 21,22
//  - "1" receives 22, "0" doesn't send lower
//  - "2" receives 22, "0" sends all
//  - "3" receives any, "0" sends all
//  - "4" receives any, "0" sends 22
//  - send 21, 22
///////////////////////////////////////////////////////////////////////////////

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                        peers = {
                            { address='127.0.0.1', port=8341, zeros=22, },
                            { address='127.0.0.1', port=8342 },
                            { address='127.0.0.1', port=8343 },
                            { address='127.0.0.1', port=8344, zeros=22, },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await 200ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 22,
                    },
                    payload = '22.1',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 21,
                    },
                    payload = '21.1',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 22,
                    },
                    payload = '22.2',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = '',
                        zeros = 21,
                    },
                    payload = '21.2',
                }
            }
        ]];
        await Client(&init.shared);

        [[
            FC.dot( FC.chains[''][21].head, '/tmp/tst-24-21-00.dot' )
            FC.dot( FC.chains[''][22].head, '/tmp/tst-24-22-00.dot' )
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 22,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        AWAIT_CHAIN_N(init.shared, '', 22, 3);

        [[
            --FC.dot( FC.chains[''][21].head, '/tmp/tst-24-21-01.dot' )
            FC.dot( FC.chains[''][22].head, '/tmp/tst-24-22-01.dot' )
            print'OK 1/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 2
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8342',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 22,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        AWAIT_CHAIN_N(init.shared, '', 22, 3);

        [[
            --FC.dot( FC.chains[''][21].head, '/tmp/tst-24-21-02.dot' )
            FC.dot( FC.chains[''][22].head, '/tmp/tst-24-22-02.dot' )
            print'OK 2/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 3
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8343',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        par/and do
            AWAIT_CHAIN_N(init.shared, '', 21, 3);
        with
            AWAIT_CHAIN_N(init.shared, '', 22, 3);
        end
        [[
            FC.dot( FC.chains[''][21].head, '/tmp/tst-24-21-03.dot' )
            FC.dot( FC.chains[''][22].head, '/tmp/tst-24-22-03.dot' )
            print'OK 2/4!'
        ]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 4
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8344',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    [''] = {
                        key   = '',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await init.ok;
        AWAIT_CHAIN_N(init.shared, '', 22, 3);
        [[
            FC.dot( FC.chains[''][21].head, '/tmp/tst-24-21-04.dot' )
            FC.dot( FC.chains[''][22].head, '/tmp/tst-24-22-04.dot' )
            print'OK 3/4!'
        ]];
    end

end

[[
    local tst_21_00 = assert(io.open('tst/dots/tst-24-21-00.dot')):read'*a'
    local tst_22_00 = assert(io.open('tst/dots/tst-24-22-00.dot')):read'*a'
    local tst_21_04 = assert(io.open('tst/dots/tst-24-21-04.dot')):read'*a'

    local tmp_21_00 = assert(io.open('/tmp/tst-24-21-00.dot')):read'*a'
    local tmp_22_00 = assert(io.open('/tmp/tst-24-22-00.dot')):read'*a'

    local tmp_21_01 = assert(not io.open('/tmp/tst-24-21-01.dot'))
    local tmp_22_01 = assert(io.open('/tmp/tst-24-22-01.dot')):read'*a'

    local tmp_21_02 = assert(not io.open('/tmp/tst-24-21-02.dot'))
    local tmp_22_02 = assert(io.open('/tmp/tst-24-22-02.dot')):read'*a'

    local tmp_21_03 = assert(io.open('/tmp/tst-24-21-03.dot')):read'*a'
    local tmp_22_03 = assert(io.open('/tmp/tst-24-22-03.dot')):read'*a'

    local tmp_21_04 = assert(io.open('/tmp/tst-24-21-04.dot')):read'*a'
    local tmp_22_04 = assert(io.open('/tmp/tst-24-22-04.dot')):read'*a'

    assert(tst_21_00==tmp_21_00 and tst_21_00==tmp_21_03)
    assert(tst_22_00==tmp_22_00 and tst_22_00==tmp_22_01 and tst_22_00==tmp_22_02 and tst_22_00==tmp_22_03 and tst_22_00==tmp_22_04)
    assert(tst_21_04==tmp_21_04)

    print'OK 4/4!'
]];

escape 0;
