#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1
// Read "x.chain":
//  - 111,222
//  - 333,444
// Put 555
//  - 111,222
//  - 333,444
//  - 555
///////////////////////////////////////////////////////////////////////////////

vector[] byte chain0;
vector[] byte chain1;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        spawn App(&shared);
        [=[
            dofile 'cfg/config.lua'

            CLIENT {
                peers = {
                    {
                        host = { '127.0.0.1', '8331' },
                    },
                },
            }

            MESSAGE {
                id = '1.0',
                chain = {
                    key   = '',
                    zeros = 0,
                },
                payload = [[555]],
            }
        ]=];

        await Init();

        vector[] byte src = [].."x.chain";
        var int ret = await FS_read_10(&src);
        _ceu_dbg_assert(ret == _ERR_NONE);
        [[
            APP.chains['||0|'].head_hash = ARGS.head_hash
        ]];

        await ClientMessages(&shared);
        await 1s;

        [[
            CHAIN0 = GG.chain_flatten('||0|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        chain0 = []..[[tostring2(CHAIN0)]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        var UV_TCP_Server_Data shared = _;
        spawn App(&shared);
        [[
            dofile 'cfg/config.lua'
            SERVER {
                host = { '127.0.0.1', '8331' },
            }
        ]];

        await Init();

        vector[] byte ip      = [] .. [[ APP.server.host[1] ]];
        var      int  port    = [[ APP.server.host[2] ]];
        var      int  backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", &&ip[0], port);
        spawn UV_TCP_Server(&shared, &&ip[0], port, backlog);

        await 1s;
        [[
            CHAIN1 = GG.chain_flatten('||0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(GG.chain_tostring('||0|'))
            print('<'..string.rep('=',78))
        ]];
        chain1 = []..[[tostring2(CHAIN1)]];
        [[
            assert( #CHAIN1==4 and CHAIN1[4].txs[1]=='555' )
            print'OK! 1/2'
        ]]
    end

end

[[
    assert(@chain0 == @chain1)
    print'OK! 2/2'
]]

escape 0;
