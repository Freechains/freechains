#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1
// Read "x.chain":
//  - 111,222
//  - 333,444
// Put 555
//  - 111,222
//  - 333,444
//  - 555
///////////////////////////////////////////////////////////////////////////////

var[] byte chain0;
var[] byte chain1;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                chains = {
                    ['tst-25'] = {
                        key   = 'tst-25',
                        zeros = 0,
                        peers = {
                            {
                                address = '127.0.0.1',
                                port    = '8341'
                            },
                        },
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        await 100ms;

        [[
            ARGS = {
                message = {
                    version = '1.0',
                    chain = {
                        key   = 'tst-25',
                        zeros = 0,
                    },
                    payload = '555',
                }
            }
        ]]
        await Client(&init.shared);

        [[
            CHAIN0 = FC.chain_flatten('|tst-25|0|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('|tst-25|0|'))
            print('<'..string.rep('=',78))
        ]];
        chain0 = []..[[FC.tostring(CHAIN0)]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            dofile 'src/common.lua'
            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341',
                    backlog = 128,
                },
                no_persistency = true,
                chains = {
                    ['tst-25'] = {
                        key   = 'tst-25',
                        zeros = 0,
                    },
                },
            }
        ]];

        var& Init init = spawn Init();
        AWAIT_CHAIN_LENGTH(init.shared, 'tst-25', 0, 5);
        [[
            CHAIN1 = FC.chain_flatten('|tst-25|0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(FC.chain_tostring('|tst-25|0|'))
            print('<'..string.rep('=',78))
        ]];
        chain1 = []..[[FC.tostring(CHAIN1)]];
        [[
            assert( #CHAIN1==6 and CHAIN1[6].pub.payload=='555' )
            print'OK! 1/2'
        ]]
    end

end

[[
    assert(@chain0 == @chain1)
    print'OK! 2/2'
]]

escape 0;
