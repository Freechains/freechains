#include "common.ceu"

[[
    FC = require 'freechains'
    key = ''
    zeros = 1
    FC.chains[key] = FC.chains[key] or { pubs={} }
    assert(not FC.chains[key][zeros])
    local id = '|'..key..'|'..zeros..'|'
    local new = {
        cache = {},
        key   = key,
        zeros = zeros,
        id    = id,
        up    = FC.chains[key],
        cfg   = nil,
        head  = nil,
        n     = 0,
    }
    FC.chains[key][zeros] = new
]]

do
    var[HASH_BYTES] byte chain_hash;
    _ceu_vector_setlen(&&chain_hash, HASH_BYTES, 1);
    var[] byte chain_id = [] .. [[ FC.chains[''][1].id ]];
    _crypto_generichash(&&chain_hash[0],HASH_BYTES, &&chain_id[0],$chain_id, null,0);
    [[
        FC.chains[''][1].head = FC.node{ chain=FC.chains[''][1], hash=@chain_hash }
    ]]
end

// PUBLICATION //

[[
    THIS = {
        pub = {
            chain     = FC.chains[''][1],
            timestamp = 0,
            nonce     = 0,
            payload   = '111',
            hash      = nil,
        },
    }
    ARGS = THIS
]]
await Publication_New();
[[
    --print('>>>', THIS.pub.timestamp, THIS.pub.nonce, FC.tostring(THIS.pub.hash,true))
    assert(THIS.pub.hash == '\x04\x9A\x59\xFB\x55\x8E\x02\xD4\xA3\xFC\xC5\x6E\xA6\xF7\x90\xA4\xBF\x50\x34\xCB\xC7\xB1\x1B\x70\x2B\xE9\x6B\x5C\x2E\xDD\xEB\xBA')
    assert(THIS.pub.timestamp == 0)
    assert(THIS.pub.nonce == 0)
]]

do
    [[ THIS.pub.payload = '222' ]]
    var Exception.Freechains.Malformed? e;
    catch e do
        await Publication_Check();
    end
    _ceu_assert(e?, "bug found");

    [[ THIS.pub.payload = '111' ]]
    var Exception.Freechains.Malformed? f;
    catch f do
        await Publication_Check();
    end
    _ceu_assert(not f?, "bug found");
end

// BLOCK //

[[
    FC.chains[''][1].head = {
        FC.chains[''][1].head,
        chain     = FC.chains[''][1],
        timestamp = 0,
        nonce     = 0,
        pub       = THIS.pub,
    }
    THIS.node = FC.chains[''][1].head
    ARGS = THIS
]]
await Node_Hash();
[[
    --print('>>>', THIS.node.timestamp, THIS.node.nonce, FC.tostring(THIS.node.hash,true))
    assert(THIS.node.hash == '\x6F\xD2\xCC\xE9\x82\xAF\x49\xAB\xB5\xDD\x6B\x6A\x06\x76\x83\x57\x1C\x9E\xB0\x83\x37\x98\x87\xC6\xC4\x91\xB0\xA7\x24\x36\x7C\x91')
    assert(THIS.node.timestamp == 0, 2)
    assert(THIS.node.nonce == 2, 3)
    assert(THIS.node[1][1] == nil, 4)
    assert(THIS.node.chain.head == THIS.node, 5)
]]

do
    [[
        prv = THIS.node[1]
        THIS.node[1] = THIS.node
    ]]
    var Exception.Freechains.Malformed? e;
    catch e do
        [[ ARGS = THIS ]]
        await Node_Check();
    end
    _ceu_assert(e?, "bug found");

    [[
        THIS.node[1] = prv
    ]]
    var Exception.Freechains.Malformed? f;
    catch f do
        [[ ARGS = THIS ]]
        await Node_Check();
    end
    _ceu_assert(not f?, "bug found");
end

// MESSAGES //

[[
    messages = {
        {
            id = '1.0',
            chain = {
                key   = '',
                zeros = 1,
            },
            payload = '222',
        },
        {
            id = '1.0',
            chain = {
                key   = '',
                zeros = 1,
            },
            payload = '333',
        }
    }
]];

var int ms = [[ #messages ]];
var int i;
loop i in [1 -> ms] do
    [[
        THIS = {}
        msg = messages[@i]
        THIS.pub = {
            chain     = FC.chains[msg.chain.key][msg.chain.zeros],
            timestamp = 0,    -- TODO: 64-bit timestamp
            nonce     = 0,
            payload   = msg.payload,
            hash      = nil,
        }
        ARGS = THIS
    ]]
    await Publication_New();
    [[
        FC.chains[''][1].head = {
            FC.chains[''][1].head,
            chain     = FC.chains[''][1],
            timestamp = 0,
            nonce     = 0,
            pub       = THIS.pub,
        }
        THIS.node = FC.chains[''][1].head
        ARGS = THIS
    ]]
    await Node_Hash();
end

[[
    head = FC.chains[''][1].head
    assert(head.pub.payload == '333')
    assert(head[1].pub.payload == '222')
    assert(head[1][1].pub.payload == '111')
    print 'OK!'
]]

escape 0;
