#include "common.ceu"

///////////////////////////////////////////////////////////////////////////////
// 0->1 (starting in sequence)
///////////////////////////////////////////////////////////////////////////////

event none ok;

var[] byte chain1;
var[] byte chain2;

par/and do

///////////////////////////////////////////////////////////////////////////////
// 0
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        [[
            FC = require 'freechains'

            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8340'
                },
                no_persistency = true,
                chains = {
                },
            }
        ]];
        var& Init init = spawn Init();
        await init.ok;
        await init.ok;
        emit ok;
        await ok;
        [[
            CFG.chains['tst-25'] = {
                key   = 'tst-25',
                zeros = 0,
                peers = {
                    {
                        address = '127.0.0.1',
                        port    = '8341'
                    },
                },
            }
        ]]
        await Subscribe();
        spawn Broadcast(&init.shared);
        AWAIT_CHAIN_LENGTH(init.shared,"tst-25",0,4);
        emit ok;
        [[
            chain1 = FC.chain_tostring('|tst-25|0|')
            print'===> CLIENT'
            print('>'..string.rep('=',78))
            print(chain1)
            print('<'..string.rep('=',78))
        ]];
        chain1 = []..[[chain1]];
    end

with

///////////////////////////////////////////////////////////////////////////////
// 1
///////////////////////////////////////////////////////////////////////////////

    lua[] do
        await ok;
        [[
            FC = require 'freechains'

            CFG = {
                daemon = {
                    address = '127.0.0.1',
                    port    = '8341'
                },
                chains = {
                    zeros_raise = TODO,     -- global and per-chain
                    ['tst-25'] = {
                        key   = 'tst-25',
                        zeros = 0,
                        peers = {
                            {
                                address = '127.0.0.1',
                                port    = '8340'
                            },
                        },
                    },
                },
            }
        ]];
        [[ os.execute('cp tst/\\|tst-25\\|0\\|.chain /tmp/freechains/8341/') ]]
        var& Init init = spawn Init();
        AWAIT_CHAIN_LENGTH(init.shared,"tst-25",0,4);

        [[
            chain2 = FC.chain_tostring('|tst-25|0|')
            print'===> SERVER'
            print('>'..string.rep('=',78))
            print(chain2)
            print('<'..string.rep('=',78))
        ]];
        chain2 = []..[[chain2]];
        par/and do
            emit ok;
        with
            await ok;
        end
    end

end

[[
    assert(@chain1 == @chain2)
    print'OK!'
]]

escape 0;
