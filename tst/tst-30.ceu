#include "common.ceu"

_srand(_time(null));

///////////////////////////////////////////////////////////////////////////////
// 0->1->...->N->0
///////////////////////////////////////////////////////////////////////////////

#define N 3

input void ANY;

class Node with
    var int i;
do
    var int unique = 0;
    [[
        G(unique) = app_create()
        APP = G(unique)
    ]];
    spawn do
        every ANY do
            [[ APP = G(unique) ]];
        end
    end

    var int local  = 8330+i;
    var int remote = 8331+i;
    if i == (N-1) then
        remote = 8330;
    end

    [=[
        dofile 'cfg/config.lua'

        SERVER {
            host = { '127.0.0.1', @local },
        }

        CLIENT {
            peers = {
                {
                    host = { '127.0.0.1', @remote },
                },
            },
        }
    ]=]

    do Init;

    do
        var char[] ip      = [[ APP.server.host[1] ]];
        var int    port    = [[ APP.server.host[2] ]];
        var int    backlog = [[ APP.server.backlog ]];
        _dbg(0, "server | listening in %s:%d", (_char&&)&&ip, port);
        var UV_TCP_Server _ = UV_TCP_Server.build(&ip, port, backlog);

        loop j in N do
            // how much time between each message?
            await (100+_rand()%1000) ms;
            [[
                APP.messages = {}
                MESSAGE {
                    id = '1.0',
                    chain = {
                        key   = '',
                        zeros = 0,
                    },
                    payload = string.format('%03d',@this.i)..'.'..string.format('%03d',@j),
                }
            ]];
            do ClientMessages;
        end

        // wait all messages to be received
        loop do
            await 1s;   // periodic check (any number is ok)
            [[
                t = GG.chain_head_base_size(APP.chains['||0|'].head_hash)
            ]]
            var int size = [[ t.size ]];
            if size == N*N+1 then
                break;
            end
        end

        // how much time to wait for consensus???
        await N s;
    end

#if 0
[[
print(@this.i, '>'..string.rep('=',70))
print(GG.chain_tostring('||0|'))
print(@this.i, '<'..string.rep('=',70))
]];
#endif
    var char[] path = [[ '/tmp/'..string.format('%03d',@this.i)..'.chain' ]];
    [[ ARGS = { chain_id='||0|' } ]];
    var int ret = do FS_write_10.run(&path);
    _assert(ret == _ERR_NONE);
end

pool Node[N] nodes;

loop i in N do
    spawn Node in nodes with
        this.i = i;
    end;
end

// wait all nodes to terminate
loop do
    await 5s;
    var bool ok = true;
    loop n in nodes do
        ok = false;
    end
    if ok then
        break;
    end
end

// assert consensus
[[ file1 = io.open('/tmp/000.chain'):read'*a' ]]
loop i in N do
    [[
        file2 = io.open('/tmp/'..string.format('%03d',@i)..'.chain'):read'*a'
        assert(file1 == file2)
    ]]
end

[[ print'OK!' ]];

escape 0;
